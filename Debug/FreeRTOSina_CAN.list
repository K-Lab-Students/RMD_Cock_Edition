
FreeRTOSina_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008064  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008268  08008268  00018268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008664  08008664  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800866c  0800866c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001dc  08008850  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008850  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160fe  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c48  00000000  00000000  00036308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00038f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299a8  00000000  00000000  0003b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001481b  00000000  00000000  00064a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100a70  00000000  00000000  0007929b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179d0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f8  00000000  00000000  00179d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800824c 	.word	0x0800824c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	0800824c 	.word	0x0800824c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_CAN1_Init+0xa4>)
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <MX_CAN1_Init+0xa8>)
 80005fe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000602:	2201      	movs	r2, #1
 8000604:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_CAN1_Init+0xa4>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000614:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000618:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_CAN1_Init+0xa4>)
 800061c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000620:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_CAN1_Init+0xa4>)
 800062a:	2201      	movs	r2, #1
 800062c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000636:	2201      	movs	r2, #1
 8000638:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_CAN1_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000642:	2201      	movs	r2, #1
 8000644:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000648:	f001 f91a 	bl	8001880 <HAL_CAN_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000652:	f000 fa90 	bl	8000b76 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800065e:	2301      	movs	r3, #1
 8000660:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_CAN1_Init+0xa4>)
 8000680:	f001 f9fa 	bl	8001a78 <HAL_CAN_ConfigFilter>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_CAN1_Init+0x9a>
  {
  Error_Handler();
 800068a:	f000 fa74 	bl	8000b76 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200001f8 	.word	0x200001f8
 800069c:	40006400 	.word	0x40006400

080006a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1f      	ldr	r2, [pc, #124]	; (800073c <HAL_CAN_MspInit+0x9c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d137      	bne.n	8000732 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <HAL_CAN_MspInit+0xa0>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <HAL_CAN_MspInit+0xa0>)
 80006c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <HAL_CAN_MspInit+0xa0>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_CAN_MspInit+0xa0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_CAN_MspInit+0xa0>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_CAN_MspInit+0xa0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006f2:	2303      	movs	r3, #3
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000702:	2309      	movs	r3, #9
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <HAL_CAN_MspInit+0xa4>)
 800070e:	f002 f933 	bl	8002978 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2014      	movs	r0, #20
 8000718:	f002 f865 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800071c:	2014      	movs	r0, #20
 800071e:	f002 f87e 	bl	800281e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2016      	movs	r0, #22
 8000728:	f002 f85d 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800072c:	2016      	movs	r0, #22
 800072e:	f002 f876 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40006400 	.word	0x40006400
 8000740:	40023800 	.word	0x40023800
 8000744:	40020c00 	.word	0x40020c00

08000748 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b83      	ldr	r3, [pc, #524]	; (800096c <MX_GPIO_Init+0x224>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a82      	ldr	r2, [pc, #520]	; (800096c <MX_GPIO_Init+0x224>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b80      	ldr	r3, [pc, #512]	; (800096c <MX_GPIO_Init+0x224>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b7d      	ldr	r3, [pc, #500]	; (800096c <MX_GPIO_Init+0x224>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a7c      	ldr	r2, [pc, #496]	; (800096c <MX_GPIO_Init+0x224>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b7a      	ldr	r3, [pc, #488]	; (800096c <MX_GPIO_Init+0x224>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b77      	ldr	r3, [pc, #476]	; (800096c <MX_GPIO_Init+0x224>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a76      	ldr	r2, [pc, #472]	; (800096c <MX_GPIO_Init+0x224>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b74      	ldr	r3, [pc, #464]	; (800096c <MX_GPIO_Init+0x224>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b71      	ldr	r3, [pc, #452]	; (800096c <MX_GPIO_Init+0x224>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a70      	ldr	r2, [pc, #448]	; (800096c <MX_GPIO_Init+0x224>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b6e      	ldr	r3, [pc, #440]	; (800096c <MX_GPIO_Init+0x224>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b6b      	ldr	r3, [pc, #428]	; (800096c <MX_GPIO_Init+0x224>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a6a      	ldr	r2, [pc, #424]	; (800096c <MX_GPIO_Init+0x224>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b68      	ldr	r3, [pc, #416]	; (800096c <MX_GPIO_Init+0x224>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	4b65      	ldr	r3, [pc, #404]	; (800096c <MX_GPIO_Init+0x224>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a64      	ldr	r2, [pc, #400]	; (800096c <MX_GPIO_Init+0x224>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b62      	ldr	r3, [pc, #392]	; (800096c <MX_GPIO_Init+0x224>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	485e      	ldr	r0, [pc, #376]	; (8000970 <MX_GPIO_Init+0x228>)
 80007f6:	f002 fa6b 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	485d      	ldr	r0, [pc, #372]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000800:	f002 fa66 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4857      	ldr	r0, [pc, #348]	; (8000978 <MX_GPIO_Init+0x230>)
 800081c:	f002 f8ac 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000820:	2332      	movs	r3, #50	; 0x32
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000830:	230b      	movs	r3, #11
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	484f      	ldr	r0, [pc, #316]	; (8000978 <MX_GPIO_Init+0x230>)
 800083c:	f002 f89c 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000840:	2386      	movs	r3, #134	; 0x86
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000850:	230b      	movs	r3, #11
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4848      	ldr	r0, [pc, #288]	; (800097c <MX_GPIO_Init+0x234>)
 800085c:	f002 f88c 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000860:	f244 0381 	movw	r3, #16513	; 0x4081
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483d      	ldr	r0, [pc, #244]	; (8000970 <MX_GPIO_Init+0x228>)
 800087a:	f002 f87d 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4835      	ldr	r0, [pc, #212]	; (8000970 <MX_GPIO_Init+0x228>)
 800089c:	f002 f86c 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008b2:	2307      	movs	r3, #7
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4830      	ldr	r0, [pc, #192]	; (8000980 <MX_GPIO_Init+0x238>)
 80008be:	f002 f85b 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4826      	ldr	r0, [pc, #152]	; (8000974 <MX_GPIO_Init+0x22c>)
 80008da:	f002 f84d 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x22c>)
 80008f2:	f002 f841 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000908:	230a      	movs	r3, #10
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481a      	ldr	r0, [pc, #104]	; (800097c <MX_GPIO_Init+0x234>)
 8000914:	f002 f830 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <MX_GPIO_Init+0x234>)
 800092e:	f002 f823 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000944:	230b      	movs	r3, #11
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_GPIO_Init+0x22c>)
 8000950:	f002 f812 	bl	8002978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2028      	movs	r0, #40	; 0x28
 800095a:	f001 ff44 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f001 ff5d 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020c00 	.word	0x40020c00

08000984 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{    if(HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000990:	2100      	movs	r1, #0
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f001 faee 	bl	8001f74 <HAL_CAN_GetRxMessage>
//	//		sprintf(trans_str, "ID: %d Current: %f Speed: %f Position: %f Temperature: %d \r\n ", RMD_Actuator.id, RMD_Actuator.current, RMD_Actuator.speed, RMD_Actuator.position, RMD_Actuator.temperature);
//			sprintf(trans_str, "%f \r\n ", RMD_Actuator.position);
//			HAL_UART_Transmit_IT(&huart2, trans_str, strlen(trans_str));
//		  	  }
    }
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000254 	.word	0x20000254
 80009a4:	20000238 	.word	0x20000238

080009a8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
//    uint32_t er = HAL_CAN_GetError(hcan);
//    sprintf(trans_str,"ER CAN %lu %08lX\n", er, er);
//    HAL_UART_Transmit(&huart2, (uint8_t*)trans_str, strlen(trans_str), 100);
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
//        		buttonIsPressed = 0;
//
//        		HAL_TIM_Base_Stop_IT(&htim1);
//        		TIM1->CNT = 0;
//        }
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fed3 	bl	800177e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f866 	bl	8000aa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <main+0xb8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f06f 0201 	mvn.w	r2, #1
 80009e4:	611a      	str	r2, [r3, #16]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f7ff feaf 	bl	8000748 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009ea:	f7ff fe03 	bl	80005f4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80009ee:	f000 fde5 	bl	80015bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009f2:	f000 fd69 	bl	80014c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Stop(&hcan1);
 80009f6:	4825      	ldr	r0, [pc, #148]	; (8000a8c <main+0xbc>)
 80009f8:	f001 f96e 	bl	8001cd8 <HAL_CAN_Stop>

  HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f000 ff1b 	bl	8001838 <HAL_Delay>

  HAL_CAN_Start(&hcan1);
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <main+0xbc>)
 8000a04:	f001 f924 	bl	8001c50 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 8000a08:	f648 4102 	movw	r1, #35842	; 0x8c02
 8000a0c:	481f      	ldr	r0, [pc, #124]	; (8000a8c <main+0xbc>)
 8000a0e:	f001 fbc3 	bl	8002198 <HAL_CAN_ActivateNotification>


  GYEMSDeviceInit(&servo1, 0x149, &registers_space.servo_registers.servo_1);
 8000a12:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <main+0xc0>)
 8000a14:	f240 1149 	movw	r1, #329	; 0x149
 8000a18:	481e      	ldr	r0, [pc, #120]	; (8000a94 <main+0xc4>)
 8000a1a:	f000 f929 	bl	8000c70 <GYEMSDeviceInit>
  motorInit(&RMD_Actuator, 0x149);
 8000a1e:	f240 1149 	movw	r1, #329	; 0x149
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <main+0xc8>)
 8000a24:	f000 fbea 	bl	80011fc <motorInit>


  do{
	  deviceAppProcess(&servo1);
 8000a28:	481a      	ldr	r0, [pc, #104]	; (8000a94 <main+0xc4>)
 8000a2a:	f000 f953 	bl	8000cd4 <deviceAppProcess>
  }
  while(servo1.registers->lastSmState != GYEMS_OP);
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <main+0xc4>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	7f5b      	ldrb	r3, [r3, #29]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d1f7      	bne.n	8000a28 <main+0x58>


  HAL_Delay(5000);
 8000a38:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a3c:	f000 fefc 	bl	8001838 <HAL_Delay>
//  HAL_Delay(10);
  GYEMSDevicePositionControlCmd2(&servo1, 0, 20000);
 8000a40:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000a9c <main+0xcc>
 8000a44:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000aa0 <main+0xd0>
 8000a48:	4812      	ldr	r0, [pc, #72]	; (8000a94 <main+0xc4>)
 8000a4a:	f000 fad1 	bl	8000ff0 <GYEMSDevicePositionControlCmd2>
  HAL_Delay(2000);
 8000a4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a52:	f000 fef1 	bl	8001838 <HAL_Delay>
  GYEMSDevicePositionControlCmd2(&servo1, 90, 20000);
 8000a56:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000a9c <main+0xcc>
 8000a5a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000aa4 <main+0xd4>
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <main+0xc4>)
 8000a60:	f000 fac6 	bl	8000ff0 <GYEMSDevicePositionControlCmd2>
  HAL_Delay(2000);
 8000a64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a68:	f000 fee6 	bl	8001838 <HAL_Delay>
  GYEMSDevicePositionControlCmd2(&servo1, 0, 20000);
 8000a6c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000a9c <main+0xcc>
 8000a70:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000aa0 <main+0xd0>
 8000a74:	4807      	ldr	r0, [pc, #28]	; (8000a94 <main+0xc4>)
 8000a76:	f000 fabb 	bl	8000ff0 <GYEMSDevicePositionControlCmd2>

    /* USER CODE BEGIN 3 */
//	  GYEMSDeviceReadSingleCircleAngle(&servo1);
//	  GYEMSDeviceReadEncoderDataCmd(&servo1);
//	  GYEMSDeviceReadMultiTurnAngle(&servo1);
	  GYEMSDeviceMultiturnEncoderPosition(&servo1);
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <main+0xc4>)
 8000a7c:	f000 fb4e 	bl	800111c <GYEMSDeviceMultiturnEncoderPosition>
	  HAL_Delay(100);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f000 fed9 	bl	8001838 <HAL_Delay>
	  GYEMSDeviceMultiturnEncoderPosition(&servo1);
 8000a86:	e7f8      	b.n	8000a7a <main+0xaa>
 8000a88:	200002b4 	.word	0x200002b4
 8000a8c:	200001f8 	.word	0x200001f8
 8000a90:	20000260 	.word	0x20000260
 8000a94:	20000284 	.word	0x20000284
 8000a98:	20000220 	.word	0x20000220
 8000a9c:	469c4000 	.word	0x469c4000
 8000aa0:	00000000 	.word	0x00000000
 8000aa4:	42b40000 	.word	0x42b40000

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2234      	movs	r2, #52	; 0x34
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 ff5e 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <SystemClock_Config+0xb0>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <SystemClock_Config+0xb0>)
 8000ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <SystemClock_Config+0xb0>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <SystemClock_Config+0xb4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <SystemClock_Config+0xb4>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <SystemClock_Config+0xb4>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 f90d 	bl	8002d34 <HAL_RCC_OscConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f829 	bl	8000b76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b24:	230f      	movs	r3, #15
 8000b26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fba6 	bl	8003290 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b4a:	f000 f814 	bl	8000b76 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
//
//		runParam = 0;
//
//		isStoped = false;
//	}
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7a:	b672      	cpsid	i
}
 8000b7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <Error_Handler+0x8>

08000b80 <gyemsDeviceInit>:
uint32_t TxMailbox = 0;
extern CAN_HandleTypeDef hcan1;
extern huart2;

void gyemsDeviceInit(GYEMSDevice_t *device)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    device->registers->lastSmState = GYEMS_INIT;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	775a      	strb	r2, [r3, #29]
    device->smState = gyemsDevicePreop;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <gyemsDeviceInit+0x28>)
 8000b94:	615a      	str	r2, [r3, #20]

    device->smState = gyemsDevicePreop;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <gyemsDeviceInit+0x28>)
 8000b9a:	615a      	str	r2, [r3, #20]

}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	08000bad 	.word	0x08000bad

08000bac <gyemsDevicePreop>:

void gyemsDevicePreop(GYEMSDevice_t *device)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    device->registers->lastSmState = GYEMS_PREOP;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2202      	movs	r2, #2
 8000bba:	775a      	strb	r2, [r3, #29]

//    if (device->requestedSmState == OP)
//    {
        device->smState = gyemsDevicePreopToOp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <gyemsDevicePreop+0x24>)
 8000bc0:	615a      	str	r2, [r3, #20]
//    }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	08000bd5 	.word	0x08000bd5

08000bd4 <gyemsDevicePreopToOp>:

void gyemsDevicePreopToOp(GYEMSDevice_t *device)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    device->registers->lastSmState = GYEMS_PREOP_TO_OP;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	2203      	movs	r2, #3
 8000be2:	775a      	strb	r2, [r3, #29]
    device->smState = gyemsDeviceOp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <gyemsDevicePreopToOp+0x58>)
 8000be8:	615a      	str	r2, [r3, #20]


    if(GYEMSDeviceMotorRunCmd(device)){
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f8f0 	bl	8000dd0 <GYEMSDeviceMotorRunCmd>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d013      	beq.n	8000c1e <gyemsDevicePreopToOp+0x4a>

//    	__HAL_CAN_DISABLE_IT(&hcan1, 0b11111111111111111);
    HAL_Delay(5000);
 8000bf6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bfa:	f000 fe1d 	bl	8001838 <HAL_Delay>
    GYEMSDeviceTorqueCurrControlCmd(device, 0);
 8000bfe:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c30 <gyemsDevicePreopToOp+0x5c>
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f964 	bl	8000ed0 <GYEMSDeviceTorqueCurrControlCmd>
    HAL_Delay(300);
 8000c08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c0c:	f000 fe14 	bl	8001838 <HAL_Delay>
    GYEMSDeviceMotorStopCmd(device);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f86d 	bl	8000cf0 <GYEMSDeviceMotorStopCmd>
    device->smState = gyemsDeviceOp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <gyemsDevicePreopToOp+0x58>)
 8000c1a:	615a      	str	r2, [r3, #20]
    } else
    {
        device->smState = gyemsDeviceFault;
    }

}
 8000c1c:	e002      	b.n	8000c24 <gyemsDevicePreopToOp+0x50>
        device->smState = gyemsDeviceFault;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <gyemsDevicePreopToOp+0x60>)
 8000c22:	615a      	str	r2, [r3, #20]
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08000c39 	.word	0x08000c39
 8000c30:	00000000 	.word	0x00000000
 8000c34:	08000c55 	.word	0x08000c55

08000c38 <gyemsDeviceOp>:

void gyemsDeviceOp(GYEMSDevice_t *device)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    device->registers->lastSmState = GYEMS_OP;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	2204      	movs	r2, #4
 8000c46:	775a      	strb	r2, [r3, #29]

    //            break;
    //    }


}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <gyemsDeviceFault>:

void gyemsDeviceFault(GYEMSDevice_t *device)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    device->registers->lastSmState = GYEMS_FAULT;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	2205      	movs	r2, #5
 8000c62:	775a      	strb	r2, [r3, #29]
//    device->smState = gyemsDeviceInit;
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <GYEMSDeviceInit>:




void GYEMSDeviceInit(GYEMSDevice_t *device_ptr, uint32_t id, GYEMSDeviceRegisters_t *regSpacePtr)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]

	device_ptr->id = id;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	601a      	str	r2, [r3, #0]
    device_ptr->lastRecievedMsgTime = 0;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
    device_ptr->hbCounter = 0;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    device_ptr->resendCounter = 0;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
    device_ptr->registers = regSpacePtr;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	619a      	str	r2, [r3, #24]
    device_ptr->smState = gyemsDeviceInit;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <GYEMSDeviceInit+0x60>)
 8000c9e:	615a      	str	r2, [r3, #20]
    device_ptr->registers->requestedSmState = GYEMS_INIT;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	771a      	strb	r2, [r3, #28]
    device_ptr->registers->in.driveTask = 0.f;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
    device_ptr->registers->in.driveMode = CURRENT;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	751a      	strb	r2, [r3, #20]
    device_ptr->registers->lastSmState = 0;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	775a      	strb	r2, [r3, #29]

}
 8000cc2:	bf00      	nop
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	08000b81 	.word	0x08000b81

08000cd4 <deviceAppProcess>:

void deviceAppProcess(void* devicePtr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
    GYEMSDevice_t* device = (GYEMSDevice_t*)(devicePtr);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	60fb      	str	r3, [r7, #12]

        device->smState(device);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	4798      	blx	r3

}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <GYEMSDeviceMotorStopCmd>:
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
}

void GYEMSDeviceMotorStopCmd(GYEMSDevice_t* device_ptr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b092      	sub	sp, #72	; 0x48
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
    CanFrame_t txFrame;
    CAN_TxHeaderTypeDef TxHeader;
	CAN_RxHeaderTypeDef RxHeader;

    txFrame.SID = device_ptr->id;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000d06:	0190      	lsls	r0, r2, #6
 8000d08:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000d0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4602      	mov	r2, r0
 8000d12:	430a      	orrs	r2, r1
 8000d14:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8000d16:	0a9b      	lsrs	r3, r3, #10
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	f003 0101 	and.w	r1, r3, #1
 8000d22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000d26:	f023 0301 	bic.w	r3, r3, #1
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    txFrame.DLC = 8;
 8000d34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000d38:	2208      	movs	r2, #8
 8000d3a:	f362 0303 	bfi	r3, r2, #0, #4
 8000d3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    txFrame.answerWait = 1;
 8000d42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    txFrame.data8[0] = MOTOR_STOP;
 8000d4e:	2381      	movs	r3, #129	; 0x81
 8000d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    txFrame.data8[1] = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    txFrame.data8[2] = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    txFrame.data8[3] = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    txFrame.data8[4] = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    txFrame.data8[5] = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    txFrame.data8[6] = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    txFrame.data8[7] = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    TxHeader.DLC = txFrame.DLC;
 8000d7e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000d82:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.StdId = txFrame.SID;
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	f3c3 138a 	ubfx	r3, r3, #6, #11
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24

	TxHeader.ExtId = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8000d98:	2300      	movs	r3, #0
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000da0:	bf00      	nop
 8000da2:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <GYEMSDeviceMotorStopCmd+0xd8>)
 8000da4:	f001 f8b1 	bl	8001f0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f9      	beq.n	8000da2 <GYEMSDeviceMotorStopCmd+0xb2>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
 8000dae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000db2:	1cda      	adds	r2, r3, #3
 8000db4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <GYEMSDeviceMotorStopCmd+0xdc>)
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <GYEMSDeviceMotorStopCmd+0xd8>)
 8000dbc:	f000 ffd5 	bl	8001d6a <HAL_CAN_AddTxMessage>
}
 8000dc0:	bf00      	nop
 8000dc2:	3748      	adds	r7, #72	; 0x48
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001f8 	.word	0x200001f8
 8000dcc:	200002ac 	.word	0x200002ac

08000dd0 <GYEMSDeviceMotorRunCmd>:

uint8_t GYEMSDeviceMotorRunCmd(GYEMSDevice_t *device_ptr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b092      	sub	sp, #72	; 0x48
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    CanFrame_t txFrame;
    CAN_TxHeaderTypeDef TxHeader;
	CAN_RxHeaderTypeDef RxHeader;

    txFrame.SID = device_ptr->id;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000de6:	0190      	lsls	r0, r2, #6
 8000de8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8000dea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dee:	4611      	mov	r1, r2
 8000df0:	4602      	mov	r2, r0
 8000df2:	430a      	orrs	r2, r1
 8000df4:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8000df6:	0a9b      	lsrs	r3, r3, #10
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	f003 0101 	and.w	r1, r3, #1
 8000e02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    txFrame.DLC = 8;
 8000e14:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e18:	2208      	movs	r2, #8
 8000e1a:	f362 0303 	bfi	r3, r2, #0, #4
 8000e1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    txFrame.answerWait = 1;
 8000e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    txFrame.data8[0] = MOTOR_RUNNING;
 8000e2e:	2388      	movs	r3, #136	; 0x88
 8000e30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    txFrame.data8[1] = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    txFrame.data8[2] = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    txFrame.data8[3] = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    txFrame.data8[4] = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    txFrame.data8[5] = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    txFrame.data8[6] = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    txFrame.data8[7] = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    TxHeader.DLC = txFrame.DLC;
 8000e5e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.StdId = txFrame.SID;
 8000e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e6c:	f3c3 138a 	ubfx	r3, r3, #6, #11
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24

	TxHeader.ExtId = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000e80:	bf00      	nop
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <GYEMSDeviceMotorRunCmd+0xf0>)
 8000e84:	f001 f841 	bl	8001f0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <GYEMSDeviceMotorRunCmd+0xb2>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox) != HAL_OK)
 8000e8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e92:	1cda      	adds	r2, r3, #3
 8000e94:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <GYEMSDeviceMotorRunCmd+0xf4>)
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <GYEMSDeviceMotorRunCmd+0xf0>)
 8000e9c:	f000 ff65 	bl	8001d6a <HAL_CAN_AddTxMessage>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <GYEMSDeviceMotorRunCmd+0xe4>
	{
			HAL_UART_Transmit(&huart2, (uint8_t*)"ER SEND\n", 8, 100);
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <GYEMSDeviceMotorRunCmd+0xf8>)
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <GYEMSDeviceMotorRunCmd+0xfc>)
 8000eae:	f003 fcd7 	bl	8004860 <HAL_UART_Transmit>
	}
	else {
	//	HAL_UART_Transmit_IT(&huart2, txFrame.data8, sizeof(txFrame.data8));
		return 1;
	}
}
 8000eb2:	e000      	b.n	8000eb6 <GYEMSDeviceMotorRunCmd+0xe6>
		return 1;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3748      	adds	r7, #72	; 0x48
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001f8 	.word	0x200001f8
 8000ec4:	200002ac 	.word	0x200002ac
 8000ec8:	08008268 	.word	0x08008268
 8000ecc:	20000300 	.word	0x20000300

08000ed0 <GYEMSDeviceTorqueCurrControlCmd>:
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
}

void GYEMSDeviceTorqueCurrControlCmd(GYEMSDevice_t *device_ptr, float current)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	ed87 0a00 	vstr	s0, [r7]
    CanFrame_t txFrame;
    CAN_TxHeaderTypeDef TxHeader;
	CAN_RxHeaderTypeDef RxHeader;

    txFrame.SID = device_ptr->id;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000eea:	0190      	lsls	r0, r2, #6
 8000eec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000ef0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
 8000efe:	0a9b      	lsrs	r3, r3, #10
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	f003 0101 	and.w	r1, r3, #1
 8000f0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	461a      	mov	r2, r3
 8000f14:	460b      	mov	r3, r1
 8000f16:	4313      	orrs	r3, r2
 8000f18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    txFrame.DLC = 8;
 8000f1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f20:	2208      	movs	r2, #8
 8000f22:	f362 0303 	bfi	r3, r2, #0, #4
 8000f26:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    //TODO: проверять величину тока
    txFrame.answerWait = 1;
 8000f2a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int16_t currentTranslated = (int16_t)(current / GYEMS_AMPERES_PER_NUMBER);
 8000f36:	ed97 7a00 	vldr	s14, [r7]
 8000f3a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000fe4 <GYEMSDeviceTorqueCurrControlCmd+0x114>
 8000f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f46:	ee17 3a90 	vmov	r3, s15
 8000f4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    txFrame.data8[0] = TORQUE_CLOSED_LOOP_CMD;
 8000f4e:	23a1      	movs	r3, #161	; 0xa1
 8000f50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    txFrame.data8[1] = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    txFrame.data8[2] = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    txFrame.data8[3] = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    txFrame.data8[4] = currentTranslated & 0xFF; //TODO: проверить порядок байт
 8000f66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    txFrame.data8[5] = currentTranslated >> 8;
 8000f70:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000f74:	121b      	asrs	r3, r3, #8
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    txFrame.data8[6] = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    txFrame.data8[7] = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

    TxHeader.DLC = txFrame.DLC;
 8000f8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.StdId = txFrame.SID;
 8000f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f98:	f3c3 138a 	ubfx	r3, r3, #6, #11
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28

	TxHeader.ExtId = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.RTR = txFrame.RTR; //CAN_RTR_REMOTE
 8000fa4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fa8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.IDE = txFrame.IDE;    // CAN_ID_EXT
 8000fb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000fbc:	bf00      	nop
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <GYEMSDeviceTorqueCurrControlCmd+0x118>)
 8000fc0:	f000 ffa3 	bl	8001f0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f9      	beq.n	8000fbe <GYEMSDeviceTorqueCurrControlCmd+0xee>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
 8000fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fce:	1cda      	adds	r2, r3, #3
 8000fd0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <GYEMSDeviceTorqueCurrControlCmd+0x11c>)
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <GYEMSDeviceTorqueCurrControlCmd+0x118>)
 8000fd8:	f000 fec7 	bl	8001d6a <HAL_CAN_AddTxMessage>


}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	; 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	3c840000 	.word	0x3c840000
 8000fe8:	200001f8 	.word	0x200001f8
 8000fec:	200002ac 	.word	0x200002ac

08000ff0 <GYEMSDevicePositionControlCmd2>:
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
}

void GYEMSDevicePositionControlCmd2(GYEMSDevice_t* device_ptr, float posDegree, float maxSpeed)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ffc:	edc7 0a01 	vstr	s1, [r7, #4]
    CanFrame_t txFrame;
    CAN_TxHeaderTypeDef TxHeader;
	CAN_RxHeaderTypeDef RxHeader;

    txFrame.SID = device_ptr->id;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001008:	b29b      	uxth	r3, r3
 800100a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800100e:	0190      	lsls	r0, r2, #6
 8001010:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001014:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001018:	4611      	mov	r1, r2
 800101a:	4602      	mov	r2, r0
 800101c:	430a      	orrs	r2, r1
 800101e:	f8a7 2044 	strh.w	r2, [r7, #68]	; 0x44
 8001022:	0a9b      	lsrs	r3, r3, #10
 8001024:	b29b      	uxth	r3, r3
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	f003 0101 	and.w	r1, r3, #1
 800102e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	4313      	orrs	r3, r2
 800103c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    txFrame.DLC = 8;
 8001040:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001044:	2208      	movs	r2, #8
 8001046:	f362 0303 	bfi	r3, r2, #0, #4
 800104a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    txFrame.answerWait = 1;
 800104e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    int32_t posTranslated = (int32_t)(posDegree * MOTOR_REDUCTION_RATIO / GYEMS_DEGREE_PER_NUMBER);
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001066:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001110 <GYEMSDevicePositionControlCmd2+0x120>
 800106a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001072:	ee17 3a90 	vmov	r3, s15
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
    uint16_t maxSpeedTranslated = (uint16_t)(maxSpeed / GYEMS_MAX_SPEED_PER_NUMBER);
 8001078:	edd7 7a01 	vldr	s15, [r7, #4]
 800107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001080:	ee17 3a90 	vmov	r3, s15
 8001084:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    txFrame.data8[0] = POSITION_CLOSED_LOOP_CMD_2;
 8001088:	23a4      	movs	r3, #164	; 0xa4
 800108a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    txFrame.data8[1] = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    txFrame.data8[2] = maxSpeedTranslated & 0xFF;
 8001094:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    txFrame.data8[3] = maxSpeedTranslated >> 8;
 800109e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    txFrame.data8[4] = posTranslated & 0xFF; //TODO: проверить порядок байт
 80010ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    txFrame.data8[5] = posTranslated >> 8;
 80010b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b6:	121b      	asrs	r3, r3, #8
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    txFrame.data8[6] = posTranslated >> 16;
 80010be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c0:	141b      	asrs	r3, r3, #16
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    txFrame.data8[7] = posTranslated >> 24;
 80010c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ca:	161b      	asrs	r3, r3, #24
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    TxHeader.DLC = txFrame.DLC;
 80010d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80010d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	TxHeader.StdId = txFrame.SID;
 80010de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e0:	f3c3 138a 	ubfx	r3, r3, #6, #11
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	TxHeader.ExtId = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80010ec:	2300      	movs	r3, #0
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
	TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
 80010f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010f8:	1cda      	adds	r2, r3, #3
 80010fa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <GYEMSDevicePositionControlCmd2+0x124>)
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <GYEMSDevicePositionControlCmd2+0x128>)
 8001102:	f000 fe32 	bl	8001d6a <HAL_CAN_AddTxMessage>
}
 8001106:	bf00      	nop
 8001108:	3758      	adds	r7, #88	; 0x58
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	3c23d70a 	.word	0x3c23d70a
 8001114:	200002ac 	.word	0x200002ac
 8001118:	200001f8 	.word	0x200001f8

0800111c <GYEMSDeviceMultiturnEncoderPosition>:
{

}

void GYEMSDeviceMultiturnEncoderPosition(GYEMSDevice_t* device_ptr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b092      	sub	sp, #72	; 0x48
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    CanFrame_t txFrame;
    CAN_TxHeaderTypeDef TxHeader;
	CAN_RxHeaderTypeDef RxHeader;

    txFrame.SID = device_ptr->id;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800112c:	b29b      	uxth	r3, r3
 800112e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001132:	0190      	lsls	r0, r2, #6
 8001134:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001136:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800113a:	4611      	mov	r1, r2
 800113c:	4602      	mov	r2, r0
 800113e:	430a      	orrs	r2, r1
 8001140:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8001142:	0a9b      	lsrs	r3, r3, #10
 8001144:	b29b      	uxth	r3, r3
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	f003 0101 	and.w	r1, r3, #1
 800114e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	461a      	mov	r2, r3
 8001158:	460b      	mov	r3, r1
 800115a:	4313      	orrs	r3, r2
 800115c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    txFrame.DLC = 8;
 8001160:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001164:	2208      	movs	r2, #8
 8001166:	f362 0303 	bfi	r3, r2, #0, #4
 800116a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    txFrame.answerWait = 1;
 800116e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    txFrame.data8[0] = READ_ENCODER_POS;
 800117a:	2360      	movs	r3, #96	; 0x60
 800117c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    txFrame.data8[1] = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    txFrame.data8[2] = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    txFrame.data8[3] = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    txFrame.data8[4] = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    txFrame.data8[5] = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    txFrame.data8[6] = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    txFrame.data8[7] = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

    TxHeader.DLC = txFrame.DLC;
 80011aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.StdId = txFrame.SID;
 80011b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b8:	f3c3 138a 	ubfx	r3, r3, #6, #11
 80011bc:	b29b      	uxth	r3, r3
 80011be:	627b      	str	r3, [r7, #36]	; 0x24

	TxHeader.ExtId = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 80011cc:	bf00      	nop
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <GYEMSDeviceMultiturnEncoderPosition+0xd8>)
 80011d0:	f000 fe9b 	bl	8001f0a <HAL_CAN_GetTxMailboxesFreeLevel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f9      	beq.n	80011ce <GYEMSDeviceMultiturnEncoderPosition+0xb2>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txFrame.data8, &TxMailbox);
 80011da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011de:	1cda      	adds	r2, r3, #3
 80011e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <GYEMSDeviceMultiturnEncoderPosition+0xdc>)
 80011e6:	4803      	ldr	r0, [pc, #12]	; (80011f4 <GYEMSDeviceMultiturnEncoderPosition+0xd8>)
 80011e8:	f000 fdbf 	bl	8001d6a <HAL_CAN_AddTxMessage>
}
 80011ec:	bf00      	nop
 80011ee:	3748      	adds	r7, #72	; 0x48
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f8 	.word	0x200001f8
 80011f8:	200002ac 	.word	0x200002ac

080011fc <motorInit>:

void motorInit(MotorValues_t* motor, uint16_t idEntered){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
	motor->id = idEntered;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	829a      	strh	r2, [r3, #20]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_MspInit+0x44>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_MspInit+0x44>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_MspInit+0x44>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_MspInit+0x44>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_MspInit+0x44>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_MspInit+0x44>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f000 faa2 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <CAN1_RX0_IRQHandler+0x10>)
 80012be:	f000 ff91 	bl	80021e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001f8 	.word	0x200001f8

080012cc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <CAN1_SCE_IRQHandler+0x10>)
 80012d2:	f000 ff87 	bl	80021e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001f8 	.word	0x200001f8

080012e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012e6:	f002 fe76 	bl	8003fd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002b4 	.word	0x200002b4

080012f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <USART2_IRQHandler+0x10>)
 80012fa:	f003 fb35 	bl	8004968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000300 	.word	0x20000300

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800130c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001310:	f001 fcf8 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_kill>:

int _kill(int pid, int sig)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001332:	f004 fae9 	bl	8005908 <__errno>
 8001336:	4603      	mov	r3, r0
 8001338:	2216      	movs	r2, #22
 800133a:	601a      	str	r2, [r3, #0]
  return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_exit>:

void _exit (int status)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffe7 	bl	8001328 <_kill>
  while (1) {}    /* Make sure we hang here */
 800135a:	e7fe      	b.n	800135a <_exit+0x12>

0800135c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00a      	b.n	8001384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136e:	f3af 8000 	nop.w
 8001372:	4601      	mov	r1, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf0      	blt.n	800136e <_read+0x12>
  }

  return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <_write+0x12>
  }
  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f6:	605a      	str	r2, [r3, #4]
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_isatty>:

int _isatty(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f004 fa4e 	bl	8005908 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20080000 	.word	0x20080000
 8001498:	00000400 	.word	0x00000400
 800149c:	200002b0 	.word	0x200002b0
 80014a0:	200003a0 	.word	0x200003a0

080014a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_TIM1_Init+0xa0>)
 80014e8:	4a20      	ldr	r2, [pc, #128]	; (800156c <MX_TIM1_Init+0xa4>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM1_Init+0xa0>)
 80014ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80014f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_TIM1_Init+0xa0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_TIM1_Init+0xa0>)
 80014fc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001500:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_TIM1_Init+0xa0>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_TIM1_Init+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_TIM1_Init+0xa0>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001514:	4814      	ldr	r0, [pc, #80]	; (8001568 <MX_TIM1_Init+0xa0>)
 8001516:	f002 fd07 	bl	8003f28 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001520:	f7ff fb29 	bl	8000b76 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0310 	add.w	r3, r7, #16
 800152e:	4619      	mov	r1, r3
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM1_Init+0xa0>)
 8001532:	f002 fe6f 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800153c:	f7ff fb1b 	bl	8000b76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM1_Init+0xa0>)
 8001552:	f003 f88b 	bl	800466c <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800155c:	f7ff fb0b 	bl	8000b76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200002b4 	.word	0x200002b4
 800156c:	40010000 	.word	0x40010000

08001570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <HAL_TIM_Base_MspInit+0x44>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d113      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2019      	movs	r0, #25
 80015a0:	f001 f921 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015a4:	2019      	movs	r0, #25
 80015a6:	f001 f93a 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_USART2_UART_Init+0x5c>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART2_UART_Init+0x58>)
 8001600:	f003 f8e0 	bl	80047c4 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800160a:	f7ff fab4 	bl	8000b76 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000300 	.word	0x20000300
 8001618:	40004400 	.word	0x40004400

0800161c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b0ae      	sub	sp, #184	; 0xb8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2290      	movs	r2, #144	; 0x90
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 f99b 	bl	8005978 <memset>
  if(uartHandle->Instance==USART2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a35      	ldr	r2, [pc, #212]	; (800171c <HAL_UART_MspInit+0x100>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d163      	bne.n	8001714 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001650:	2300      	movs	r3, #0
 8001652:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4618      	mov	r0, r3
 800165a:	f002 f83d 	bl	80036d8 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001664:	f7ff fa87 	bl	8000b76 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_UART_MspInit+0x104>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	4a2c      	ldr	r2, [pc, #176]	; (8001720 <HAL_UART_MspInit+0x104>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001672:	6413      	str	r3, [r2, #64]	; 0x40
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_UART_MspInit+0x104>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_UART_MspInit+0x104>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <HAL_UART_MspInit+0x104>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_UART_MspInit+0x104>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_UART_MspInit+0x104>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <HAL_UART_MspInit+0x104>)
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_UART_MspInit+0x104>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016b0:	2308      	movs	r3, #8
 80016b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c8:	2307      	movs	r3, #7
 80016ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <HAL_UART_MspInit+0x108>)
 80016d6:	f001 f94f 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016da:	2320      	movs	r3, #32
 80016dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f2:	2307      	movs	r3, #7
 80016f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016fc:	4619      	mov	r1, r3
 80016fe:	480a      	ldr	r0, [pc, #40]	; (8001728 <HAL_UART_MspInit+0x10c>)
 8001700:	f001 f93a 	bl	8002978 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2026      	movs	r0, #38	; 0x26
 800170a:	f001 f86c 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170e:	2026      	movs	r0, #38	; 0x26
 8001710:	f001 f885 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001714:	bf00      	nop
 8001716:	37b8      	adds	r7, #184	; 0xb8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40004400 	.word	0x40004400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020c00 	.word	0x40020c00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001756:	f7ff fea5 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f004 f8db 	bl	8005914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff f937 	bl	80009d0 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001770:	08008674 	.word	0x08008674
  ldr r2, =_sbss
 8001774:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001778:	2000039c 	.word	0x2000039c

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>

0800177e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001782:	2003      	movs	r0, #3
 8001784:	f001 f824 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001788:	200f      	movs	r0, #15
 800178a:	f000 f805 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178e:	f7ff fd45 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 f83f 	bl	800283a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f001 f807 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	20000388 	.word	0x20000388

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000388 	.word	0x20000388

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008

08001880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0ed      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe fefe 	bl	80006a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b4:	f7ff ffb4 	bl	8001820 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ba:	e012      	b.n	80018e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018bc:	f7ff ffb0 	bl	8001820 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	d90b      	bls.n	80018e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2205      	movs	r2, #5
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0c5      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0e5      	beq.n	80018bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0202 	bic.w	r2, r2, #2
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001900:	f7ff ff8e 	bl	8001820 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001906:	e012      	b.n	800192e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001908:	f7ff ff8a 	bl	8001820 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d90b      	bls.n	800192e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e09f      	b.n	8001a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e5      	bne.n	8001908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e1b      	ldrb	r3, [r3, #24]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e007      	b.n	8001966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7e5b      	ldrb	r3, [r3, #25]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e9b      	ldrb	r3, [r3, #26]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0220 	bic.w	r2, r2, #32
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7edb      	ldrb	r3, [r3, #27]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0210 	bic.w	r2, r2, #16
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0210 	orr.w	r2, r2, #16
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7f1b      	ldrb	r3, [r3, #28]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	e007      	b.n	8001a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0208 	bic.w	r2, r2, #8
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7f5b      	ldrb	r3, [r3, #29]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0204 	orr.w	r2, r2, #4
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e007      	b.n	8001a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	ea42 0103 	orr.w	r1, r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a90:	7cfb      	ldrb	r3, [r7, #19]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d003      	beq.n	8001a9e <HAL_CAN_ConfigFilter+0x26>
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f040 80c7 	bne.w	8001c2c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a69      	ldr	r2, [pc, #420]	; (8001c48 <HAL_CAN_ConfigFilter+0x1d0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d001      	beq.n	8001aac <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_CAN_ConfigFilter+0x1d4>)
 8001aaa:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4a63      	ldr	r2, [pc, #396]	; (8001c4c <HAL_CAN_ConfigFilter+0x1d4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d111      	bne.n	8001ae8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2201      	movs	r2, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d123      	bne.n	8001b5a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3248      	adds	r2, #72	; 0x48
 8001b3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b50:	6979      	ldr	r1, [r7, #20]
 8001b52:	3348      	adds	r3, #72	; 0x48
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d122      	bne.n	8001ba8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3248      	adds	r2, #72	; 0x48
 8001b88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b9e:	6979      	ldr	r1, [r7, #20]
 8001ba0:	3348      	adds	r3, #72	; 0x48
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bee:	e007      	b.n	8001c00 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	431a      	orrs	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c1e:	f023 0201 	bic.w	r2, r3, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e006      	b.n	8001c3a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	371c      	adds	r7, #28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40003400 	.word	0x40003400
 8001c4c:	40006400 	.word	0x40006400

08001c50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d12e      	bne.n	8001cc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff fdd0 	bl	8001820 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c82:	e012      	b.n	8001caa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c84:	f7ff fdcc 	bl	8001820 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b0a      	cmp	r3, #10
 8001c90:	d90b      	bls.n	8001caa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2205      	movs	r2, #5
 8001ca2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e012      	b.n	8001cd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e5      	bne.n	8001c84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e006      	b.n	8001cd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d133      	bne.n	8001d54 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff fd90 	bl	8001820 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d02:	e012      	b.n	8001d2a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d04:	f7ff fd8c 	bl	8001820 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d90b      	bls.n	8001d2a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2205      	movs	r2, #5
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e01b      	b.n	8001d62 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0e5      	beq.n	8001d04 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0202 	bic.w	r2, r2, #2
 8001d46:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e006      	b.n	8001d62 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b089      	sub	sp, #36	; 0x24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d88:	7ffb      	ldrb	r3, [r7, #31]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d003      	beq.n	8001d96 <HAL_CAN_AddTxMessage+0x2c>
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f040 80ad 	bne.w	8001ef0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10a      	bne.n	8001db6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8095 	beq.w	8001ee0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	0e1b      	lsrs	r3, r3, #24
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ddc:	68f9      	ldr	r1, [r7, #12]
 8001dde:	6809      	ldr	r1, [r1, #0]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3318      	adds	r3, #24
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	440b      	add	r3, r1
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e00f      	b.n	8001e0e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001df8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3318      	adds	r3, #24
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	440b      	add	r3, r1
 8001e0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3304      	adds	r3, #4
 8001e20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	7d1b      	ldrb	r3, [r3, #20]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d111      	bne.n	8001e4e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3318      	adds	r3, #24
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3318      	adds	r3, #24
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3307      	adds	r3, #7
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	061a      	lsls	r2, r3, #24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3306      	adds	r3, #6
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3305      	adds	r3, #5
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	3204      	adds	r2, #4
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	4610      	mov	r0, r2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	6811      	ldr	r1, [r2, #0]
 8001e76:	ea43 0200 	orr.w	r2, r3, r0
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3303      	adds	r3, #3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	061a      	lsls	r2, r3, #24
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3302      	adds	r3, #2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	6811      	ldr	r1, [r2, #0]
 8001eac:	ea43 0200 	orr.w	r2, r3, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001eba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3318      	adds	r3, #24
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	6811      	ldr	r1, [r2, #0]
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3318      	adds	r3, #24
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e00e      	b.n	8001efe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e006      	b.n	8001efe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f1e:	7afb      	ldrb	r3, [r7, #11]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d002      	beq.n	8001f2a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d11d      	bne.n	8001f66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d003      	beq.n	8001f98 <HAL_CAN_GetRxMessage+0x24>
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	f040 80f3 	bne.w	800217e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10e      	bne.n	8001fbc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d116      	bne.n	8001fda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0e7      	b.n	800218c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d107      	bne.n	8001fda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0d8      	b.n	800218c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	331b      	adds	r3, #27
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0204 	and.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10c      	bne.n	8002012 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	331b      	adds	r3, #27
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4413      	add	r3, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0d5b      	lsrs	r3, r3, #21
 8002008:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e00b      	b.n	800202a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	331b      	adds	r3, #27
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	4413      	add	r3, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	331b      	adds	r3, #27
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0202 	and.w	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	331b      	adds	r3, #27
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 020f 	and.w	r2, r3, #15
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	331b      	adds	r3, #27
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b2da      	uxtb	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	331b      	adds	r3, #27
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0a1a      	lsrs	r2, r3, #8
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0c1a      	lsrs	r2, r3, #16
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3302      	adds	r3, #2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0e1a      	lsrs	r2, r3, #24
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	3303      	adds	r3, #3
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3304      	adds	r3, #4
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0a1a      	lsrs	r2, r3, #8
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3305      	adds	r3, #5
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	0c1a      	lsrs	r2, r3, #16
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	3306      	adds	r3, #6
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4413      	add	r3, r2
 8002142:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e1a      	lsrs	r2, r3, #24
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3307      	adds	r3, #7
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	e007      	b.n	800217a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0220 	orr.w	r2, r2, #32
 8002178:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e006      	b.n	800218c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d002      	beq.n	80021b6 <HAL_CAN_ActivateNotification+0x1e>
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d109      	bne.n	80021ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6959      	ldr	r1, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e006      	b.n	80021d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
  }
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d07c      	beq.n	8002324 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2201      	movs	r2, #1
 800223a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f983 	bl	8002552 <HAL_CAN_TxMailbox0CompleteCallback>
 800224c:	e016      	b.n	800227c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	e00c      	b.n	800227c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	e002      	b.n	800227c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f989 	bl	800258e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d024      	beq.n	80022d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f963 	bl	8002566 <HAL_CAN_TxMailbox1CompleteCallback>
 80022a0:	e016      	b.n	80022d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
 80022b4:	e00c      	b.n	80022d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e002      	b.n	80022d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f969 	bl	80025a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d024      	beq.n	8002324 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f943 	bl	800257a <HAL_CAN_TxMailbox2CompleteCallback>
 80022f4:	e016      	b.n	8002324 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	e00c      	b.n	8002324 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
 800231c:	e002      	b.n	8002324 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f949 	bl	80025b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2210      	movs	r2, #16
 8002346:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2208      	movs	r2, #8
 8002362:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f930 	bl	80025ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fafe 	bl	8000984 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00c      	beq.n	80023ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2210      	movs	r2, #16
 80023aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2208      	movs	r2, #8
 80023c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f912 	bl	80025f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8f9 	bl	80025de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f8fc 	bl	8002606 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2208      	movs	r2, #8
 8002428:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8f5 	bl	800261a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d07b      	beq.n	8002532 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d072      	beq.n	800252a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d043      	beq.n	800252a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03e      	beq.n	800252a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024b2:	2b60      	cmp	r3, #96	; 0x60
 80024b4:	d02b      	beq.n	800250e <HAL_CAN_IRQHandler+0x32a>
 80024b6:	2b60      	cmp	r3, #96	; 0x60
 80024b8:	d82e      	bhi.n	8002518 <HAL_CAN_IRQHandler+0x334>
 80024ba:	2b50      	cmp	r3, #80	; 0x50
 80024bc:	d022      	beq.n	8002504 <HAL_CAN_IRQHandler+0x320>
 80024be:	2b50      	cmp	r3, #80	; 0x50
 80024c0:	d82a      	bhi.n	8002518 <HAL_CAN_IRQHandler+0x334>
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	d019      	beq.n	80024fa <HAL_CAN_IRQHandler+0x316>
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d826      	bhi.n	8002518 <HAL_CAN_IRQHandler+0x334>
 80024ca:	2b30      	cmp	r3, #48	; 0x30
 80024cc:	d010      	beq.n	80024f0 <HAL_CAN_IRQHandler+0x30c>
 80024ce:	2b30      	cmp	r3, #48	; 0x30
 80024d0:	d822      	bhi.n	8002518 <HAL_CAN_IRQHandler+0x334>
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d002      	beq.n	80024dc <HAL_CAN_IRQHandler+0x2f8>
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d005      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024da:	e01d      	b.n	8002518 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e4:	e019      	b.n	800251a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	f043 0310 	orr.w	r3, r3, #16
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024ee:	e014      	b.n	800251a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024f8:	e00f      	b.n	800251a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002502:	e00a      	b.n	800251a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800250c:	e005      	b.n	800251a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002516:	e000      	b.n	800251a <HAL_CAN_IRQHandler+0x336>
            break;
 8002518:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002528:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2204      	movs	r2, #4
 8002530:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fe fa2f 	bl	80009a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <__NVIC_SetPriorityGrouping+0x40>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x40>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	05fa0000 	.word	0x05fa0000

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff3e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff31 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa2 	bl	800278c <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7fe ffde 	bl	8001820 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d008      	beq.n	8002884 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e052      	b.n	800292a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0216 	bic.w	r2, r2, #22
 8002892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <HAL_DMA_Abort+0x62>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0208 	bic.w	r2, r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d4:	e013      	b.n	80028fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d6:	f7fe ffa3 	bl	8001820 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d90c      	bls.n	80028fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e015      	b.n	800292a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e4      	bne.n	80028d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	223f      	movs	r2, #63	; 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d004      	beq.n	8002950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00c      	b.n	800296a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2205      	movs	r2, #5
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e175      	b.n	8002c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8164 	bne.w	8002c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x56>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80be 	beq.w	8002c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <HAL_GPIO_Init+0x324>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a65      	ldr	r2, [pc, #404]	; (8002c9c <HAL_GPIO_Init+0x324>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b63      	ldr	r3, [pc, #396]	; (8002c9c <HAL_GPIO_Init+0x324>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b1a:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <HAL_GPIO_Init+0x328>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_GPIO_Init+0x32c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d037      	beq.n	8002bb6 <HAL_GPIO_Init+0x23e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a57      	ldr	r2, [pc, #348]	; (8002ca8 <HAL_GPIO_Init+0x330>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_GPIO_Init+0x23a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_GPIO_Init+0x334>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_GPIO_Init+0x236>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_GPIO_Init+0x338>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d025      	beq.n	8002baa <HAL_GPIO_Init+0x232>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a54      	ldr	r2, [pc, #336]	; (8002cb4 <HAL_GPIO_Init+0x33c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x22e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <HAL_GPIO_Init+0x340>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x22a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_GPIO_Init+0x344>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x226>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <HAL_GPIO_Init+0x348>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x222>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_GPIO_Init+0x34c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x21e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4f      	ldr	r2, [pc, #316]	; (8002cc8 <HAL_GPIO_Init+0x350>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x21a>
 8002b8e:	2309      	movs	r3, #9
 8002b90:	e012      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b92:	230a      	movs	r3, #10
 8002b94:	e010      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e00e      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x328>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f ae86 	bls.w	8002998 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	40021c00 	.word	0x40021c00
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40022400 	.word	0x40022400
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ff1c 	bl	8000b60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e29b      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 8087 	beq.w	8002e66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d58:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d00c      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d64:	4b93      	ldr	r3, [pc, #588]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d112      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62>
 8002d70:	4b90      	ldr	r3, [pc, #576]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d7c:	d10b      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7e:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d06c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x130>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d168      	bne.n	8002e64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e275      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x7a>
 8002da0:	4b84      	ldr	r3, [pc, #528]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a83      	ldr	r2, [pc, #524]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e02e      	b.n	8002e0c <HAL_RCC_OscConfig+0xd8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x9c>
 8002db6:	4b7f      	ldr	r3, [pc, #508]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7e      	ldr	r2, [pc, #504]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7b      	ldr	r2, [pc, #492]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xd8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0xc0>
 8002dda:	4b76      	ldr	r3, [pc, #472]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a75      	ldr	r2, [pc, #468]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a72      	ldr	r2, [pc, #456]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xd8>
 8002df4:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a6e      	ldr	r2, [pc, #440]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6b      	ldr	r2, [pc, #428]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fd04 	bl	8001820 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fd00 	bl	8001820 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e229      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe8>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fcf0 	bl	8001820 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fcec 	bl	8001820 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e215      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x110>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d069      	beq.n	8002f46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x190>
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x17a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1e9      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	493d      	ldr	r1, [pc, #244]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e040      	b.n	8002f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a38      	ldr	r2, [pc, #224]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fca2 	bl	8001820 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fc9e 	bl	8001820 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1c7      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4929      	ldr	r1, [pc, #164]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
 8002f12:	e018      	b.n	8002f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fc7e 	bl	8001820 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fc7a 	bl	8001820 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1a3      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d038      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe fc5b 	bl	8001820 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fc57 	bl	8001820 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e180      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x23a>
 8002f8c:	e01a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <HAL_RCC_OscConfig+0x280>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fc41 	bl	8001820 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fc3d 	bl	8001820 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d903      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e166      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
 8002fb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b92      	ldr	r3, [pc, #584]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80a4 	beq.w	800311a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a88      	ldr	r2, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b86      	ldr	r3, [pc, #536]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffa:	4b83      	ldr	r3, [pc, #524]	; (8003208 <HAL_RCC_OscConfig+0x4d4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d118      	bne.n	8003038 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003006:	4b80      	ldr	r3, [pc, #512]	; (8003208 <HAL_RCC_OscConfig+0x4d4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7f      	ldr	r2, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x4d4>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003012:	f7fe fc05 	bl	8001820 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301a:	f7fe fc01 	bl	8001820 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	; 0x64
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e12a      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302c:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x4d4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x31a>
 8003040:	4b70      	ldr	r3, [pc, #448]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	4a6f      	ldr	r2, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	; 0x70
 800304c:	e02d      	b.n	80030aa <HAL_RCC_OscConfig+0x376>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x33c>
 8003056:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	; 0x70
 8003062:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a67      	ldr	r2, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003068:	f023 0304 	bic.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	e01c      	b.n	80030aa <HAL_RCC_OscConfig+0x376>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b05      	cmp	r3, #5
 8003076:	d10c      	bne.n	8003092 <HAL_RCC_OscConfig+0x35e>
 8003078:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a61      	ldr	r2, [pc, #388]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
 8003090:	e00b      	b.n	80030aa <HAL_RCC_OscConfig+0x376>
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d015      	beq.n	80030de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b2:	f7fe fbb5 	bl	8001820 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	e00a      	b.n	80030d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe fbb1 	bl	8001820 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0d8      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	4b4c      	ldr	r3, [pc, #304]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ee      	beq.n	80030ba <HAL_RCC_OscConfig+0x386>
 80030dc:	e014      	b.n	8003108 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fb9f 	bl	8001820 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe fb9b 	bl	8001820 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0c2      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ee      	bne.n	80030e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80ae 	beq.w	8003280 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003124:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d06d      	beq.n	800320c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d14b      	bne.n	80031d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a31      	ldr	r2, [pc, #196]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fb6c 	bl	8001820 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fb68 	bl	8001820 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e091      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	019b      	lsls	r3, r3, #6
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	3b01      	subs	r3, #1
 8003184:	041b      	lsls	r3, r3, #16
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	071b      	lsls	r3, r3, #28
 8003196:	491b      	ldr	r1, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fb3a 	bl	8001820 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fb36 	bl	8001820 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e05f      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x47c>
 80031ce:	e057      	b.n	8003280 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fb20 	bl	8001820 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fb1c 	bl	8001820 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e045      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4b0>
 8003202:	e03d      	b.n	8003280 <HAL_RCC_OscConfig+0x54c>
 8003204:	40023800 	.word	0x40023800
 8003208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <HAL_RCC_OscConfig+0x558>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d030      	beq.n	800327c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d129      	bne.n	800327c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d122      	bne.n	800327c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003242:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003244:	4293      	cmp	r3, r2
 8003246:	d119      	bne.n	800327c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	3b01      	subs	r3, #1
 8003256:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d10f      	bne.n	800327c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0d0      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b6a      	ldr	r3, [pc, #424]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d910      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b67      	ldr	r3, [pc, #412]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 020f 	bic.w	r2, r3, #15
 80032be:	4965      	ldr	r1, [pc, #404]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b63      	ldr	r3, [pc, #396]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b8      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a58      	ldr	r2, [pc, #352]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 80032f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a52      	ldr	r2, [pc, #328]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003312:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	494d      	ldr	r1, [pc, #308]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d040      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d115      	bne.n	8003372 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e073      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e06b      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 0203 	bic.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4936      	ldr	r1, [pc, #216]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003384:	f7fe fa4c 	bl	8001820 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe fa48 	bl	8001820 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e053      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 020c 	and.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1eb      	bne.n	800338c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d210      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 020f 	bic.w	r2, r3, #15
 80033ca:	4922      	ldr	r1, [pc, #136]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e032      	b.n	800344a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4916      	ldr	r1, [pc, #88]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490e      	ldr	r1, [pc, #56]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003422:	f000 f821 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8003426:	4602      	mov	r2, r0
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	490a      	ldr	r1, [pc, #40]	; (800345c <HAL_RCC_ClockConfig+0x1cc>)
 8003434:	5ccb      	ldrb	r3, [r1, r3]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a09      	ldr	r2, [pc, #36]	; (8003460 <HAL_RCC_ClockConfig+0x1d0>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1d4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe f9a8 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00
 8003458:	40023800 	.word	0x40023800
 800345c:	08008274 	.word	0x08008274
 8003460:	20000000 	.word	0x20000000
 8003464:	20000004 	.word	0x20000004

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b094      	sub	sp, #80	; 0x50
 800346e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
 8003474:	2300      	movs	r3, #0
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	2300      	movs	r3, #0
 800347a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d00d      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x40>
 800348c:	2b08      	cmp	r3, #8
 800348e:	f200 80e1 	bhi.w	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800349a:	e0db      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b73      	ldr	r3, [pc, #460]	; (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a0:	e0db      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a6:	e0d8      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034b2:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
 80034d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4621      	mov	r1, r4
 80034f4:	1a51      	subs	r1, r2, r1
 80034f6:	6139      	str	r1, [r7, #16]
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb63 0301 	sbc.w	r3, r3, r1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800350c:	4659      	mov	r1, fp
 800350e:	018b      	lsls	r3, r1, #6
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003516:	4651      	mov	r1, sl
 8003518:	018a      	lsls	r2, r1, #6
 800351a:	4651      	mov	r1, sl
 800351c:	ebb2 0801 	subs.w	r8, r2, r1
 8003520:	4659      	mov	r1, fp
 8003522:	eb63 0901 	sbc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	4623      	mov	r3, r4
 8003540:	eb18 0303 	adds.w	r3, r8, r3
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	462b      	mov	r3, r5
 8003548:	eb49 0303 	adc.w	r3, r9, r3
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355a:	4629      	mov	r1, r5
 800355c:	028b      	lsls	r3, r1, #10
 800355e:	4621      	mov	r1, r4
 8003560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003564:	4621      	mov	r1, r4
 8003566:	028a      	lsls	r2, r1, #10
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 8003572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003578:	f7fc feba 	bl	80002f0 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	e058      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	2200      	movs	r2, #0
 800358e:	4618      	mov	r0, r3
 8003590:	4611      	mov	r1, r2
 8003592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	0159      	lsls	r1, r3, #5
 80035ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b2:	0150      	lsls	r0, r2, #5
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4641      	mov	r1, r8
 80035ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d8:	ebb2 040a 	subs.w	r4, r2, sl
 80035dc:	eb63 050b 	sbc.w	r5, r3, fp
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	00eb      	lsls	r3, r5, #3
 80035ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ee:	00e2      	lsls	r2, r4, #3
 80035f0:	4614      	mov	r4, r2
 80035f2:	461d      	mov	r5, r3
 80035f4:	4643      	mov	r3, r8
 80035f6:	18e3      	adds	r3, r4, r3
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	464b      	mov	r3, r9
 80035fc:	eb45 0303 	adc.w	r3, r5, r3
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360e:	4629      	mov	r1, r5
 8003610:	028b      	lsls	r3, r1, #10
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003618:	4621      	mov	r1, r4
 800361a:	028a      	lsls	r2, r1, #10
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	2200      	movs	r2, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	61fa      	str	r2, [r7, #28]
 8003628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362c:	f7fc fe60 	bl	80002f0 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800364a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800365c:	4618      	mov	r0, r3
 800365e:	3750      	adds	r7, #80	; 0x50
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400

08003670 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff0 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08008284 	.word	0x08008284

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffdc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08008284 	.word	0x08008284

080036d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003700:	4b69      	ldr	r3, [pc, #420]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	4964      	ldr	r1, [pc, #400]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003732:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	4959      	ldr	r1, [pc, #356]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d017      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800376e:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	494a      	ldr	r1, [pc, #296]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378c:	d101      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800378e:	2301      	movs	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 808b 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	4a39      	ldr	r2, [pc, #228]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6413      	str	r3, [r2, #64]	; 0x40
 80037c8:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a34      	ldr	r2, [pc, #208]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fe f81e 	bl	8001820 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e8:	f7fe f81a 	bl	8001820 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e38f      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037fa:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d035      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d02e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d114      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd ffe2 	bl	8001820 <HAL_GetTick>
 800385c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fd ffde 	bl	8001820 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e351      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388e:	d111      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800389e:	400b      	ands	r3, r1
 80038a0:	4901      	ldr	r1, [pc, #4]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000
 80038b0:	0ffffcff 	.word	0x0ffffcff
 80038b4:	4bac      	ldr	r3, [pc, #688]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4aab      	ldr	r2, [pc, #684]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	4ba9      	ldr	r3, [pc, #676]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	49a6      	ldr	r1, [pc, #664]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038de:	4ba2      	ldr	r3, [pc, #648]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e4:	4aa0      	ldr	r2, [pc, #640]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038ee:	4b9e      	ldr	r3, [pc, #632]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	499b      	ldr	r1, [pc, #620]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390c:	4b96      	ldr	r3, [pc, #600]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391a:	4993      	ldr	r1, [pc, #588]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800392e:	4b8e      	ldr	r3, [pc, #568]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393c:	498a      	ldr	r1, [pc, #552]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003950:	4b85      	ldr	r3, [pc, #532]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395e:	4982      	ldr	r1, [pc, #520]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003972:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4979      	ldr	r1, [pc, #484]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003994:	4b74      	ldr	r3, [pc, #464]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4971      	ldr	r1, [pc, #452]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b6:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f023 020c 	bic.w	r2, r3, #12
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c4:	4968      	ldr	r1, [pc, #416]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d8:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	4960      	ldr	r1, [pc, #384]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	4957      	ldr	r1, [pc, #348]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a1c:	4b52      	ldr	r3, [pc, #328]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	494f      	ldr	r1, [pc, #316]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	4946      	ldr	r1, [pc, #280]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	493e      	ldr	r1, [pc, #248]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a90:	4935      	ldr	r1, [pc, #212]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aa4:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	492d      	ldr	r1, [pc, #180]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d011      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ac6:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad4:	4924      	ldr	r1, [pc, #144]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae4:	d101      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	4914      	ldr	r1, [pc, #80]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b38:	490b      	ldr	r1, [pc, #44]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00f      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5c:	4902      	ldr	r1, [pc, #8]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b78:	4b8a      	ldr	r3, [pc, #552]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	4986      	ldr	r1, [pc, #536]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b9c:	4b81      	ldr	r3, [pc, #516]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	497d      	ldr	r1, [pc, #500]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d006      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80d6 	beq.w	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bc8:	4b76      	ldr	r3, [pc, #472]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a75      	ldr	r2, [pc, #468]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fe24 	bl	8001820 <HAL_GetTick>
 8003bd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bdc:	f7fd fe20 	bl	8001820 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e195      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bee:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d021      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d11d      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c1c:	4b61      	ldr	r3, [pc, #388]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	0e1b      	lsrs	r3, r3, #24
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	019a      	lsls	r2, r3, #6
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	071b      	lsls	r3, r3, #28
 8003c42:	4958      	ldr	r1, [pc, #352]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02e      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c74:	d129      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c76:	4b4b      	ldr	r3, [pc, #300]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c84:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8a:	0f1b      	lsrs	r3, r3, #28
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	019a      	lsls	r2, r3, #6
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	071b      	lsls	r3, r3, #28
 8003caa:	493e      	ldr	r1, [pc, #248]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cb2:	4b3c      	ldr	r3, [pc, #240]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb8:	f023 021f 	bic.w	r2, r3, #31
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	4938      	ldr	r1, [pc, #224]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01d      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cd6:	4b33      	ldr	r3, [pc, #204]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ce4:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cea:	0f1b      	lsrs	r3, r3, #28
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	019a      	lsls	r2, r3, #6
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	4926      	ldr	r1, [pc, #152]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d011      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	019a      	lsls	r2, r3, #6
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	071b      	lsls	r3, r3, #28
 8003d3a:	491a      	ldr	r1, [pc, #104]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d42:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4e:	f7fd fd67 	bl	8001820 <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d56:	f7fd fd63 	bl	8001820 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	; 0x64
 8003d62:	d901      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0d8      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f040 80ce 	bne.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fd fd4a 	bl	8001820 <HAL_GetTick>
 8003d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d90:	f7fd fd46 	bl	8001820 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d904      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0bb      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da8:	4b5e      	ldr	r3, [pc, #376]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db4:	d0ec      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02e      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dde:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	0f1b      	lsrs	r3, r3, #28
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	019a      	lsls	r2, r3, #6
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	071b      	lsls	r3, r3, #28
 8003e12:	4944      	ldr	r1, [pc, #272]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e1a:	4b42      	ldr	r3, [pc, #264]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	493d      	ldr	r1, [pc, #244]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d022      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e48:	d11d      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e58:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	0f1b      	lsrs	r3, r3, #28
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	019a      	lsls	r2, r3, #6
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	431a      	orrs	r2, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	071b      	lsls	r3, r3, #28
 8003e7e:	4929      	ldr	r1, [pc, #164]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e92:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	0e1b      	lsrs	r3, r3, #24
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ea0:	4b20      	ldr	r3, [pc, #128]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	019a      	lsls	r2, r3, #6
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	071b      	lsls	r3, r3, #28
 8003ec6:	4917      	ldr	r1, [pc, #92]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4911      	ldr	r1, [pc, #68]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fd fc96 	bl	8001820 <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ef8:	f7fd fc92 	bl	8001820 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e007      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f16:	d1ef      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e049      	b.n	8003fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd fb0e 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 fa46 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d122      	bne.n	8004032 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d11b      	bne.n	8004032 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0202 	mvn.w	r2, #2
 8004002:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f9cf 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 800401e:	e005      	b.n	800402c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f9c1 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f9d2 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d122      	bne.n	8004086 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d11b      	bne.n	8004086 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0204 	mvn.w	r2, #4
 8004056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9a5 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 8004072:	e005      	b.n	8004080 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f997 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9a8 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d122      	bne.n	80040da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11b      	bne.n	80040da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0208 	mvn.w	r2, #8
 80040aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2204      	movs	r2, #4
 80040b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f97b 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 80040c6:	e005      	b.n	80040d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f96d 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f97e 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d122      	bne.n	800412e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d11b      	bne.n	800412e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f06f 0210 	mvn.w	r2, #16
 80040fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2208      	movs	r2, #8
 8004104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f951 	bl	80043bc <HAL_TIM_IC_CaptureCallback>
 800411a:	e005      	b.n	8004128 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f943 	bl	80043a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f954 	bl	80043d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10e      	bne.n	800415a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f06f 0201 	mvn.w	r2, #1
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fc fc31 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b80      	cmp	r3, #128	; 0x80
 8004166:	d10e      	bne.n	8004186 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d107      	bne.n	8004186 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800417e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fb0b 	bl	800479c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	2b80      	cmp	r3, #128	; 0x80
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fafe 	bl	80047b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f902 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0220 	mvn.w	r2, #32
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fabe 	bl	8004788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x1c>
 800422c:	2302      	movs	r3, #2
 800422e:	e0b4      	b.n	800439a <HAL_TIM_ConfigClockSource+0x186>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <HAL_TIM_ConfigClockSource+0x190>)
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004268:	d03e      	beq.n	80042e8 <HAL_TIM_ConfigClockSource+0xd4>
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	f200 8087 	bhi.w	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	f000 8086 	beq.w	8004386 <HAL_TIM_ConfigClockSource+0x172>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d87f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b70      	cmp	r3, #112	; 0x70
 8004282:	d01a      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0xa6>
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d87b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b60      	cmp	r3, #96	; 0x60
 800428a:	d050      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x11a>
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d877      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b50      	cmp	r3, #80	; 0x50
 8004292:	d03c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xfa>
 8004294:	2b50      	cmp	r3, #80	; 0x50
 8004296:	d873      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d058      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x13a>
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d86f      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b30      	cmp	r3, #48	; 0x30
 80042a2:	d064      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042a4:	2b30      	cmp	r3, #48	; 0x30
 80042a6:	d86b      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d060      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d867      	bhi.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05c      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d05a      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	e062      	b.n	8004380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6899      	ldr	r1, [r3, #8]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f000 f9af 	bl	800462c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	609a      	str	r2, [r3, #8]
      break;
 80042e6:	e04f      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	6899      	ldr	r1, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f000 f998 	bl	800462c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800430a:	609a      	str	r2, [r3, #8]
      break;
 800430c:	e03c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 f90c 	bl	8004538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2150      	movs	r1, #80	; 0x50
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f965 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 800432c:	e02c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 f92b 	bl	8004596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2160      	movs	r1, #96	; 0x60
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f955 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 800434c:	e01c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	461a      	mov	r2, r3
 800435c:	f000 f8ec 	bl	8004538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2140      	movs	r1, #64	; 0x40
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f945 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 800436c:	e00c      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 f93c 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 800437e:	e003      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e000      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	fffeff88 	.word	0xfffeff88

080043a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a40      	ldr	r2, [pc, #256]	; (800450c <TIM_Base_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3d      	ldr	r2, [pc, #244]	; (8004510 <TIM_Base_SetConfig+0x118>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3c      	ldr	r2, [pc, #240]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3b      	ldr	r2, [pc, #236]	; (8004518 <TIM_Base_SetConfig+0x120>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <TIM_Base_SetConfig+0x124>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2f      	ldr	r2, [pc, #188]	; (800450c <TIM_Base_SetConfig+0x114>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d027      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <TIM_Base_SetConfig+0x118>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d023      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2b      	ldr	r2, [pc, #172]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01f      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <TIM_Base_SetConfig+0x120>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <TIM_Base_SetConfig+0x124>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d017      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <TIM_Base_SetConfig+0x128>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <TIM_Base_SetConfig+0x12c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <TIM_Base_SetConfig+0x130>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a25      	ldr	r2, [pc, #148]	; (800452c <TIM_Base_SetConfig+0x134>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a24      	ldr	r2, [pc, #144]	; (8004530 <TIM_Base_SetConfig+0x138>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <TIM_Base_SetConfig+0x13c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0xf8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	615a      	str	r2, [r3, #20]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40010400 	.word	0x40010400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800
 800452c:	40001800 	.word	0x40001800
 8004530:	40001c00 	.word	0x40001c00
 8004534:	40002000 	.word	0x40002000

08004538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0210 	bic.w	r2, r3, #16
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	f043 0307 	orr.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	431a      	orrs	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004680:	2302      	movs	r3, #2
 8004682:	e06d      	b.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a30      	ldr	r2, [pc, #192]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2f      	ldr	r2, [pc, #188]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a20      	ldr	r2, [pc, #128]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d022      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d01d      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d018      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1a      	ldr	r2, [pc, #104]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a16      	ldr	r2, [pc, #88]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a15      	ldr	r2, [pc, #84]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10c      	bne.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40001800 	.word	0x40001800

08004788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e040      	b.n	8004858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc ff18 	bl	800161c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fbc2 	bl	8004f8c <UART_SetConfig>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e022      	b.n	8004858 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fe1a 	bl	8005454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fea1 	bl	8005598 <UART_CheckIdleState>
 8004856:	4603      	mov	r3, r0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004874:	2b20      	cmp	r3, #32
 8004876:	d171      	bne.n	800495c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Transmit+0x24>
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e06a      	b.n	800495e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2221      	movs	r2, #33	; 0x21
 8004894:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004896:	f7fc ffc3 	bl	8001820 <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b4:	d108      	bne.n	80048c8 <HAL_UART_Transmit+0x68>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e003      	b.n	80048d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048d0:	e02c      	b.n	800492c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	2180      	movs	r1, #128	; 0x80
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fea8 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e038      	b.n	800495e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	3302      	adds	r3, #2
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e007      	b.n	800491a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3301      	adds	r3, #1
 8004918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1cc      	bne.n	80048d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	2140      	movs	r1, #64	; 0x40
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fe75 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e005      	b.n	800495e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b0ba      	sub	sp, #232	; 0xe8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800498e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004992:	f640 030f 	movw	r3, #2063	; 0x80f
 8004996:	4013      	ands	r3, r2
 8004998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800499c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d115      	bne.n	80049d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00f      	beq.n	80049d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 82ac 	beq.w	8004f1e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
      }
      return;
 80049ce:	e2a6      	b.n	8004f1e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8117 	beq.w	8004c08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80049da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80049e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049ea:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <HAL_UART_IRQHandler+0x298>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 810a 	beq.w	8004c08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d011      	beq.n	8004a24 <HAL_UART_IRQHandler+0xbc>
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2201      	movs	r2, #1
 8004a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d011      	beq.n	8004a54 <HAL_UART_IRQHandler+0xec>
 8004a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2202      	movs	r2, #2
 8004a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4a:	f043 0204 	orr.w	r2, r3, #4
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d011      	beq.n	8004a84 <HAL_UART_IRQHandler+0x11c>
 8004a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2204      	movs	r2, #4
 8004a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7a:	f043 0202 	orr.w	r2, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d017      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2208      	movs	r2, #8
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab6:	f043 0208 	orr.w	r2, r3, #8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d012      	beq.n	8004af2 <HAL_UART_IRQHandler+0x18a>
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00c      	beq.n	8004af2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8212 	beq.w	8004f22 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04f      	beq.n	8004bea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fe37 	bl	80057be <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d141      	bne.n	8004be2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3308      	adds	r3, #8
 8004b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d013      	beq.n	8004bda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <HAL_UART_IRQHandler+0x29c>)
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd feb7 	bl	8002932 <HAL_DMA_Abort_IT>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d017      	beq.n	8004bfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00f      	b.n	8004bfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f9b6 	bl	8004f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e00b      	b.n	8004bfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f9b2 	bl	8004f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e007      	b.n	8004bfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9ae 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004bf8:	e193      	b.n	8004f22 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfa:	bf00      	nop
    return;
 8004bfc:	e191      	b.n	8004f22 <HAL_UART_IRQHandler+0x5ba>
 8004bfe:	bf00      	nop
 8004c00:	04000120 	.word	0x04000120
 8004c04:	08005887 	.word	0x08005887

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	f040 814c 	bne.w	8004eaa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0310 	and.w	r3, r3, #16
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8145 	beq.w	8004eaa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 813e 	beq.w	8004eaa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	f040 80b6 	bne.w	8004db2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8165 	beq.w	8004f26 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c66:	429a      	cmp	r2, r3
 8004c68:	f080 815d 	bcs.w	8004f26 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c80:	f000 8086 	beq.w	8004d90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1da      	bne.n	8004c84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e1      	bne.n	8004cce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e4      	bne.n	8004d50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fd61 	bl	8002852 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8d8 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004db0:	e0b9      	b.n	8004f26 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80ab 	beq.w	8004f2a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a6 	beq.w	8004f2a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e00:	647b      	str	r3, [r7, #68]	; 0x44
 8004e02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e4      	bne.n	8004dde <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3308      	adds	r3, #8
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
 8004e22:	623b      	str	r3, [r7, #32]
   return(result);
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3308      	adds	r3, #8
 8004e34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e38:	633a      	str	r2, [r7, #48]	; 0x30
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e3      	bne.n	8004e14 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f023 0310 	bic.w	r3, r3, #16
 8004e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e4      	bne.n	8004e60 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f85c 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea8:	e03f      	b.n	8004f2a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x56c>
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f853 	bl	8004f78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ed2:	e02d      	b.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00e      	beq.n	8004efe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01c      	beq.n	8004f2e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
    }
    return;
 8004efc:	e017      	b.n	8004f2e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
 8004f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fccb 	bl	80058b2 <UART_EndTransmit_IT>
    return;
 8004f1c:	e008      	b.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004f1e:	bf00      	nop
 8004f20:	e006      	b.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004f22:	bf00      	nop
 8004f24:	e004      	b.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004f26:	bf00      	nop
 8004f28:	e002      	b.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004f2e:	bf00      	nop
  }

}
 8004f30:	37e8      	adds	r7, #232	; 0xe8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4ba6      	ldr	r3, [pc, #664]	; (8005250 <UART_SetConfig+0x2c4>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a94      	ldr	r2, [pc, #592]	; (8005254 <UART_SetConfig+0x2c8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d120      	bne.n	800504a <UART_SetConfig+0xbe>
 8005008:	4b93      	ldr	r3, [pc, #588]	; (8005258 <UART_SetConfig+0x2cc>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d816      	bhi.n	8005044 <UART_SetConfig+0xb8>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0x90>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800502d 	.word	0x0800502d
 8005020:	08005039 	.word	0x08005039
 8005024:	08005033 	.word	0x08005033
 8005028:	0800503f 	.word	0x0800503f
 800502c:	2301      	movs	r3, #1
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e150      	b.n	80052d4 <UART_SetConfig+0x348>
 8005032:	2302      	movs	r3, #2
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e14d      	b.n	80052d4 <UART_SetConfig+0x348>
 8005038:	2304      	movs	r3, #4
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e14a      	b.n	80052d4 <UART_SetConfig+0x348>
 800503e:	2308      	movs	r3, #8
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e147      	b.n	80052d4 <UART_SetConfig+0x348>
 8005044:	2310      	movs	r3, #16
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e144      	b.n	80052d4 <UART_SetConfig+0x348>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a83      	ldr	r2, [pc, #524]	; (800525c <UART_SetConfig+0x2d0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d132      	bne.n	80050ba <UART_SetConfig+0x12e>
 8005054:	4b80      	ldr	r3, [pc, #512]	; (8005258 <UART_SetConfig+0x2cc>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d828      	bhi.n	80050b4 <UART_SetConfig+0x128>
 8005062:	a201      	add	r2, pc, #4	; (adr r2, 8005068 <UART_SetConfig+0xdc>)
 8005064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005068:	0800509d 	.word	0x0800509d
 800506c:	080050b5 	.word	0x080050b5
 8005070:	080050b5 	.word	0x080050b5
 8005074:	080050b5 	.word	0x080050b5
 8005078:	080050a9 	.word	0x080050a9
 800507c:	080050b5 	.word	0x080050b5
 8005080:	080050b5 	.word	0x080050b5
 8005084:	080050b5 	.word	0x080050b5
 8005088:	080050a3 	.word	0x080050a3
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050b5 	.word	0x080050b5
 8005098:	080050af 	.word	0x080050af
 800509c:	2300      	movs	r3, #0
 800509e:	77fb      	strb	r3, [r7, #31]
 80050a0:	e118      	b.n	80052d4 <UART_SetConfig+0x348>
 80050a2:	2302      	movs	r3, #2
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e115      	b.n	80052d4 <UART_SetConfig+0x348>
 80050a8:	2304      	movs	r3, #4
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e112      	b.n	80052d4 <UART_SetConfig+0x348>
 80050ae:	2308      	movs	r3, #8
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e10f      	b.n	80052d4 <UART_SetConfig+0x348>
 80050b4:	2310      	movs	r3, #16
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e10c      	b.n	80052d4 <UART_SetConfig+0x348>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a68      	ldr	r2, [pc, #416]	; (8005260 <UART_SetConfig+0x2d4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d120      	bne.n	8005106 <UART_SetConfig+0x17a>
 80050c4:	4b64      	ldr	r3, [pc, #400]	; (8005258 <UART_SetConfig+0x2cc>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050ce:	2b30      	cmp	r3, #48	; 0x30
 80050d0:	d013      	beq.n	80050fa <UART_SetConfig+0x16e>
 80050d2:	2b30      	cmp	r3, #48	; 0x30
 80050d4:	d814      	bhi.n	8005100 <UART_SetConfig+0x174>
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d009      	beq.n	80050ee <UART_SetConfig+0x162>
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d810      	bhi.n	8005100 <UART_SetConfig+0x174>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <UART_SetConfig+0x15c>
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d006      	beq.n	80050f4 <UART_SetConfig+0x168>
 80050e6:	e00b      	b.n	8005100 <UART_SetConfig+0x174>
 80050e8:	2300      	movs	r3, #0
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e0f2      	b.n	80052d4 <UART_SetConfig+0x348>
 80050ee:	2302      	movs	r3, #2
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e0ef      	b.n	80052d4 <UART_SetConfig+0x348>
 80050f4:	2304      	movs	r3, #4
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e0ec      	b.n	80052d4 <UART_SetConfig+0x348>
 80050fa:	2308      	movs	r3, #8
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e0e9      	b.n	80052d4 <UART_SetConfig+0x348>
 8005100:	2310      	movs	r3, #16
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e0e6      	b.n	80052d4 <UART_SetConfig+0x348>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a56      	ldr	r2, [pc, #344]	; (8005264 <UART_SetConfig+0x2d8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d120      	bne.n	8005152 <UART_SetConfig+0x1c6>
 8005110:	4b51      	ldr	r3, [pc, #324]	; (8005258 <UART_SetConfig+0x2cc>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800511a:	2bc0      	cmp	r3, #192	; 0xc0
 800511c:	d013      	beq.n	8005146 <UART_SetConfig+0x1ba>
 800511e:	2bc0      	cmp	r3, #192	; 0xc0
 8005120:	d814      	bhi.n	800514c <UART_SetConfig+0x1c0>
 8005122:	2b80      	cmp	r3, #128	; 0x80
 8005124:	d009      	beq.n	800513a <UART_SetConfig+0x1ae>
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d810      	bhi.n	800514c <UART_SetConfig+0x1c0>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <UART_SetConfig+0x1a8>
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d006      	beq.n	8005140 <UART_SetConfig+0x1b4>
 8005132:	e00b      	b.n	800514c <UART_SetConfig+0x1c0>
 8005134:	2300      	movs	r3, #0
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e0cc      	b.n	80052d4 <UART_SetConfig+0x348>
 800513a:	2302      	movs	r3, #2
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e0c9      	b.n	80052d4 <UART_SetConfig+0x348>
 8005140:	2304      	movs	r3, #4
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e0c6      	b.n	80052d4 <UART_SetConfig+0x348>
 8005146:	2308      	movs	r3, #8
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e0c3      	b.n	80052d4 <UART_SetConfig+0x348>
 800514c:	2310      	movs	r3, #16
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e0c0      	b.n	80052d4 <UART_SetConfig+0x348>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a44      	ldr	r2, [pc, #272]	; (8005268 <UART_SetConfig+0x2dc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d125      	bne.n	80051a8 <UART_SetConfig+0x21c>
 800515c:	4b3e      	ldr	r3, [pc, #248]	; (8005258 <UART_SetConfig+0x2cc>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800516a:	d017      	beq.n	800519c <UART_SetConfig+0x210>
 800516c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005170:	d817      	bhi.n	80051a2 <UART_SetConfig+0x216>
 8005172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005176:	d00b      	beq.n	8005190 <UART_SetConfig+0x204>
 8005178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517c:	d811      	bhi.n	80051a2 <UART_SetConfig+0x216>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <UART_SetConfig+0x1fe>
 8005182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005186:	d006      	beq.n	8005196 <UART_SetConfig+0x20a>
 8005188:	e00b      	b.n	80051a2 <UART_SetConfig+0x216>
 800518a:	2300      	movs	r3, #0
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e0a1      	b.n	80052d4 <UART_SetConfig+0x348>
 8005190:	2302      	movs	r3, #2
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e09e      	b.n	80052d4 <UART_SetConfig+0x348>
 8005196:	2304      	movs	r3, #4
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e09b      	b.n	80052d4 <UART_SetConfig+0x348>
 800519c:	2308      	movs	r3, #8
 800519e:	77fb      	strb	r3, [r7, #31]
 80051a0:	e098      	b.n	80052d4 <UART_SetConfig+0x348>
 80051a2:	2310      	movs	r3, #16
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e095      	b.n	80052d4 <UART_SetConfig+0x348>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2f      	ldr	r2, [pc, #188]	; (800526c <UART_SetConfig+0x2e0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d125      	bne.n	80051fe <UART_SetConfig+0x272>
 80051b2:	4b29      	ldr	r3, [pc, #164]	; (8005258 <UART_SetConfig+0x2cc>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c0:	d017      	beq.n	80051f2 <UART_SetConfig+0x266>
 80051c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051c6:	d817      	bhi.n	80051f8 <UART_SetConfig+0x26c>
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051cc:	d00b      	beq.n	80051e6 <UART_SetConfig+0x25a>
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d811      	bhi.n	80051f8 <UART_SetConfig+0x26c>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <UART_SetConfig+0x254>
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051dc:	d006      	beq.n	80051ec <UART_SetConfig+0x260>
 80051de:	e00b      	b.n	80051f8 <UART_SetConfig+0x26c>
 80051e0:	2301      	movs	r3, #1
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e076      	b.n	80052d4 <UART_SetConfig+0x348>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e073      	b.n	80052d4 <UART_SetConfig+0x348>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e070      	b.n	80052d4 <UART_SetConfig+0x348>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e06d      	b.n	80052d4 <UART_SetConfig+0x348>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	e06a      	b.n	80052d4 <UART_SetConfig+0x348>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <UART_SetConfig+0x2e4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d138      	bne.n	800527a <UART_SetConfig+0x2ee>
 8005208:	4b13      	ldr	r3, [pc, #76]	; (8005258 <UART_SetConfig+0x2cc>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005212:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005216:	d017      	beq.n	8005248 <UART_SetConfig+0x2bc>
 8005218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800521c:	d82a      	bhi.n	8005274 <UART_SetConfig+0x2e8>
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	d00b      	beq.n	800523c <UART_SetConfig+0x2b0>
 8005224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005228:	d824      	bhi.n	8005274 <UART_SetConfig+0x2e8>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <UART_SetConfig+0x2aa>
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d006      	beq.n	8005242 <UART_SetConfig+0x2b6>
 8005234:	e01e      	b.n	8005274 <UART_SetConfig+0x2e8>
 8005236:	2300      	movs	r3, #0
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e04b      	b.n	80052d4 <UART_SetConfig+0x348>
 800523c:	2302      	movs	r3, #2
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e048      	b.n	80052d4 <UART_SetConfig+0x348>
 8005242:	2304      	movs	r3, #4
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e045      	b.n	80052d4 <UART_SetConfig+0x348>
 8005248:	2308      	movs	r3, #8
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e042      	b.n	80052d4 <UART_SetConfig+0x348>
 800524e:	bf00      	nop
 8005250:	efff69f3 	.word	0xefff69f3
 8005254:	40011000 	.word	0x40011000
 8005258:	40023800 	.word	0x40023800
 800525c:	40004400 	.word	0x40004400
 8005260:	40004800 	.word	0x40004800
 8005264:	40004c00 	.word	0x40004c00
 8005268:	40005000 	.word	0x40005000
 800526c:	40011400 	.word	0x40011400
 8005270:	40007800 	.word	0x40007800
 8005274:	2310      	movs	r3, #16
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e02c      	b.n	80052d4 <UART_SetConfig+0x348>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a72      	ldr	r2, [pc, #456]	; (8005448 <UART_SetConfig+0x4bc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d125      	bne.n	80052d0 <UART_SetConfig+0x344>
 8005284:	4b71      	ldr	r3, [pc, #452]	; (800544c <UART_SetConfig+0x4c0>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800528e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005292:	d017      	beq.n	80052c4 <UART_SetConfig+0x338>
 8005294:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005298:	d817      	bhi.n	80052ca <UART_SetConfig+0x33e>
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	d00b      	beq.n	80052b8 <UART_SetConfig+0x32c>
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d811      	bhi.n	80052ca <UART_SetConfig+0x33e>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <UART_SetConfig+0x326>
 80052aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ae:	d006      	beq.n	80052be <UART_SetConfig+0x332>
 80052b0:	e00b      	b.n	80052ca <UART_SetConfig+0x33e>
 80052b2:	2300      	movs	r3, #0
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e00d      	b.n	80052d4 <UART_SetConfig+0x348>
 80052b8:	2302      	movs	r3, #2
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e00a      	b.n	80052d4 <UART_SetConfig+0x348>
 80052be:	2304      	movs	r3, #4
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e007      	b.n	80052d4 <UART_SetConfig+0x348>
 80052c4:	2308      	movs	r3, #8
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x348>
 80052ca:	2310      	movs	r3, #16
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e001      	b.n	80052d4 <UART_SetConfig+0x348>
 80052d0:	2310      	movs	r3, #16
 80052d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	d15b      	bne.n	8005396 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d828      	bhi.n	8005336 <UART_SetConfig+0x3aa>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0x360>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005321 	.word	0x08005321
 80052f8:	08005337 	.word	0x08005337
 80052fc:	08005327 	.word	0x08005327
 8005300:	08005337 	.word	0x08005337
 8005304:	08005337 	.word	0x08005337
 8005308:	08005337 	.word	0x08005337
 800530c:	0800532f 	.word	0x0800532f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7fe f9ba 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8005314:	61b8      	str	r0, [r7, #24]
        break;
 8005316:	e013      	b.n	8005340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005318:	f7fe f9ca 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 800531c:	61b8      	str	r0, [r7, #24]
        break;
 800531e:	e00f      	b.n	8005340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005320:	4b4b      	ldr	r3, [pc, #300]	; (8005450 <UART_SetConfig+0x4c4>)
 8005322:	61bb      	str	r3, [r7, #24]
        break;
 8005324:	e00c      	b.n	8005340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005326:	f7fe f89f 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 800532a:	61b8      	str	r0, [r7, #24]
        break;
 800532c:	e008      	b.n	8005340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005332:	61bb      	str	r3, [r7, #24]
        break;
 8005334:	e004      	b.n	8005340 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	77bb      	strb	r3, [r7, #30]
        break;
 800533e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d074      	beq.n	8005430 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	005a      	lsls	r2, r3, #1
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	441a      	add	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	fbb2 f3f3 	udiv	r3, r2, r3
 800535a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b0f      	cmp	r3, #15
 8005360:	d916      	bls.n	8005390 <UART_SetConfig+0x404>
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d212      	bcs.n	8005390 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f023 030f 	bic.w	r3, r3, #15
 8005372:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	b29b      	uxth	r3, r3
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	b29a      	uxth	r2, r3
 8005380:	89fb      	ldrh	r3, [r7, #14]
 8005382:	4313      	orrs	r3, r2
 8005384:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	89fa      	ldrh	r2, [r7, #14]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	e04f      	b.n	8005430 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77bb      	strb	r3, [r7, #30]
 8005394:	e04c      	b.n	8005430 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005396:	7ffb      	ldrb	r3, [r7, #31]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d828      	bhi.n	80053ee <UART_SetConfig+0x462>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x418>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	080053df 	.word	0x080053df
 80053b8:	080053ef 	.word	0x080053ef
 80053bc:	080053ef 	.word	0x080053ef
 80053c0:	080053ef 	.word	0x080053ef
 80053c4:	080053e7 	.word	0x080053e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe f95e 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 80053cc:	61b8      	str	r0, [r7, #24]
        break;
 80053ce:	e013      	b.n	80053f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fe f96e 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80053d4:	61b8      	str	r0, [r7, #24]
        break;
 80053d6:	e00f      	b.n	80053f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <UART_SetConfig+0x4c4>)
 80053da:	61bb      	str	r3, [r7, #24]
        break;
 80053dc:	e00c      	b.n	80053f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053de:	f7fe f843 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 80053e2:	61b8      	str	r0, [r7, #24]
        break;
 80053e4:	e008      	b.n	80053f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	61bb      	str	r3, [r7, #24]
        break;
 80053ec:	e004      	b.n	80053f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	77bb      	strb	r3, [r7, #30]
        break;
 80053f6:	bf00      	nop
    }

    if (pclk != 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	085a      	lsrs	r2, r3, #1
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	441a      	add	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b0f      	cmp	r3, #15
 8005416:	d909      	bls.n	800542c <UART_SetConfig+0x4a0>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541e:	d205      	bcs.n	800542c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	b29a      	uxth	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	e001      	b.n	8005430 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800543c:	7fbb      	ldrb	r3, [r7, #30]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40007c00 	.word	0x40007c00
 800544c:	40023800 	.word	0x40023800
 8005450:	00f42400 	.word	0x00f42400

08005454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005552:	d10a      	bne.n	800556a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af02      	add	r7, sp, #8
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a8:	f7fc f93a 	bl	8001820 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d10e      	bne.n	80055da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f831 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e027      	b.n	800562a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d10e      	bne.n	8005606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f81b 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e011      	b.n	800562a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b09c      	sub	sp, #112	; 0x70
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005642:	e0a7      	b.n	8005794 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	f000 80a3 	beq.w	8005794 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fc f8e7 	bl	8001820 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <UART_WaitOnFlagUntilTimeout+0x32>
 800565e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005660:	2b00      	cmp	r3, #0
 8005662:	d13f      	bne.n	80056e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005678:	667b      	str	r3, [r7, #100]	; 0x64
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005684:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005688:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80056b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e068      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d050      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005700:	d148      	bne.n	8005794 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800570a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	637b      	str	r3, [r7, #52]	; 0x34
 800572c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e6      	bne.n	800570c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	66bb      	str	r3, [r7, #104]	; 0x68
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800575e:	623a      	str	r2, [r7, #32]
 8005760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	69f9      	ldr	r1, [r7, #28]
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	61bb      	str	r3, [r7, #24]
   return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e010      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	f43f af48 	beq.w	8005644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3770      	adds	r7, #112	; 0x70
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057be:	b480      	push	{r7}
 80057c0:	b095      	sub	sp, #84	; 0x54
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40
 80057e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e6      	bne.n	80057c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	61fb      	str	r3, [r7, #28]
   return(result);
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005830:	2b01      	cmp	r3, #1
 8005832:	d118      	bne.n	8005866 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	60bb      	str	r3, [r7, #8]
   return(result);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f023 0310 	bic.w	r3, r3, #16
 8005848:	647b      	str	r3, [r7, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6979      	ldr	r1, [r7, #20]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	613b      	str	r3, [r7, #16]
   return(result);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	669a      	str	r2, [r3, #104]	; 0x68
}
 800587a:	bf00      	nop
 800587c:	3754      	adds	r7, #84	; 0x54
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fb51 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b088      	sub	sp, #32
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	613b      	str	r3, [r7, #16]
   return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e6      	bne.n	80058ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fb1d 	bl	8004f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fe:	bf00      	nop
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <__errno>:
 8005908:	4b01      	ldr	r3, [pc, #4]	; (8005910 <__errno+0x8>)
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c

08005914 <__libc_init_array>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4d0d      	ldr	r5, [pc, #52]	; (800594c <__libc_init_array+0x38>)
 8005918:	4c0d      	ldr	r4, [pc, #52]	; (8005950 <__libc_init_array+0x3c>)
 800591a:	1b64      	subs	r4, r4, r5
 800591c:	10a4      	asrs	r4, r4, #2
 800591e:	2600      	movs	r6, #0
 8005920:	42a6      	cmp	r6, r4
 8005922:	d109      	bne.n	8005938 <__libc_init_array+0x24>
 8005924:	4d0b      	ldr	r5, [pc, #44]	; (8005954 <__libc_init_array+0x40>)
 8005926:	4c0c      	ldr	r4, [pc, #48]	; (8005958 <__libc_init_array+0x44>)
 8005928:	f002 fc90 	bl	800824c <_init>
 800592c:	1b64      	subs	r4, r4, r5
 800592e:	10a4      	asrs	r4, r4, #2
 8005930:	2600      	movs	r6, #0
 8005932:	42a6      	cmp	r6, r4
 8005934:	d105      	bne.n	8005942 <__libc_init_array+0x2e>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	f855 3b04 	ldr.w	r3, [r5], #4
 800593c:	4798      	blx	r3
 800593e:	3601      	adds	r6, #1
 8005940:	e7ee      	b.n	8005920 <__libc_init_array+0xc>
 8005942:	f855 3b04 	ldr.w	r3, [r5], #4
 8005946:	4798      	blx	r3
 8005948:	3601      	adds	r6, #1
 800594a:	e7f2      	b.n	8005932 <__libc_init_array+0x1e>
 800594c:	0800866c 	.word	0x0800866c
 8005950:	0800866c 	.word	0x0800866c
 8005954:	0800866c 	.word	0x0800866c
 8005958:	08008670 	.word	0x08008670

0800595c <memcpy>:
 800595c:	440a      	add	r2, r1
 800595e:	4291      	cmp	r1, r2
 8005960:	f100 33ff 	add.w	r3, r0, #4294967295
 8005964:	d100      	bne.n	8005968 <memcpy+0xc>
 8005966:	4770      	bx	lr
 8005968:	b510      	push	{r4, lr}
 800596a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005972:	4291      	cmp	r1, r2
 8005974:	d1f9      	bne.n	800596a <memcpy+0xe>
 8005976:	bd10      	pop	{r4, pc}

08005978 <memset>:
 8005978:	4402      	add	r2, r0
 800597a:	4603      	mov	r3, r0
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	f803 1b01 	strb.w	r1, [r3], #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <__cvt>:
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	ed2d 8b02 	vpush	{d8}
 800598e:	eeb0 8b40 	vmov.f64	d8, d0
 8005992:	b085      	sub	sp, #20
 8005994:	4617      	mov	r7, r2
 8005996:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005998:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800599a:	ee18 2a90 	vmov	r2, s17
 800599e:	f025 0520 	bic.w	r5, r5, #32
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	bfb6      	itet	lt
 80059a6:	222d      	movlt	r2, #45	; 0x2d
 80059a8:	2200      	movge	r2, #0
 80059aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80059ae:	2d46      	cmp	r5, #70	; 0x46
 80059b0:	460c      	mov	r4, r1
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	d004      	beq.n	80059c0 <__cvt+0x38>
 80059b6:	2d45      	cmp	r5, #69	; 0x45
 80059b8:	d100      	bne.n	80059bc <__cvt+0x34>
 80059ba:	3401      	adds	r4, #1
 80059bc:	2102      	movs	r1, #2
 80059be:	e000      	b.n	80059c2 <__cvt+0x3a>
 80059c0:	2103      	movs	r1, #3
 80059c2:	ab03      	add	r3, sp, #12
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	ab02      	add	r3, sp, #8
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	4622      	mov	r2, r4
 80059cc:	4633      	mov	r3, r6
 80059ce:	eeb0 0b48 	vmov.f64	d0, d8
 80059d2:	f000 fca9 	bl	8006328 <_dtoa_r>
 80059d6:	2d47      	cmp	r5, #71	; 0x47
 80059d8:	d101      	bne.n	80059de <__cvt+0x56>
 80059da:	07fb      	lsls	r3, r7, #31
 80059dc:	d51a      	bpl.n	8005a14 <__cvt+0x8c>
 80059de:	2d46      	cmp	r5, #70	; 0x46
 80059e0:	eb00 0204 	add.w	r2, r0, r4
 80059e4:	d10c      	bne.n	8005a00 <__cvt+0x78>
 80059e6:	7803      	ldrb	r3, [r0, #0]
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d107      	bne.n	80059fc <__cvt+0x74>
 80059ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80059f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f4:	bf1c      	itt	ne
 80059f6:	f1c4 0401 	rsbne	r4, r4, #1
 80059fa:	6034      	strne	r4, [r6, #0]
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	441a      	add	r2, r3
 8005a00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	bf08      	it	eq
 8005a0a:	9203      	streq	r2, [sp, #12]
 8005a0c:	2130      	movs	r1, #48	; 0x30
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d307      	bcc.n	8005a24 <__cvt+0x9c>
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a18:	1a1b      	subs	r3, r3, r0
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	b005      	add	sp, #20
 8005a1e:	ecbd 8b02 	vpop	{d8}
 8005a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a24:	1c5c      	adds	r4, r3, #1
 8005a26:	9403      	str	r4, [sp, #12]
 8005a28:	7019      	strb	r1, [r3, #0]
 8005a2a:	e7f0      	b.n	8005a0e <__cvt+0x86>

08005a2c <__exponent>:
 8005a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2900      	cmp	r1, #0
 8005a32:	bfb8      	it	lt
 8005a34:	4249      	neglt	r1, r1
 8005a36:	f803 2b02 	strb.w	r2, [r3], #2
 8005a3a:	bfb4      	ite	lt
 8005a3c:	222d      	movlt	r2, #45	; 0x2d
 8005a3e:	222b      	movge	r2, #43	; 0x2b
 8005a40:	2909      	cmp	r1, #9
 8005a42:	7042      	strb	r2, [r0, #1]
 8005a44:	dd2a      	ble.n	8005a9c <__exponent+0x70>
 8005a46:	f10d 0407 	add.w	r4, sp, #7
 8005a4a:	46a4      	mov	ip, r4
 8005a4c:	270a      	movs	r7, #10
 8005a4e:	46a6      	mov	lr, r4
 8005a50:	460a      	mov	r2, r1
 8005a52:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a56:	fb07 1516 	mls	r5, r7, r6, r1
 8005a5a:	3530      	adds	r5, #48	; 0x30
 8005a5c:	2a63      	cmp	r2, #99	; 0x63
 8005a5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a66:	4631      	mov	r1, r6
 8005a68:	dcf1      	bgt.n	8005a4e <__exponent+0x22>
 8005a6a:	3130      	adds	r1, #48	; 0x30
 8005a6c:	f1ae 0502 	sub.w	r5, lr, #2
 8005a70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a74:	1c44      	adds	r4, r0, #1
 8005a76:	4629      	mov	r1, r5
 8005a78:	4561      	cmp	r1, ip
 8005a7a:	d30a      	bcc.n	8005a92 <__exponent+0x66>
 8005a7c:	f10d 0209 	add.w	r2, sp, #9
 8005a80:	eba2 020e 	sub.w	r2, r2, lr
 8005a84:	4565      	cmp	r5, ip
 8005a86:	bf88      	it	hi
 8005a88:	2200      	movhi	r2, #0
 8005a8a:	4413      	add	r3, r2
 8005a8c:	1a18      	subs	r0, r3, r0
 8005a8e:	b003      	add	sp, #12
 8005a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a9a:	e7ed      	b.n	8005a78 <__exponent+0x4c>
 8005a9c:	2330      	movs	r3, #48	; 0x30
 8005a9e:	3130      	adds	r1, #48	; 0x30
 8005aa0:	7083      	strb	r3, [r0, #2]
 8005aa2:	70c1      	strb	r1, [r0, #3]
 8005aa4:	1d03      	adds	r3, r0, #4
 8005aa6:	e7f1      	b.n	8005a8c <__exponent+0x60>

08005aa8 <_printf_float>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	b08b      	sub	sp, #44	; 0x2c
 8005aae:	460c      	mov	r4, r1
 8005ab0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	4605      	mov	r5, r0
 8005aba:	f001 f9a3 	bl	8006e04 <_localeconv_r>
 8005abe:	f8d0 b000 	ldr.w	fp, [r0]
 8005ac2:	4658      	mov	r0, fp
 8005ac4:	f7fa fbbc 	bl	8000240 <strlen>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9308      	str	r3, [sp, #32]
 8005acc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005ad4:	6822      	ldr	r2, [r4, #0]
 8005ad6:	3307      	adds	r3, #7
 8005ad8:	f023 0307 	bic.w	r3, r3, #7
 8005adc:	f103 0108 	add.w	r1, r3, #8
 8005ae0:	f8c8 1000 	str.w	r1, [r8]
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005aea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005aee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005d50 <_printf_float+0x2a8>
 8005af2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005af6:	eeb0 6bc0 	vabs.f64	d6, d0
 8005afa:	eeb4 6b47 	vcmp.f64	d6, d7
 8005afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b02:	dd24      	ble.n	8005b4e <_printf_float+0xa6>
 8005b04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0c:	d502      	bpl.n	8005b14 <_printf_float+0x6c>
 8005b0e:	232d      	movs	r3, #45	; 0x2d
 8005b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b14:	4b90      	ldr	r3, [pc, #576]	; (8005d58 <_printf_float+0x2b0>)
 8005b16:	4891      	ldr	r0, [pc, #580]	; (8005d5c <_printf_float+0x2b4>)
 8005b18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005b1c:	bf94      	ite	ls
 8005b1e:	4698      	movls	r8, r3
 8005b20:	4680      	movhi	r8, r0
 8005b22:	2303      	movs	r3, #3
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6022      	str	r2, [r4, #0]
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	9700      	str	r7, [sp, #0]
 8005b32:	4633      	mov	r3, r6
 8005b34:	aa09      	add	r2, sp, #36	; 0x24
 8005b36:	4621      	mov	r1, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 f9d3 	bl	8005ee4 <_printf_common>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	f040 808a 	bne.w	8005c58 <_printf_float+0x1b0>
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	b00b      	add	sp, #44	; 0x2c
 8005b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b56:	d709      	bvc.n	8005b6c <_printf_float+0xc4>
 8005b58:	ee10 3a90 	vmov	r3, s1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bfbc      	itt	lt
 8005b60:	232d      	movlt	r3, #45	; 0x2d
 8005b62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b66:	487e      	ldr	r0, [pc, #504]	; (8005d60 <_printf_float+0x2b8>)
 8005b68:	4b7e      	ldr	r3, [pc, #504]	; (8005d64 <_printf_float+0x2bc>)
 8005b6a:	e7d5      	b.n	8005b18 <_printf_float+0x70>
 8005b6c:	6863      	ldr	r3, [r4, #4]
 8005b6e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b72:	9104      	str	r1, [sp, #16]
 8005b74:	1c59      	adds	r1, r3, #1
 8005b76:	d13c      	bne.n	8005bf2 <_printf_float+0x14a>
 8005b78:	2306      	movs	r3, #6
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	ab08      	add	r3, sp, #32
 8005b82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005b86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8a:	ab07      	add	r3, sp, #28
 8005b8c:	6861      	ldr	r1, [r4, #4]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	f10d 031b 	add.w	r3, sp, #27
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7ff fef6 	bl	8005988 <__cvt>
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	9907      	ldr	r1, [sp, #28]
 8005ba0:	2b47      	cmp	r3, #71	; 0x47
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	d108      	bne.n	8005bb8 <_printf_float+0x110>
 8005ba6:	1cc8      	adds	r0, r1, #3
 8005ba8:	db02      	blt.n	8005bb0 <_printf_float+0x108>
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	4299      	cmp	r1, r3
 8005bae:	dd41      	ble.n	8005c34 <_printf_float+0x18c>
 8005bb0:	f1a9 0902 	sub.w	r9, r9, #2
 8005bb4:	fa5f f989 	uxtb.w	r9, r9
 8005bb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bbc:	d820      	bhi.n	8005c00 <_printf_float+0x158>
 8005bbe:	3901      	subs	r1, #1
 8005bc0:	464a      	mov	r2, r9
 8005bc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bc6:	9107      	str	r1, [sp, #28]
 8005bc8:	f7ff ff30 	bl	8005a2c <__exponent>
 8005bcc:	9a08      	ldr	r2, [sp, #32]
 8005bce:	9004      	str	r0, [sp, #16]
 8005bd0:	1813      	adds	r3, r2, r0
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	dc02      	bgt.n	8005bde <_printf_float+0x136>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d2      	lsls	r2, r2, #31
 8005bdc:	d501      	bpl.n	8005be2 <_printf_float+0x13a>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0a2      	beq.n	8005b30 <_printf_float+0x88>
 8005bea:	232d      	movs	r3, #45	; 0x2d
 8005bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf0:	e79e      	b.n	8005b30 <_printf_float+0x88>
 8005bf2:	9904      	ldr	r1, [sp, #16]
 8005bf4:	2947      	cmp	r1, #71	; 0x47
 8005bf6:	d1c1      	bne.n	8005b7c <_printf_float+0xd4>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1bf      	bne.n	8005b7c <_printf_float+0xd4>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e7bc      	b.n	8005b7a <_printf_float+0xd2>
 8005c00:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005c04:	d118      	bne.n	8005c38 <_printf_float+0x190>
 8005c06:	2900      	cmp	r1, #0
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	dd0b      	ble.n	8005c24 <_printf_float+0x17c>
 8005c0c:	6121      	str	r1, [r4, #16]
 8005c0e:	b913      	cbnz	r3, 8005c16 <_printf_float+0x16e>
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	07d0      	lsls	r0, r2, #31
 8005c14:	d502      	bpl.n	8005c1c <_printf_float+0x174>
 8005c16:	3301      	adds	r3, #1
 8005c18:	440b      	add	r3, r1
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	e7de      	b.n	8005be2 <_printf_float+0x13a>
 8005c24:	b913      	cbnz	r3, 8005c2c <_printf_float+0x184>
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	07d2      	lsls	r2, r2, #31
 8005c2a:	d501      	bpl.n	8005c30 <_printf_float+0x188>
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	e7f4      	b.n	8005c1a <_printf_float+0x172>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e7f2      	b.n	8005c1a <_printf_float+0x172>
 8005c34:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005c38:	9b08      	ldr	r3, [sp, #32]
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	db05      	blt.n	8005c4a <_printf_float+0x1a2>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	6121      	str	r1, [r4, #16]
 8005c42:	07d8      	lsls	r0, r3, #31
 8005c44:	d5ea      	bpl.n	8005c1c <_printf_float+0x174>
 8005c46:	1c4b      	adds	r3, r1, #1
 8005c48:	e7e7      	b.n	8005c1a <_printf_float+0x172>
 8005c4a:	2900      	cmp	r1, #0
 8005c4c:	bfd4      	ite	le
 8005c4e:	f1c1 0202 	rsble	r2, r1, #2
 8005c52:	2201      	movgt	r2, #1
 8005c54:	4413      	add	r3, r2
 8005c56:	e7e0      	b.n	8005c1a <_printf_float+0x172>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	055a      	lsls	r2, r3, #21
 8005c5c:	d407      	bmi.n	8005c6e <_printf_float+0x1c6>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	4642      	mov	r2, r8
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d12a      	bne.n	8005cc2 <_printf_float+0x21a>
 8005c6c:	e76a      	b.n	8005b44 <_printf_float+0x9c>
 8005c6e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c72:	f240 80e2 	bls.w	8005e3a <_printf_float+0x392>
 8005c76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005c7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c82:	d133      	bne.n	8005cec <_printf_float+0x244>
 8005c84:	4a38      	ldr	r2, [pc, #224]	; (8005d68 <_printf_float+0x2c0>)
 8005c86:	2301      	movs	r3, #1
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f af58 	beq.w	8005b44 <_printf_float+0x9c>
 8005c94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	db02      	blt.n	8005ca2 <_printf_float+0x1fa>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07d8      	lsls	r0, r3, #31
 8005ca0:	d50f      	bpl.n	8005cc2 <_printf_float+0x21a>
 8005ca2:	4653      	mov	r3, sl
 8005ca4:	465a      	mov	r2, fp
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f af49 	beq.w	8005b44 <_printf_float+0x9c>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	f104 091a 	add.w	r9, r4, #26
 8005cba:	9b08      	ldr	r3, [sp, #32]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	4543      	cmp	r3, r8
 8005cc0:	dc09      	bgt.n	8005cd6 <_printf_float+0x22e>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	079b      	lsls	r3, r3, #30
 8005cc6:	f100 8108 	bmi.w	8005eda <_printf_float+0x432>
 8005cca:	68e0      	ldr	r0, [r4, #12]
 8005ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cce:	4298      	cmp	r0, r3
 8005cd0:	bfb8      	it	lt
 8005cd2:	4618      	movlt	r0, r3
 8005cd4:	e738      	b.n	8005b48 <_printf_float+0xa0>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	464a      	mov	r2, r9
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f43f af2f 	beq.w	8005b44 <_printf_float+0x9c>
 8005ce6:	f108 0801 	add.w	r8, r8, #1
 8005cea:	e7e6      	b.n	8005cba <_printf_float+0x212>
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dc3c      	bgt.n	8005d6c <_printf_float+0x2c4>
 8005cf2:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <_printf_float+0x2c0>)
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f af21 	beq.w	8005b44 <_printf_float+0x9c>
 8005d02:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d102      	bne.n	8005d10 <_printf_float+0x268>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	07d9      	lsls	r1, r3, #31
 8005d0e:	d5d8      	bpl.n	8005cc2 <_printf_float+0x21a>
 8005d10:	4653      	mov	r3, sl
 8005d12:	465a      	mov	r2, fp
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f af12 	beq.w	8005b44 <_printf_float+0x9c>
 8005d20:	f04f 0900 	mov.w	r9, #0
 8005d24:	f104 0a1a 	add.w	sl, r4, #26
 8005d28:	9b07      	ldr	r3, [sp, #28]
 8005d2a:	425b      	negs	r3, r3
 8005d2c:	454b      	cmp	r3, r9
 8005d2e:	dc01      	bgt.n	8005d34 <_printf_float+0x28c>
 8005d30:	9b08      	ldr	r3, [sp, #32]
 8005d32:	e795      	b.n	8005c60 <_printf_float+0x1b8>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4652      	mov	r2, sl
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f af00 	beq.w	8005b44 <_printf_float+0x9c>
 8005d44:	f109 0901 	add.w	r9, r9, #1
 8005d48:	e7ee      	b.n	8005d28 <_printf_float+0x280>
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w
 8005d50:	ffffffff 	.word	0xffffffff
 8005d54:	7fefffff 	.word	0x7fefffff
 8005d58:	08008290 	.word	0x08008290
 8005d5c:	08008294 	.word	0x08008294
 8005d60:	0800829c 	.word	0x0800829c
 8005d64:	08008298 	.word	0x08008298
 8005d68:	080082a0 	.word	0x080082a0
 8005d6c:	9a08      	ldr	r2, [sp, #32]
 8005d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d70:	429a      	cmp	r2, r3
 8005d72:	bfa8      	it	ge
 8005d74:	461a      	movge	r2, r3
 8005d76:	2a00      	cmp	r2, #0
 8005d78:	4691      	mov	r9, r2
 8005d7a:	dc38      	bgt.n	8005dee <_printf_float+0x346>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9305      	str	r3, [sp, #20]
 8005d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d84:	f104 021a 	add.w	r2, r4, #26
 8005d88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d8a:	9905      	ldr	r1, [sp, #20]
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	eba3 0309 	sub.w	r3, r3, r9
 8005d92:	428b      	cmp	r3, r1
 8005d94:	dc33      	bgt.n	8005dfe <_printf_float+0x356>
 8005d96:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	db3c      	blt.n	8005e18 <_printf_float+0x370>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	07da      	lsls	r2, r3, #31
 8005da2:	d439      	bmi.n	8005e18 <_printf_float+0x370>
 8005da4:	9b08      	ldr	r3, [sp, #32]
 8005da6:	9a04      	ldr	r2, [sp, #16]
 8005da8:	9907      	ldr	r1, [sp, #28]
 8005daa:	1a9a      	subs	r2, r3, r2
 8005dac:	eba3 0901 	sub.w	r9, r3, r1
 8005db0:	4591      	cmp	r9, r2
 8005db2:	bfa8      	it	ge
 8005db4:	4691      	movge	r9, r2
 8005db6:	f1b9 0f00 	cmp.w	r9, #0
 8005dba:	dc35      	bgt.n	8005e28 <_printf_float+0x380>
 8005dbc:	f04f 0800 	mov.w	r8, #0
 8005dc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dc4:	f104 0a1a 	add.w	sl, r4, #26
 8005dc8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	eba3 0309 	sub.w	r3, r3, r9
 8005dd2:	4543      	cmp	r3, r8
 8005dd4:	f77f af75 	ble.w	8005cc2 <_printf_float+0x21a>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4652      	mov	r2, sl
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	f43f aeae 	beq.w	8005b44 <_printf_float+0x9c>
 8005de8:	f108 0801 	add.w	r8, r8, #1
 8005dec:	e7ec      	b.n	8005dc8 <_printf_float+0x320>
 8005dee:	4613      	mov	r3, r2
 8005df0:	4631      	mov	r1, r6
 8005df2:	4642      	mov	r2, r8
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d1bf      	bne.n	8005d7c <_printf_float+0x2d4>
 8005dfc:	e6a2      	b.n	8005b44 <_printf_float+0x9c>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	9204      	str	r2, [sp, #16]
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f ae9b 	beq.w	8005b44 <_printf_float+0x9c>
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	9a04      	ldr	r2, [sp, #16]
 8005e12:	3301      	adds	r3, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	e7b7      	b.n	8005d88 <_printf_float+0x2e0>
 8005e18:	4653      	mov	r3, sl
 8005e1a:	465a      	mov	r2, fp
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	d1be      	bne.n	8005da4 <_printf_float+0x2fc>
 8005e26:	e68d      	b.n	8005b44 <_printf_float+0x9c>
 8005e28:	9a04      	ldr	r2, [sp, #16]
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	4442      	add	r2, r8
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1c1      	bne.n	8005dbc <_printf_float+0x314>
 8005e38:	e684      	b.n	8005b44 <_printf_float+0x9c>
 8005e3a:	9a08      	ldr	r2, [sp, #32]
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	dc01      	bgt.n	8005e44 <_printf_float+0x39c>
 8005e40:	07db      	lsls	r3, r3, #31
 8005e42:	d537      	bpl.n	8005eb4 <_printf_float+0x40c>
 8005e44:	2301      	movs	r3, #1
 8005e46:	4642      	mov	r2, r8
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f ae78 	beq.w	8005b44 <_printf_float+0x9c>
 8005e54:	4653      	mov	r3, sl
 8005e56:	465a      	mov	r2, fp
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f ae70 	beq.w	8005b44 <_printf_float+0x9c>
 8005e64:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005e68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e70:	d01b      	beq.n	8005eaa <_printf_float+0x402>
 8005e72:	9b08      	ldr	r3, [sp, #32]
 8005e74:	f108 0201 	add.w	r2, r8, #1
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b8      	blx	r7
 8005e80:	3001      	adds	r0, #1
 8005e82:	d10e      	bne.n	8005ea2 <_printf_float+0x3fa>
 8005e84:	e65e      	b.n	8005b44 <_printf_float+0x9c>
 8005e86:	2301      	movs	r3, #1
 8005e88:	464a      	mov	r2, r9
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	f43f ae57 	beq.w	8005b44 <_printf_float+0x9c>
 8005e96:	f108 0801 	add.w	r8, r8, #1
 8005e9a:	9b08      	ldr	r3, [sp, #32]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	4543      	cmp	r3, r8
 8005ea0:	dcf1      	bgt.n	8005e86 <_printf_float+0x3de>
 8005ea2:	9b04      	ldr	r3, [sp, #16]
 8005ea4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ea8:	e6db      	b.n	8005c62 <_printf_float+0x1ba>
 8005eaa:	f04f 0800 	mov.w	r8, #0
 8005eae:	f104 091a 	add.w	r9, r4, #26
 8005eb2:	e7f2      	b.n	8005e9a <_printf_float+0x3f2>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	e7df      	b.n	8005e7a <_printf_float+0x3d2>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	464a      	mov	r2, r9
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f ae3d 	beq.w	8005b44 <_printf_float+0x9c>
 8005eca:	f108 0801 	add.w	r8, r8, #1
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed2:	1a5b      	subs	r3, r3, r1
 8005ed4:	4543      	cmp	r3, r8
 8005ed6:	dcf0      	bgt.n	8005eba <_printf_float+0x412>
 8005ed8:	e6f7      	b.n	8005cca <_printf_float+0x222>
 8005eda:	f04f 0800 	mov.w	r8, #0
 8005ede:	f104 0919 	add.w	r9, r4, #25
 8005ee2:	e7f4      	b.n	8005ece <_printf_float+0x426>

08005ee4 <_printf_common>:
 8005ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	4616      	mov	r6, r2
 8005eea:	4699      	mov	r9, r3
 8005eec:	688a      	ldr	r2, [r1, #8]
 8005eee:	690b      	ldr	r3, [r1, #16]
 8005ef0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bfb8      	it	lt
 8005ef8:	4613      	movlt	r3, r2
 8005efa:	6033      	str	r3, [r6, #0]
 8005efc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f00:	4607      	mov	r7, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	b10a      	cbz	r2, 8005f0a <_printf_common+0x26>
 8005f06:	3301      	adds	r3, #1
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	0699      	lsls	r1, r3, #26
 8005f0e:	bf42      	ittt	mi
 8005f10:	6833      	ldrmi	r3, [r6, #0]
 8005f12:	3302      	addmi	r3, #2
 8005f14:	6033      	strmi	r3, [r6, #0]
 8005f16:	6825      	ldr	r5, [r4, #0]
 8005f18:	f015 0506 	ands.w	r5, r5, #6
 8005f1c:	d106      	bne.n	8005f2c <_printf_common+0x48>
 8005f1e:	f104 0a19 	add.w	sl, r4, #25
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	6832      	ldr	r2, [r6, #0]
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	42ab      	cmp	r3, r5
 8005f2a:	dc26      	bgt.n	8005f7a <_printf_common+0x96>
 8005f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f30:	1e13      	subs	r3, r2, #0
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	bf18      	it	ne
 8005f36:	2301      	movne	r3, #1
 8005f38:	0692      	lsls	r2, r2, #26
 8005f3a:	d42b      	bmi.n	8005f94 <_printf_common+0xb0>
 8005f3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f40:	4649      	mov	r1, r9
 8005f42:	4638      	mov	r0, r7
 8005f44:	47c0      	blx	r8
 8005f46:	3001      	adds	r0, #1
 8005f48:	d01e      	beq.n	8005f88 <_printf_common+0xa4>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	68e5      	ldr	r5, [r4, #12]
 8005f4e:	6832      	ldr	r2, [r6, #0]
 8005f50:	f003 0306 	and.w	r3, r3, #6
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	bf08      	it	eq
 8005f58:	1aad      	subeq	r5, r5, r2
 8005f5a:	68a3      	ldr	r3, [r4, #8]
 8005f5c:	6922      	ldr	r2, [r4, #16]
 8005f5e:	bf0c      	ite	eq
 8005f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f64:	2500      	movne	r5, #0
 8005f66:	4293      	cmp	r3, r2
 8005f68:	bfc4      	itt	gt
 8005f6a:	1a9b      	subgt	r3, r3, r2
 8005f6c:	18ed      	addgt	r5, r5, r3
 8005f6e:	2600      	movs	r6, #0
 8005f70:	341a      	adds	r4, #26
 8005f72:	42b5      	cmp	r5, r6
 8005f74:	d11a      	bne.n	8005fac <_printf_common+0xc8>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e008      	b.n	8005f8c <_printf_common+0xa8>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	4652      	mov	r2, sl
 8005f7e:	4649      	mov	r1, r9
 8005f80:	4638      	mov	r0, r7
 8005f82:	47c0      	blx	r8
 8005f84:	3001      	adds	r0, #1
 8005f86:	d103      	bne.n	8005f90 <_printf_common+0xac>
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f90:	3501      	adds	r5, #1
 8005f92:	e7c6      	b.n	8005f22 <_printf_common+0x3e>
 8005f94:	18e1      	adds	r1, r4, r3
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	2030      	movs	r0, #48	; 0x30
 8005f9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f9e:	4422      	add	r2, r4
 8005fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa8:	3302      	adds	r3, #2
 8005faa:	e7c7      	b.n	8005f3c <_printf_common+0x58>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4622      	mov	r2, r4
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	47c0      	blx	r8
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d0e6      	beq.n	8005f88 <_printf_common+0xa4>
 8005fba:	3601      	adds	r6, #1
 8005fbc:	e7d9      	b.n	8005f72 <_printf_common+0x8e>
	...

08005fc0 <_printf_i>:
 8005fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	7e0f      	ldrb	r7, [r1, #24]
 8005fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fc8:	2f78      	cmp	r7, #120	; 0x78
 8005fca:	4691      	mov	r9, r2
 8005fcc:	4680      	mov	r8, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	469a      	mov	sl, r3
 8005fd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fd6:	d807      	bhi.n	8005fe8 <_printf_i+0x28>
 8005fd8:	2f62      	cmp	r7, #98	; 0x62
 8005fda:	d80a      	bhi.n	8005ff2 <_printf_i+0x32>
 8005fdc:	2f00      	cmp	r7, #0
 8005fde:	f000 80d8 	beq.w	8006192 <_printf_i+0x1d2>
 8005fe2:	2f58      	cmp	r7, #88	; 0x58
 8005fe4:	f000 80a3 	beq.w	800612e <_printf_i+0x16e>
 8005fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ff0:	e03a      	b.n	8006068 <_printf_i+0xa8>
 8005ff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ff6:	2b15      	cmp	r3, #21
 8005ff8:	d8f6      	bhi.n	8005fe8 <_printf_i+0x28>
 8005ffa:	a101      	add	r1, pc, #4	; (adr r1, 8006000 <_printf_i+0x40>)
 8005ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006000:	08006059 	.word	0x08006059
 8006004:	0800606d 	.word	0x0800606d
 8006008:	08005fe9 	.word	0x08005fe9
 800600c:	08005fe9 	.word	0x08005fe9
 8006010:	08005fe9 	.word	0x08005fe9
 8006014:	08005fe9 	.word	0x08005fe9
 8006018:	0800606d 	.word	0x0800606d
 800601c:	08005fe9 	.word	0x08005fe9
 8006020:	08005fe9 	.word	0x08005fe9
 8006024:	08005fe9 	.word	0x08005fe9
 8006028:	08005fe9 	.word	0x08005fe9
 800602c:	08006179 	.word	0x08006179
 8006030:	0800609d 	.word	0x0800609d
 8006034:	0800615b 	.word	0x0800615b
 8006038:	08005fe9 	.word	0x08005fe9
 800603c:	08005fe9 	.word	0x08005fe9
 8006040:	0800619b 	.word	0x0800619b
 8006044:	08005fe9 	.word	0x08005fe9
 8006048:	0800609d 	.word	0x0800609d
 800604c:	08005fe9 	.word	0x08005fe9
 8006050:	08005fe9 	.word	0x08005fe9
 8006054:	08006163 	.word	0x08006163
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	1d1a      	adds	r2, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	602a      	str	r2, [r5, #0]
 8006060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006068:	2301      	movs	r3, #1
 800606a:	e0a3      	b.n	80061b4 <_printf_i+0x1f4>
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	6829      	ldr	r1, [r5, #0]
 8006070:	0606      	lsls	r6, r0, #24
 8006072:	f101 0304 	add.w	r3, r1, #4
 8006076:	d50a      	bpl.n	800608e <_printf_i+0xce>
 8006078:	680e      	ldr	r6, [r1, #0]
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	2e00      	cmp	r6, #0
 800607e:	da03      	bge.n	8006088 <_printf_i+0xc8>
 8006080:	232d      	movs	r3, #45	; 0x2d
 8006082:	4276      	negs	r6, r6
 8006084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006088:	485e      	ldr	r0, [pc, #376]	; (8006204 <_printf_i+0x244>)
 800608a:	230a      	movs	r3, #10
 800608c:	e019      	b.n	80060c2 <_printf_i+0x102>
 800608e:	680e      	ldr	r6, [r1, #0]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006096:	bf18      	it	ne
 8006098:	b236      	sxthne	r6, r6
 800609a:	e7ef      	b.n	800607c <_printf_i+0xbc>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	1d19      	adds	r1, r3, #4
 80060a2:	6029      	str	r1, [r5, #0]
 80060a4:	0601      	lsls	r1, r0, #24
 80060a6:	d501      	bpl.n	80060ac <_printf_i+0xec>
 80060a8:	681e      	ldr	r6, [r3, #0]
 80060aa:	e002      	b.n	80060b2 <_printf_i+0xf2>
 80060ac:	0646      	lsls	r6, r0, #25
 80060ae:	d5fb      	bpl.n	80060a8 <_printf_i+0xe8>
 80060b0:	881e      	ldrh	r6, [r3, #0]
 80060b2:	4854      	ldr	r0, [pc, #336]	; (8006204 <_printf_i+0x244>)
 80060b4:	2f6f      	cmp	r7, #111	; 0x6f
 80060b6:	bf0c      	ite	eq
 80060b8:	2308      	moveq	r3, #8
 80060ba:	230a      	movne	r3, #10
 80060bc:	2100      	movs	r1, #0
 80060be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c2:	6865      	ldr	r5, [r4, #4]
 80060c4:	60a5      	str	r5, [r4, #8]
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	bfa2      	ittt	ge
 80060ca:	6821      	ldrge	r1, [r4, #0]
 80060cc:	f021 0104 	bicge.w	r1, r1, #4
 80060d0:	6021      	strge	r1, [r4, #0]
 80060d2:	b90e      	cbnz	r6, 80060d8 <_printf_i+0x118>
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	d04d      	beq.n	8006174 <_printf_i+0x1b4>
 80060d8:	4615      	mov	r5, r2
 80060da:	fbb6 f1f3 	udiv	r1, r6, r3
 80060de:	fb03 6711 	mls	r7, r3, r1, r6
 80060e2:	5dc7      	ldrb	r7, [r0, r7]
 80060e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060e8:	4637      	mov	r7, r6
 80060ea:	42bb      	cmp	r3, r7
 80060ec:	460e      	mov	r6, r1
 80060ee:	d9f4      	bls.n	80060da <_printf_i+0x11a>
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d10b      	bne.n	800610c <_printf_i+0x14c>
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	07de      	lsls	r6, r3, #31
 80060f8:	d508      	bpl.n	800610c <_printf_i+0x14c>
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6861      	ldr	r1, [r4, #4]
 80060fe:	4299      	cmp	r1, r3
 8006100:	bfde      	ittt	le
 8006102:	2330      	movle	r3, #48	; 0x30
 8006104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800610c:	1b52      	subs	r2, r2, r5
 800610e:	6122      	str	r2, [r4, #16]
 8006110:	f8cd a000 	str.w	sl, [sp]
 8006114:	464b      	mov	r3, r9
 8006116:	aa03      	add	r2, sp, #12
 8006118:	4621      	mov	r1, r4
 800611a:	4640      	mov	r0, r8
 800611c:	f7ff fee2 	bl	8005ee4 <_printf_common>
 8006120:	3001      	adds	r0, #1
 8006122:	d14c      	bne.n	80061be <_printf_i+0x1fe>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	b004      	add	sp, #16
 800612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612e:	4835      	ldr	r0, [pc, #212]	; (8006204 <_printf_i+0x244>)
 8006130:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006134:	6829      	ldr	r1, [r5, #0]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	f851 6b04 	ldr.w	r6, [r1], #4
 800613c:	6029      	str	r1, [r5, #0]
 800613e:	061d      	lsls	r5, r3, #24
 8006140:	d514      	bpl.n	800616c <_printf_i+0x1ac>
 8006142:	07df      	lsls	r7, r3, #31
 8006144:	bf44      	itt	mi
 8006146:	f043 0320 	orrmi.w	r3, r3, #32
 800614a:	6023      	strmi	r3, [r4, #0]
 800614c:	b91e      	cbnz	r6, 8006156 <_printf_i+0x196>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	f023 0320 	bic.w	r3, r3, #32
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	2310      	movs	r3, #16
 8006158:	e7b0      	b.n	80060bc <_printf_i+0xfc>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	f043 0320 	orr.w	r3, r3, #32
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	2378      	movs	r3, #120	; 0x78
 8006164:	4828      	ldr	r0, [pc, #160]	; (8006208 <_printf_i+0x248>)
 8006166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800616a:	e7e3      	b.n	8006134 <_printf_i+0x174>
 800616c:	0659      	lsls	r1, r3, #25
 800616e:	bf48      	it	mi
 8006170:	b2b6      	uxthmi	r6, r6
 8006172:	e7e6      	b.n	8006142 <_printf_i+0x182>
 8006174:	4615      	mov	r5, r2
 8006176:	e7bb      	b.n	80060f0 <_printf_i+0x130>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	6826      	ldr	r6, [r4, #0]
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	1d18      	adds	r0, r3, #4
 8006180:	6028      	str	r0, [r5, #0]
 8006182:	0635      	lsls	r5, r6, #24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	d501      	bpl.n	800618c <_printf_i+0x1cc>
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0x1d2>
 800618c:	0670      	lsls	r0, r6, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0x1c8>
 8006190:	8019      	strh	r1, [r3, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	4615      	mov	r5, r2
 8006198:	e7ba      	b.n	8006110 <_printf_i+0x150>
 800619a:	682b      	ldr	r3, [r5, #0]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	602a      	str	r2, [r5, #0]
 80061a0:	681d      	ldr	r5, [r3, #0]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	2100      	movs	r1, #0
 80061a6:	4628      	mov	r0, r5
 80061a8:	f7fa f852 	bl	8000250 <memchr>
 80061ac:	b108      	cbz	r0, 80061b2 <_printf_i+0x1f2>
 80061ae:	1b40      	subs	r0, r0, r5
 80061b0:	6060      	str	r0, [r4, #4]
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	2300      	movs	r3, #0
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061bc:	e7a8      	b.n	8006110 <_printf_i+0x150>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	462a      	mov	r2, r5
 80061c2:	4649      	mov	r1, r9
 80061c4:	4640      	mov	r0, r8
 80061c6:	47d0      	blx	sl
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0ab      	beq.n	8006124 <_printf_i+0x164>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	d413      	bmi.n	80061fa <_printf_i+0x23a>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e7a4      	b.n	8006128 <_printf_i+0x168>
 80061de:	2301      	movs	r3, #1
 80061e0:	4632      	mov	r2, r6
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d09b      	beq.n	8006124 <_printf_i+0x164>
 80061ec:	3501      	adds	r5, #1
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	9903      	ldr	r1, [sp, #12]
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dcf2      	bgt.n	80061de <_printf_i+0x21e>
 80061f8:	e7eb      	b.n	80061d2 <_printf_i+0x212>
 80061fa:	2500      	movs	r5, #0
 80061fc:	f104 0619 	add.w	r6, r4, #25
 8006200:	e7f5      	b.n	80061ee <_printf_i+0x22e>
 8006202:	bf00      	nop
 8006204:	080082a2 	.word	0x080082a2
 8006208:	080082b3 	.word	0x080082b3

0800620c <quorem>:
 800620c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	6903      	ldr	r3, [r0, #16]
 8006212:	690c      	ldr	r4, [r1, #16]
 8006214:	42a3      	cmp	r3, r4
 8006216:	4607      	mov	r7, r0
 8006218:	f2c0 8081 	blt.w	800631e <quorem+0x112>
 800621c:	3c01      	subs	r4, #1
 800621e:	f101 0814 	add.w	r8, r1, #20
 8006222:	f100 0514 	add.w	r5, r0, #20
 8006226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622a:	9301      	str	r3, [sp, #4]
 800622c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006234:	3301      	adds	r3, #1
 8006236:	429a      	cmp	r2, r3
 8006238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800623c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006240:	fbb2 f6f3 	udiv	r6, r2, r3
 8006244:	d331      	bcc.n	80062aa <quorem+0x9e>
 8006246:	f04f 0e00 	mov.w	lr, #0
 800624a:	4640      	mov	r0, r8
 800624c:	46ac      	mov	ip, r5
 800624e:	46f2      	mov	sl, lr
 8006250:	f850 2b04 	ldr.w	r2, [r0], #4
 8006254:	b293      	uxth	r3, r2
 8006256:	fb06 e303 	mla	r3, r6, r3, lr
 800625a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800625e:	b29b      	uxth	r3, r3
 8006260:	ebaa 0303 	sub.w	r3, sl, r3
 8006264:	f8dc a000 	ldr.w	sl, [ip]
 8006268:	0c12      	lsrs	r2, r2, #16
 800626a:	fa13 f38a 	uxtah	r3, r3, sl
 800626e:	fb06 e202 	mla	r2, r6, r2, lr
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800627a:	b292      	uxth	r2, r2
 800627c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006284:	f8bd 3000 	ldrh.w	r3, [sp]
 8006288:	4581      	cmp	r9, r0
 800628a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800628e:	f84c 3b04 	str.w	r3, [ip], #4
 8006292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006296:	d2db      	bcs.n	8006250 <quorem+0x44>
 8006298:	f855 300b 	ldr.w	r3, [r5, fp]
 800629c:	b92b      	cbnz	r3, 80062aa <quorem+0x9e>
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	429d      	cmp	r5, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	d32e      	bcc.n	8006306 <quorem+0xfa>
 80062a8:	613c      	str	r4, [r7, #16]
 80062aa:	4638      	mov	r0, r7
 80062ac:	f001 f838 	bl	8007320 <__mcmp>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	db24      	blt.n	80062fe <quorem+0xf2>
 80062b4:	3601      	adds	r6, #1
 80062b6:	4628      	mov	r0, r5
 80062b8:	f04f 0c00 	mov.w	ip, #0
 80062bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80062c0:	f8d0 e000 	ldr.w	lr, [r0]
 80062c4:	b293      	uxth	r3, r2
 80062c6:	ebac 0303 	sub.w	r3, ip, r3
 80062ca:	0c12      	lsrs	r2, r2, #16
 80062cc:	fa13 f38e 	uxtah	r3, r3, lr
 80062d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062de:	45c1      	cmp	r9, r8
 80062e0:	f840 3b04 	str.w	r3, [r0], #4
 80062e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062e8:	d2e8      	bcs.n	80062bc <quorem+0xb0>
 80062ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062f2:	b922      	cbnz	r2, 80062fe <quorem+0xf2>
 80062f4:	3b04      	subs	r3, #4
 80062f6:	429d      	cmp	r5, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	d30a      	bcc.n	8006312 <quorem+0x106>
 80062fc:	613c      	str	r4, [r7, #16]
 80062fe:	4630      	mov	r0, r6
 8006300:	b003      	add	sp, #12
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	3b04      	subs	r3, #4
 800630a:	2a00      	cmp	r2, #0
 800630c:	d1cc      	bne.n	80062a8 <quorem+0x9c>
 800630e:	3c01      	subs	r4, #1
 8006310:	e7c7      	b.n	80062a2 <quorem+0x96>
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	3b04      	subs	r3, #4
 8006316:	2a00      	cmp	r2, #0
 8006318:	d1f0      	bne.n	80062fc <quorem+0xf0>
 800631a:	3c01      	subs	r4, #1
 800631c:	e7eb      	b.n	80062f6 <quorem+0xea>
 800631e:	2000      	movs	r0, #0
 8006320:	e7ee      	b.n	8006300 <quorem+0xf4>
 8006322:	0000      	movs	r0, r0
 8006324:	0000      	movs	r0, r0
	...

08006328 <_dtoa_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	ed2d 8b02 	vpush	{d8}
 8006330:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006332:	b091      	sub	sp, #68	; 0x44
 8006334:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006338:	ec59 8b10 	vmov	r8, r9, d0
 800633c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800633e:	9106      	str	r1, [sp, #24]
 8006340:	4606      	mov	r6, r0
 8006342:	9208      	str	r2, [sp, #32]
 8006344:	930c      	str	r3, [sp, #48]	; 0x30
 8006346:	b975      	cbnz	r5, 8006366 <_dtoa_r+0x3e>
 8006348:	2010      	movs	r0, #16
 800634a:	f000 fd5f 	bl	8006e0c <malloc>
 800634e:	4602      	mov	r2, r0
 8006350:	6270      	str	r0, [r6, #36]	; 0x24
 8006352:	b920      	cbnz	r0, 800635e <_dtoa_r+0x36>
 8006354:	4baa      	ldr	r3, [pc, #680]	; (8006600 <_dtoa_r+0x2d8>)
 8006356:	21ea      	movs	r1, #234	; 0xea
 8006358:	48aa      	ldr	r0, [pc, #680]	; (8006604 <_dtoa_r+0x2dc>)
 800635a:	f001 f9e9 	bl	8007730 <__assert_func>
 800635e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006362:	6005      	str	r5, [r0, #0]
 8006364:	60c5      	str	r5, [r0, #12]
 8006366:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	b151      	cbz	r1, 8006382 <_dtoa_r+0x5a>
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	604a      	str	r2, [r1, #4]
 8006370:	2301      	movs	r3, #1
 8006372:	4093      	lsls	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
 8006376:	4630      	mov	r0, r6
 8006378:	f000 fd90 	bl	8006e9c <_Bfree>
 800637c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f1b9 0300 	subs.w	r3, r9, #0
 8006386:	bfbb      	ittet	lt
 8006388:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800638c:	9303      	strlt	r3, [sp, #12]
 800638e:	2300      	movge	r3, #0
 8006390:	2201      	movlt	r2, #1
 8006392:	bfac      	ite	ge
 8006394:	6023      	strge	r3, [r4, #0]
 8006396:	6022      	strlt	r2, [r4, #0]
 8006398:	4b9b      	ldr	r3, [pc, #620]	; (8006608 <_dtoa_r+0x2e0>)
 800639a:	9c03      	ldr	r4, [sp, #12]
 800639c:	43a3      	bics	r3, r4
 800639e:	d11c      	bne.n	80063da <_dtoa_r+0xb2>
 80063a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80063ac:	ea53 0308 	orrs.w	r3, r3, r8
 80063b0:	f000 84fd 	beq.w	8006dae <_dtoa_r+0xa86>
 80063b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063b6:	b963      	cbnz	r3, 80063d2 <_dtoa_r+0xaa>
 80063b8:	4b94      	ldr	r3, [pc, #592]	; (800660c <_dtoa_r+0x2e4>)
 80063ba:	e01f      	b.n	80063fc <_dtoa_r+0xd4>
 80063bc:	4b94      	ldr	r3, [pc, #592]	; (8006610 <_dtoa_r+0x2e8>)
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	3308      	adds	r3, #8
 80063c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	9801      	ldr	r0, [sp, #4]
 80063c8:	b011      	add	sp, #68	; 0x44
 80063ca:	ecbd 8b02 	vpop	{d8}
 80063ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d2:	4b8e      	ldr	r3, [pc, #568]	; (800660c <_dtoa_r+0x2e4>)
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	3303      	adds	r3, #3
 80063d8:	e7f3      	b.n	80063c2 <_dtoa_r+0x9a>
 80063da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80063de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e6:	d10b      	bne.n	8006400 <_dtoa_r+0xd8>
 80063e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ea:	2301      	movs	r3, #1
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 84d9 	beq.w	8006da8 <_dtoa_r+0xa80>
 80063f6:	4887      	ldr	r0, [pc, #540]	; (8006614 <_dtoa_r+0x2ec>)
 80063f8:	6018      	str	r0, [r3, #0]
 80063fa:	1e43      	subs	r3, r0, #1
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	e7e2      	b.n	80063c6 <_dtoa_r+0x9e>
 8006400:	a90f      	add	r1, sp, #60	; 0x3c
 8006402:	aa0e      	add	r2, sp, #56	; 0x38
 8006404:	4630      	mov	r0, r6
 8006406:	eeb0 0b48 	vmov.f64	d0, d8
 800640a:	f001 f82f 	bl	800746c <__d2b>
 800640e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006412:	4605      	mov	r5, r0
 8006414:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006416:	2900      	cmp	r1, #0
 8006418:	d046      	beq.n	80064a8 <_dtoa_r+0x180>
 800641a:	ee18 4a90 	vmov	r4, s17
 800641e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006422:	ec53 2b18 	vmov	r2, r3, d8
 8006426:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800642a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800642e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006432:	2400      	movs	r4, #0
 8006434:	ec43 2b16 	vmov	d6, r2, r3
 8006438:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800643c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80065e8 <_dtoa_r+0x2c0>
 8006440:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006444:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80065f0 <_dtoa_r+0x2c8>
 8006448:	eea7 6b05 	vfma.f64	d6, d7, d5
 800644c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80065f8 <_dtoa_r+0x2d0>
 8006450:	ee07 1a90 	vmov	s15, r1
 8006454:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006458:	eeb0 7b46 	vmov.f64	d7, d6
 800645c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006460:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006464:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646c:	ee16 ba90 	vmov	fp, s13
 8006470:	940a      	str	r4, [sp, #40]	; 0x28
 8006472:	d508      	bpl.n	8006486 <_dtoa_r+0x15e>
 8006474:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006478:	eeb4 6b47 	vcmp.f64	d6, d7
 800647c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006480:	bf18      	it	ne
 8006482:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006486:	f1bb 0f16 	cmp.w	fp, #22
 800648a:	d82f      	bhi.n	80064ec <_dtoa_r+0x1c4>
 800648c:	4b62      	ldr	r3, [pc, #392]	; (8006618 <_dtoa_r+0x2f0>)
 800648e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006492:	ed93 7b00 	vldr	d7, [r3]
 8006496:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649e:	d501      	bpl.n	80064a4 <_dtoa_r+0x17c>
 80064a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064a4:	2300      	movs	r3, #0
 80064a6:	e022      	b.n	80064ee <_dtoa_r+0x1c6>
 80064a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064aa:	4401      	add	r1, r0
 80064ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	bfc1      	itttt	gt
 80064b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80064bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80064c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80064c4:	bfd6      	itet	le
 80064c6:	f1c3 0320 	rsble	r3, r3, #32
 80064ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80064ce:	fa08 f803 	lslle.w	r8, r8, r3
 80064d2:	ee07 8a90 	vmov	s15, r8
 80064d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80064da:	3901      	subs	r1, #1
 80064dc:	ee17 4a90 	vmov	r4, s15
 80064e0:	ec53 2b17 	vmov	r2, r3, d7
 80064e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80064e8:	2401      	movs	r4, #1
 80064ea:	e7a3      	b.n	8006434 <_dtoa_r+0x10c>
 80064ec:	2301      	movs	r3, #1
 80064ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f0:	1a43      	subs	r3, r0, r1
 80064f2:	1e5a      	subs	r2, r3, #1
 80064f4:	bf45      	ittet	mi
 80064f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80064fa:	9304      	strmi	r3, [sp, #16]
 80064fc:	2300      	movpl	r3, #0
 80064fe:	2300      	movmi	r3, #0
 8006500:	9205      	str	r2, [sp, #20]
 8006502:	bf54      	ite	pl
 8006504:	9304      	strpl	r3, [sp, #16]
 8006506:	9305      	strmi	r3, [sp, #20]
 8006508:	f1bb 0f00 	cmp.w	fp, #0
 800650c:	db18      	blt.n	8006540 <_dtoa_r+0x218>
 800650e:	9b05      	ldr	r3, [sp, #20]
 8006510:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006514:	445b      	add	r3, fp
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	2300      	movs	r3, #0
 800651a:	9a06      	ldr	r2, [sp, #24]
 800651c:	2a09      	cmp	r2, #9
 800651e:	d849      	bhi.n	80065b4 <_dtoa_r+0x28c>
 8006520:	2a05      	cmp	r2, #5
 8006522:	bfc4      	itt	gt
 8006524:	3a04      	subgt	r2, #4
 8006526:	9206      	strgt	r2, [sp, #24]
 8006528:	9a06      	ldr	r2, [sp, #24]
 800652a:	f1a2 0202 	sub.w	r2, r2, #2
 800652e:	bfcc      	ite	gt
 8006530:	2400      	movgt	r4, #0
 8006532:	2401      	movle	r4, #1
 8006534:	2a03      	cmp	r2, #3
 8006536:	d848      	bhi.n	80065ca <_dtoa_r+0x2a2>
 8006538:	e8df f002 	tbb	[pc, r2]
 800653c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006540:	9b04      	ldr	r3, [sp, #16]
 8006542:	2200      	movs	r2, #0
 8006544:	eba3 030b 	sub.w	r3, r3, fp
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	9209      	str	r2, [sp, #36]	; 0x24
 800654c:	f1cb 0300 	rsb	r3, fp, #0
 8006550:	e7e3      	b.n	800651a <_dtoa_r+0x1f2>
 8006552:	2200      	movs	r2, #0
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	9a08      	ldr	r2, [sp, #32]
 8006558:	2a00      	cmp	r2, #0
 800655a:	dc39      	bgt.n	80065d0 <_dtoa_r+0x2a8>
 800655c:	f04f 0a01 	mov.w	sl, #1
 8006560:	46d1      	mov	r9, sl
 8006562:	4652      	mov	r2, sl
 8006564:	f8cd a020 	str.w	sl, [sp, #32]
 8006568:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800656a:	2100      	movs	r1, #0
 800656c:	6079      	str	r1, [r7, #4]
 800656e:	2004      	movs	r0, #4
 8006570:	f100 0c14 	add.w	ip, r0, #20
 8006574:	4594      	cmp	ip, r2
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	d92f      	bls.n	80065da <_dtoa_r+0x2b2>
 800657a:	4630      	mov	r0, r6
 800657c:	930d      	str	r3, [sp, #52]	; 0x34
 800657e:	f000 fc4d 	bl	8006e1c <_Balloc>
 8006582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006584:	9001      	str	r0, [sp, #4]
 8006586:	4602      	mov	r2, r0
 8006588:	2800      	cmp	r0, #0
 800658a:	d149      	bne.n	8006620 <_dtoa_r+0x2f8>
 800658c:	4b23      	ldr	r3, [pc, #140]	; (800661c <_dtoa_r+0x2f4>)
 800658e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006592:	e6e1      	b.n	8006358 <_dtoa_r+0x30>
 8006594:	2201      	movs	r2, #1
 8006596:	e7dd      	b.n	8006554 <_dtoa_r+0x22c>
 8006598:	2200      	movs	r2, #0
 800659a:	9207      	str	r2, [sp, #28]
 800659c:	9a08      	ldr	r2, [sp, #32]
 800659e:	eb0b 0a02 	add.w	sl, fp, r2
 80065a2:	f10a 0901 	add.w	r9, sl, #1
 80065a6:	464a      	mov	r2, r9
 80065a8:	2a01      	cmp	r2, #1
 80065aa:	bfb8      	it	lt
 80065ac:	2201      	movlt	r2, #1
 80065ae:	e7db      	b.n	8006568 <_dtoa_r+0x240>
 80065b0:	2201      	movs	r2, #1
 80065b2:	e7f2      	b.n	800659a <_dtoa_r+0x272>
 80065b4:	2401      	movs	r4, #1
 80065b6:	2200      	movs	r2, #0
 80065b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80065bc:	f04f 3aff 	mov.w	sl, #4294967295
 80065c0:	2100      	movs	r1, #0
 80065c2:	46d1      	mov	r9, sl
 80065c4:	2212      	movs	r2, #18
 80065c6:	9108      	str	r1, [sp, #32]
 80065c8:	e7ce      	b.n	8006568 <_dtoa_r+0x240>
 80065ca:	2201      	movs	r2, #1
 80065cc:	9207      	str	r2, [sp, #28]
 80065ce:	e7f5      	b.n	80065bc <_dtoa_r+0x294>
 80065d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80065d4:	46d1      	mov	r9, sl
 80065d6:	4652      	mov	r2, sl
 80065d8:	e7c6      	b.n	8006568 <_dtoa_r+0x240>
 80065da:	3101      	adds	r1, #1
 80065dc:	6079      	str	r1, [r7, #4]
 80065de:	0040      	lsls	r0, r0, #1
 80065e0:	e7c6      	b.n	8006570 <_dtoa_r+0x248>
 80065e2:	bf00      	nop
 80065e4:	f3af 8000 	nop.w
 80065e8:	636f4361 	.word	0x636f4361
 80065ec:	3fd287a7 	.word	0x3fd287a7
 80065f0:	8b60c8b3 	.word	0x8b60c8b3
 80065f4:	3fc68a28 	.word	0x3fc68a28
 80065f8:	509f79fb 	.word	0x509f79fb
 80065fc:	3fd34413 	.word	0x3fd34413
 8006600:	080082d1 	.word	0x080082d1
 8006604:	080082e8 	.word	0x080082e8
 8006608:	7ff00000 	.word	0x7ff00000
 800660c:	080082cd 	.word	0x080082cd
 8006610:	080082c4 	.word	0x080082c4
 8006614:	080082a1 	.word	0x080082a1
 8006618:	080083d8 	.word	0x080083d8
 800661c:	08008343 	.word	0x08008343
 8006620:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006622:	9901      	ldr	r1, [sp, #4]
 8006624:	6011      	str	r1, [r2, #0]
 8006626:	f1b9 0f0e 	cmp.w	r9, #14
 800662a:	d86c      	bhi.n	8006706 <_dtoa_r+0x3de>
 800662c:	2c00      	cmp	r4, #0
 800662e:	d06a      	beq.n	8006706 <_dtoa_r+0x3de>
 8006630:	f1bb 0f00 	cmp.w	fp, #0
 8006634:	f340 80a0 	ble.w	8006778 <_dtoa_r+0x450>
 8006638:	49c1      	ldr	r1, [pc, #772]	; (8006940 <_dtoa_r+0x618>)
 800663a:	f00b 020f 	and.w	r2, fp, #15
 800663e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006642:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006646:	ed92 7b00 	vldr	d7, [r2]
 800664a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800664e:	f000 8087 	beq.w	8006760 <_dtoa_r+0x438>
 8006652:	4abc      	ldr	r2, [pc, #752]	; (8006944 <_dtoa_r+0x61c>)
 8006654:	ed92 6b08 	vldr	d6, [r2, #32]
 8006658:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800665c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006660:	f001 010f 	and.w	r1, r1, #15
 8006664:	2203      	movs	r2, #3
 8006666:	48b7      	ldr	r0, [pc, #732]	; (8006944 <_dtoa_r+0x61c>)
 8006668:	2900      	cmp	r1, #0
 800666a:	d17b      	bne.n	8006764 <_dtoa_r+0x43c>
 800666c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006670:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006674:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800667a:	2900      	cmp	r1, #0
 800667c:	f000 80a2 	beq.w	80067c4 <_dtoa_r+0x49c>
 8006680:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006684:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006688:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006690:	f140 8098 	bpl.w	80067c4 <_dtoa_r+0x49c>
 8006694:	f1b9 0f00 	cmp.w	r9, #0
 8006698:	f000 8094 	beq.w	80067c4 <_dtoa_r+0x49c>
 800669c:	f1ba 0f00 	cmp.w	sl, #0
 80066a0:	dd2f      	ble.n	8006702 <_dtoa_r+0x3da>
 80066a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80066a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80066aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066ae:	f10b 37ff 	add.w	r7, fp, #4294967295
 80066b2:	3201      	adds	r2, #1
 80066b4:	4650      	mov	r0, sl
 80066b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80066ba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80066be:	ee07 2a90 	vmov	s15, r2
 80066c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80066c6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80066ca:	ee15 4a90 	vmov	r4, s11
 80066ce:	ec52 1b15 	vmov	r1, r2, d5
 80066d2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d177      	bne.n	80067ca <_dtoa_r+0x4a2>
 80066da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80066de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80066e2:	ec42 1b17 	vmov	d7, r1, r2
 80066e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ee:	f300 8263 	bgt.w	8006bb8 <_dtoa_r+0x890>
 80066f2:	eeb1 7b47 	vneg.f64	d7, d7
 80066f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	f100 8258 	bmi.w	8006bb2 <_dtoa_r+0x88a>
 8006702:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006708:	2a00      	cmp	r2, #0
 800670a:	f2c0 811d 	blt.w	8006948 <_dtoa_r+0x620>
 800670e:	f1bb 0f0e 	cmp.w	fp, #14
 8006712:	f300 8119 	bgt.w	8006948 <_dtoa_r+0x620>
 8006716:	4b8a      	ldr	r3, [pc, #552]	; (8006940 <_dtoa_r+0x618>)
 8006718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800671c:	ed93 6b00 	vldr	d6, [r3]
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	f280 80b7 	bge.w	8006896 <_dtoa_r+0x56e>
 8006728:	f1b9 0f00 	cmp.w	r9, #0
 800672c:	f300 80b3 	bgt.w	8006896 <_dtoa_r+0x56e>
 8006730:	f040 823f 	bne.w	8006bb2 <_dtoa_r+0x88a>
 8006734:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006738:	ee26 6b07 	vmul.f64	d6, d6, d7
 800673c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006740:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006748:	464c      	mov	r4, r9
 800674a:	464f      	mov	r7, r9
 800674c:	f280 8215 	bge.w	8006b7a <_dtoa_r+0x852>
 8006750:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006754:	2331      	movs	r3, #49	; 0x31
 8006756:	f808 3b01 	strb.w	r3, [r8], #1
 800675a:	f10b 0b01 	add.w	fp, fp, #1
 800675e:	e211      	b.n	8006b84 <_dtoa_r+0x85c>
 8006760:	2202      	movs	r2, #2
 8006762:	e780      	b.n	8006666 <_dtoa_r+0x33e>
 8006764:	07cc      	lsls	r4, r1, #31
 8006766:	d504      	bpl.n	8006772 <_dtoa_r+0x44a>
 8006768:	ed90 6b00 	vldr	d6, [r0]
 800676c:	3201      	adds	r2, #1
 800676e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006772:	1049      	asrs	r1, r1, #1
 8006774:	3008      	adds	r0, #8
 8006776:	e777      	b.n	8006668 <_dtoa_r+0x340>
 8006778:	d022      	beq.n	80067c0 <_dtoa_r+0x498>
 800677a:	f1cb 0100 	rsb	r1, fp, #0
 800677e:	4a70      	ldr	r2, [pc, #448]	; (8006940 <_dtoa_r+0x618>)
 8006780:	f001 000f 	and.w	r0, r1, #15
 8006784:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006788:	ed92 7b00 	vldr	d7, [r2]
 800678c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006794:	486b      	ldr	r0, [pc, #428]	; (8006944 <_dtoa_r+0x61c>)
 8006796:	1109      	asrs	r1, r1, #4
 8006798:	2400      	movs	r4, #0
 800679a:	2202      	movs	r2, #2
 800679c:	b929      	cbnz	r1, 80067aa <_dtoa_r+0x482>
 800679e:	2c00      	cmp	r4, #0
 80067a0:	f43f af6a 	beq.w	8006678 <_dtoa_r+0x350>
 80067a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80067a8:	e766      	b.n	8006678 <_dtoa_r+0x350>
 80067aa:	07cf      	lsls	r7, r1, #31
 80067ac:	d505      	bpl.n	80067ba <_dtoa_r+0x492>
 80067ae:	ed90 6b00 	vldr	d6, [r0]
 80067b2:	3201      	adds	r2, #1
 80067b4:	2401      	movs	r4, #1
 80067b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067ba:	1049      	asrs	r1, r1, #1
 80067bc:	3008      	adds	r0, #8
 80067be:	e7ed      	b.n	800679c <_dtoa_r+0x474>
 80067c0:	2202      	movs	r2, #2
 80067c2:	e759      	b.n	8006678 <_dtoa_r+0x350>
 80067c4:	465f      	mov	r7, fp
 80067c6:	4648      	mov	r0, r9
 80067c8:	e775      	b.n	80066b6 <_dtoa_r+0x38e>
 80067ca:	ec42 1b17 	vmov	d7, r1, r2
 80067ce:	4a5c      	ldr	r2, [pc, #368]	; (8006940 <_dtoa_r+0x618>)
 80067d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80067d4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80067d8:	9a01      	ldr	r2, [sp, #4]
 80067da:	1814      	adds	r4, r2, r0
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	b352      	cbz	r2, 8006836 <_dtoa_r+0x50e>
 80067e0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80067e4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80067e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067ec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80067f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80067f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80067f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80067fc:	ee14 2a90 	vmov	r2, s9
 8006800:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006804:	3230      	adds	r2, #48	; 0x30
 8006806:	ee36 6b45 	vsub.f64	d6, d6, d5
 800680a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800680e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006812:	f808 2b01 	strb.w	r2, [r8], #1
 8006816:	d439      	bmi.n	800688c <_dtoa_r+0x564>
 8006818:	ee32 5b46 	vsub.f64	d5, d2, d6
 800681c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006824:	d472      	bmi.n	800690c <_dtoa_r+0x5e4>
 8006826:	45a0      	cmp	r8, r4
 8006828:	f43f af6b 	beq.w	8006702 <_dtoa_r+0x3da>
 800682c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006830:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006834:	e7e0      	b.n	80067f8 <_dtoa_r+0x4d0>
 8006836:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800683a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800683e:	4621      	mov	r1, r4
 8006840:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006844:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006848:	ee14 2a90 	vmov	r2, s9
 800684c:	3230      	adds	r2, #48	; 0x30
 800684e:	f808 2b01 	strb.w	r2, [r8], #1
 8006852:	45a0      	cmp	r8, r4
 8006854:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006858:	ee36 6b45 	vsub.f64	d6, d6, d5
 800685c:	d118      	bne.n	8006890 <_dtoa_r+0x568>
 800685e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006862:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006866:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800686a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686e:	dc4d      	bgt.n	800690c <_dtoa_r+0x5e4>
 8006870:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006874:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	f57f af41 	bpl.w	8006702 <_dtoa_r+0x3da>
 8006880:	4688      	mov	r8, r1
 8006882:	3901      	subs	r1, #1
 8006884:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006888:	2b30      	cmp	r3, #48	; 0x30
 800688a:	d0f9      	beq.n	8006880 <_dtoa_r+0x558>
 800688c:	46bb      	mov	fp, r7
 800688e:	e02a      	b.n	80068e6 <_dtoa_r+0x5be>
 8006890:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006894:	e7d6      	b.n	8006844 <_dtoa_r+0x51c>
 8006896:	ed9d 7b02 	vldr	d7, [sp, #8]
 800689a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800689e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80068a2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80068a6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80068aa:	ee15 3a10 	vmov	r3, s10
 80068ae:	3330      	adds	r3, #48	; 0x30
 80068b0:	f808 3b01 	strb.w	r3, [r8], #1
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	eba8 0303 	sub.w	r3, r8, r3
 80068ba:	4599      	cmp	r9, r3
 80068bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80068c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80068c4:	d133      	bne.n	800692e <_dtoa_r+0x606>
 80068c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80068ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	dc1a      	bgt.n	800690a <_dtoa_r+0x5e2>
 80068d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80068d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068dc:	d103      	bne.n	80068e6 <_dtoa_r+0x5be>
 80068de:	ee15 3a10 	vmov	r3, s10
 80068e2:	07d9      	lsls	r1, r3, #31
 80068e4:	d411      	bmi.n	800690a <_dtoa_r+0x5e2>
 80068e6:	4629      	mov	r1, r5
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 fad7 	bl	8006e9c <_Bfree>
 80068ee:	2300      	movs	r3, #0
 80068f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068f2:	f888 3000 	strb.w	r3, [r8]
 80068f6:	f10b 0301 	add.w	r3, fp, #1
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f43f ad61 	beq.w	80063c6 <_dtoa_r+0x9e>
 8006904:	f8c3 8000 	str.w	r8, [r3]
 8006908:	e55d      	b.n	80063c6 <_dtoa_r+0x9e>
 800690a:	465f      	mov	r7, fp
 800690c:	4643      	mov	r3, r8
 800690e:	4698      	mov	r8, r3
 8006910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006914:	2a39      	cmp	r2, #57	; 0x39
 8006916:	d106      	bne.n	8006926 <_dtoa_r+0x5fe>
 8006918:	9a01      	ldr	r2, [sp, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d1f7      	bne.n	800690e <_dtoa_r+0x5e6>
 800691e:	9901      	ldr	r1, [sp, #4]
 8006920:	2230      	movs	r2, #48	; 0x30
 8006922:	3701      	adds	r7, #1
 8006924:	700a      	strb	r2, [r1, #0]
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	3201      	adds	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	e7ae      	b.n	800688c <_dtoa_r+0x564>
 800692e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006932:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693a:	d1b2      	bne.n	80068a2 <_dtoa_r+0x57a>
 800693c:	e7d3      	b.n	80068e6 <_dtoa_r+0x5be>
 800693e:	bf00      	nop
 8006940:	080083d8 	.word	0x080083d8
 8006944:	080083b0 	.word	0x080083b0
 8006948:	9907      	ldr	r1, [sp, #28]
 800694a:	2900      	cmp	r1, #0
 800694c:	f000 80d0 	beq.w	8006af0 <_dtoa_r+0x7c8>
 8006950:	9906      	ldr	r1, [sp, #24]
 8006952:	2901      	cmp	r1, #1
 8006954:	f300 80b4 	bgt.w	8006ac0 <_dtoa_r+0x798>
 8006958:	990a      	ldr	r1, [sp, #40]	; 0x28
 800695a:	2900      	cmp	r1, #0
 800695c:	f000 80ac 	beq.w	8006ab8 <_dtoa_r+0x790>
 8006960:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006964:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006968:	461c      	mov	r4, r3
 800696a:	930a      	str	r3, [sp, #40]	; 0x28
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	4413      	add	r3, r2
 8006970:	9304      	str	r3, [sp, #16]
 8006972:	9b05      	ldr	r3, [sp, #20]
 8006974:	2101      	movs	r1, #1
 8006976:	4413      	add	r3, r2
 8006978:	4630      	mov	r0, r6
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	f000 fb46 	bl	800700c <__i2b>
 8006980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006982:	4607      	mov	r7, r0
 8006984:	f1b8 0f00 	cmp.w	r8, #0
 8006988:	dd0d      	ble.n	80069a6 <_dtoa_r+0x67e>
 800698a:	9a05      	ldr	r2, [sp, #20]
 800698c:	2a00      	cmp	r2, #0
 800698e:	dd0a      	ble.n	80069a6 <_dtoa_r+0x67e>
 8006990:	4542      	cmp	r2, r8
 8006992:	9904      	ldr	r1, [sp, #16]
 8006994:	bfa8      	it	ge
 8006996:	4642      	movge	r2, r8
 8006998:	1a89      	subs	r1, r1, r2
 800699a:	9104      	str	r1, [sp, #16]
 800699c:	9905      	ldr	r1, [sp, #20]
 800699e:	eba8 0802 	sub.w	r8, r8, r2
 80069a2:	1a8a      	subs	r2, r1, r2
 80069a4:	9205      	str	r2, [sp, #20]
 80069a6:	b303      	cbz	r3, 80069ea <_dtoa_r+0x6c2>
 80069a8:	9a07      	ldr	r2, [sp, #28]
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	f000 80a5 	beq.w	8006afa <_dtoa_r+0x7d2>
 80069b0:	2c00      	cmp	r4, #0
 80069b2:	dd13      	ble.n	80069dc <_dtoa_r+0x6b4>
 80069b4:	4639      	mov	r1, r7
 80069b6:	4622      	mov	r2, r4
 80069b8:	4630      	mov	r0, r6
 80069ba:	930d      	str	r3, [sp, #52]	; 0x34
 80069bc:	f000 fbe6 	bl	800718c <__pow5mult>
 80069c0:	462a      	mov	r2, r5
 80069c2:	4601      	mov	r1, r0
 80069c4:	4607      	mov	r7, r0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 fb36 	bl	8007038 <__multiply>
 80069cc:	4629      	mov	r1, r5
 80069ce:	900a      	str	r0, [sp, #40]	; 0x28
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 fa63 	bl	8006e9c <_Bfree>
 80069d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069da:	4615      	mov	r5, r2
 80069dc:	1b1a      	subs	r2, r3, r4
 80069de:	d004      	beq.n	80069ea <_dtoa_r+0x6c2>
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f000 fbd2 	bl	800718c <__pow5mult>
 80069e8:	4605      	mov	r5, r0
 80069ea:	2101      	movs	r1, #1
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 fb0d 	bl	800700c <__i2b>
 80069f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	4604      	mov	r4, r0
 80069f8:	f340 8081 	ble.w	8006afe <_dtoa_r+0x7d6>
 80069fc:	461a      	mov	r2, r3
 80069fe:	4601      	mov	r1, r0
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 fbc3 	bl	800718c <__pow5mult>
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	dd7a      	ble.n	8006b04 <_dtoa_r+0x7dc>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	930a      	str	r3, [sp, #40]	; 0x28
 8006a12:	6922      	ldr	r2, [r4, #16]
 8006a14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006a18:	6910      	ldr	r0, [r2, #16]
 8006a1a:	f000 faa7 	bl	8006f6c <__hi0bits>
 8006a1e:	f1c0 0020 	rsb	r0, r0, #32
 8006a22:	9b05      	ldr	r3, [sp, #20]
 8006a24:	4418      	add	r0, r3
 8006a26:	f010 001f 	ands.w	r0, r0, #31
 8006a2a:	f000 808c 	beq.w	8006b46 <_dtoa_r+0x81e>
 8006a2e:	f1c0 0220 	rsb	r2, r0, #32
 8006a32:	2a04      	cmp	r2, #4
 8006a34:	f340 8085 	ble.w	8006b42 <_dtoa_r+0x81a>
 8006a38:	f1c0 001c 	rsb	r0, r0, #28
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	4403      	add	r3, r0
 8006a40:	9304      	str	r3, [sp, #16]
 8006a42:	9b05      	ldr	r3, [sp, #20]
 8006a44:	4403      	add	r3, r0
 8006a46:	4480      	add	r8, r0
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	9b04      	ldr	r3, [sp, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dd05      	ble.n	8006a5c <_dtoa_r+0x734>
 8006a50:	4629      	mov	r1, r5
 8006a52:	461a      	mov	r2, r3
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 fbf3 	bl	8007240 <__lshift>
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	9b05      	ldr	r3, [sp, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dd05      	ble.n	8006a6e <_dtoa_r+0x746>
 8006a62:	4621      	mov	r1, r4
 8006a64:	461a      	mov	r2, r3
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 fbea 	bl	8007240 <__lshift>
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d06a      	beq.n	8006b4a <_dtoa_r+0x822>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fc52 	bl	8007320 <__mcmp>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	da64      	bge.n	8006b4a <_dtoa_r+0x822>
 8006a80:	2300      	movs	r3, #0
 8006a82:	4629      	mov	r1, r5
 8006a84:	220a      	movs	r2, #10
 8006a86:	4630      	mov	r0, r6
 8006a88:	f000 fa2a 	bl	8006ee0 <__multadd>
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a92:	4605      	mov	r5, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8191 	beq.w	8006dbc <_dtoa_r+0xa94>
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	220a      	movs	r2, #10
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 fa1d 	bl	8006ee0 <__multadd>
 8006aa6:	f1ba 0f00 	cmp.w	sl, #0
 8006aaa:	4607      	mov	r7, r0
 8006aac:	f300 808d 	bgt.w	8006bca <_dtoa_r+0x8a2>
 8006ab0:	9b06      	ldr	r3, [sp, #24]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	dc50      	bgt.n	8006b58 <_dtoa_r+0x830>
 8006ab6:	e088      	b.n	8006bca <_dtoa_r+0x8a2>
 8006ab8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006abe:	e751      	b.n	8006964 <_dtoa_r+0x63c>
 8006ac0:	f109 34ff 	add.w	r4, r9, #4294967295
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	bfbf      	itttt	lt
 8006ac8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006aca:	1ae3      	sublt	r3, r4, r3
 8006acc:	18d2      	addlt	r2, r2, r3
 8006ace:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006ad0:	bfb6      	itet	lt
 8006ad2:	4623      	movlt	r3, r4
 8006ad4:	1b1c      	subge	r4, r3, r4
 8006ad6:	2400      	movlt	r4, #0
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
 8006adc:	bfb5      	itete	lt
 8006ade:	9a04      	ldrlt	r2, [sp, #16]
 8006ae0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006ae4:	eba2 0809 	sublt.w	r8, r2, r9
 8006ae8:	464a      	movge	r2, r9
 8006aea:	bfb8      	it	lt
 8006aec:	2200      	movlt	r2, #0
 8006aee:	e73c      	b.n	800696a <_dtoa_r+0x642>
 8006af0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006af4:	9f07      	ldr	r7, [sp, #28]
 8006af6:	461c      	mov	r4, r3
 8006af8:	e744      	b.n	8006984 <_dtoa_r+0x65c>
 8006afa:	461a      	mov	r2, r3
 8006afc:	e770      	b.n	80069e0 <_dtoa_r+0x6b8>
 8006afe:	9b06      	ldr	r3, [sp, #24]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	dc18      	bgt.n	8006b36 <_dtoa_r+0x80e>
 8006b04:	9b02      	ldr	r3, [sp, #8]
 8006b06:	b9b3      	cbnz	r3, 8006b36 <_dtoa_r+0x80e>
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006b0e:	b9a2      	cbnz	r2, 8006b3a <_dtoa_r+0x812>
 8006b10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b14:	0d12      	lsrs	r2, r2, #20
 8006b16:	0512      	lsls	r2, r2, #20
 8006b18:	b18a      	cbz	r2, 8006b3e <_dtoa_r+0x816>
 8006b1a:	9b04      	ldr	r3, [sp, #16]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	9b05      	ldr	r3, [sp, #20]
 8006b22:	3301      	adds	r3, #1
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	2301      	movs	r3, #1
 8006b28:	930a      	str	r3, [sp, #40]	; 0x28
 8006b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f47f af70 	bne.w	8006a12 <_dtoa_r+0x6ea>
 8006b32:	2001      	movs	r0, #1
 8006b34:	e775      	b.n	8006a22 <_dtoa_r+0x6fa>
 8006b36:	2300      	movs	r3, #0
 8006b38:	e7f6      	b.n	8006b28 <_dtoa_r+0x800>
 8006b3a:	9b02      	ldr	r3, [sp, #8]
 8006b3c:	e7f4      	b.n	8006b28 <_dtoa_r+0x800>
 8006b3e:	920a      	str	r2, [sp, #40]	; 0x28
 8006b40:	e7f3      	b.n	8006b2a <_dtoa_r+0x802>
 8006b42:	d082      	beq.n	8006a4a <_dtoa_r+0x722>
 8006b44:	4610      	mov	r0, r2
 8006b46:	301c      	adds	r0, #28
 8006b48:	e778      	b.n	8006a3c <_dtoa_r+0x714>
 8006b4a:	f1b9 0f00 	cmp.w	r9, #0
 8006b4e:	dc37      	bgt.n	8006bc0 <_dtoa_r+0x898>
 8006b50:	9b06      	ldr	r3, [sp, #24]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	dd34      	ble.n	8006bc0 <_dtoa_r+0x898>
 8006b56:	46ca      	mov	sl, r9
 8006b58:	f1ba 0f00 	cmp.w	sl, #0
 8006b5c:	d10d      	bne.n	8006b7a <_dtoa_r+0x852>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4653      	mov	r3, sl
 8006b62:	2205      	movs	r2, #5
 8006b64:	4630      	mov	r0, r6
 8006b66:	f000 f9bb 	bl	8006ee0 <__multadd>
 8006b6a:	4601      	mov	r1, r0
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 fbd6 	bl	8007320 <__mcmp>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f73f adeb 	bgt.w	8006750 <_dtoa_r+0x428>
 8006b7a:	9b08      	ldr	r3, [sp, #32]
 8006b7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b80:	ea6f 0b03 	mvn.w	fp, r3
 8006b84:	f04f 0900 	mov.w	r9, #0
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f986 	bl	8006e9c <_Bfree>
 8006b90:	2f00      	cmp	r7, #0
 8006b92:	f43f aea8 	beq.w	80068e6 <_dtoa_r+0x5be>
 8006b96:	f1b9 0f00 	cmp.w	r9, #0
 8006b9a:	d005      	beq.n	8006ba8 <_dtoa_r+0x880>
 8006b9c:	45b9      	cmp	r9, r7
 8006b9e:	d003      	beq.n	8006ba8 <_dtoa_r+0x880>
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 f97a 	bl	8006e9c <_Bfree>
 8006ba8:	4639      	mov	r1, r7
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 f976 	bl	8006e9c <_Bfree>
 8006bb0:	e699      	b.n	80068e6 <_dtoa_r+0x5be>
 8006bb2:	2400      	movs	r4, #0
 8006bb4:	4627      	mov	r7, r4
 8006bb6:	e7e0      	b.n	8006b7a <_dtoa_r+0x852>
 8006bb8:	46bb      	mov	fp, r7
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	e5c7      	b.n	8006750 <_dtoa_r+0x428>
 8006bc0:	9b07      	ldr	r3, [sp, #28]
 8006bc2:	46ca      	mov	sl, r9
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8100 	beq.w	8006dca <_dtoa_r+0xaa2>
 8006bca:	f1b8 0f00 	cmp.w	r8, #0
 8006bce:	dd05      	ble.n	8006bdc <_dtoa_r+0x8b4>
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f000 fb33 	bl	8007240 <__lshift>
 8006bda:	4607      	mov	r7, r0
 8006bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d05d      	beq.n	8006c9e <_dtoa_r+0x976>
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f919 	bl	8006e1c <_Balloc>
 8006bea:	4680      	mov	r8, r0
 8006bec:	b928      	cbnz	r0, 8006bfa <_dtoa_r+0x8d2>
 8006bee:	4b82      	ldr	r3, [pc, #520]	; (8006df8 <_dtoa_r+0xad0>)
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bf6:	f7ff bbaf 	b.w	8006358 <_dtoa_r+0x30>
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	3202      	adds	r2, #2
 8006bfe:	0092      	lsls	r2, r2, #2
 8006c00:	f107 010c 	add.w	r1, r7, #12
 8006c04:	300c      	adds	r0, #12
 8006c06:	f7fe fea9 	bl	800595c <memcpy>
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4641      	mov	r1, r8
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f000 fb16 	bl	8007240 <__lshift>
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	4453      	add	r3, sl
 8006c1e:	9308      	str	r3, [sp, #32]
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	46b9      	mov	r9, r7
 8006c28:	9307      	str	r3, [sp, #28]
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	9b04      	ldr	r3, [sp, #16]
 8006c2e:	4621      	mov	r1, r4
 8006c30:	3b01      	subs	r3, #1
 8006c32:	4628      	mov	r0, r5
 8006c34:	9302      	str	r3, [sp, #8]
 8006c36:	f7ff fae9 	bl	800620c <quorem>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	3330      	adds	r3, #48	; 0x30
 8006c3e:	9005      	str	r0, [sp, #20]
 8006c40:	4649      	mov	r1, r9
 8006c42:	4628      	mov	r0, r5
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	f000 fb6b 	bl	8007320 <__mcmp>
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 fb81 	bl	8007358 <__mdiff>
 8006c56:	68c2      	ldr	r2, [r0, #12]
 8006c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	bb0a      	cbnz	r2, 8006ca2 <_dtoa_r+0x97a>
 8006c5e:	4601      	mov	r1, r0
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 fb5d 	bl	8007320 <__mcmp>
 8006c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006c72:	f000 f913 	bl	8006e9c <_Bfree>
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c7a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006c7e:	ea43 0102 	orr.w	r1, r3, r2
 8006c82:	9b07      	ldr	r3, [sp, #28]
 8006c84:	430b      	orrs	r3, r1
 8006c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c88:	d10d      	bne.n	8006ca6 <_dtoa_r+0x97e>
 8006c8a:	2b39      	cmp	r3, #57	; 0x39
 8006c8c:	d029      	beq.n	8006ce2 <_dtoa_r+0x9ba>
 8006c8e:	f1ba 0f00 	cmp.w	sl, #0
 8006c92:	dd01      	ble.n	8006c98 <_dtoa_r+0x970>
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	3331      	adds	r3, #49	; 0x31
 8006c98:	9a02      	ldr	r2, [sp, #8]
 8006c9a:	7013      	strb	r3, [r2, #0]
 8006c9c:	e774      	b.n	8006b88 <_dtoa_r+0x860>
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	e7b8      	b.n	8006c14 <_dtoa_r+0x8ec>
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	e7e1      	b.n	8006c6a <_dtoa_r+0x942>
 8006ca6:	f1ba 0f00 	cmp.w	sl, #0
 8006caa:	db06      	blt.n	8006cba <_dtoa_r+0x992>
 8006cac:	9906      	ldr	r1, [sp, #24]
 8006cae:	ea41 0a0a 	orr.w	sl, r1, sl
 8006cb2:	9907      	ldr	r1, [sp, #28]
 8006cb4:	ea5a 0101 	orrs.w	r1, sl, r1
 8006cb8:	d120      	bne.n	8006cfc <_dtoa_r+0x9d4>
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	ddec      	ble.n	8006c98 <_dtoa_r+0x970>
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	f000 fabb 	bl	8007240 <__lshift>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4605      	mov	r5, r0
 8006cce:	f000 fb27 	bl	8007320 <__mcmp>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	dc02      	bgt.n	8006cde <_dtoa_r+0x9b6>
 8006cd8:	d1de      	bne.n	8006c98 <_dtoa_r+0x970>
 8006cda:	07da      	lsls	r2, r3, #31
 8006cdc:	d5dc      	bpl.n	8006c98 <_dtoa_r+0x970>
 8006cde:	2b39      	cmp	r3, #57	; 0x39
 8006ce0:	d1d8      	bne.n	8006c94 <_dtoa_r+0x96c>
 8006ce2:	9a02      	ldr	r2, [sp, #8]
 8006ce4:	2339      	movs	r3, #57	; 0x39
 8006ce6:	7013      	strb	r3, [r2, #0]
 8006ce8:	4643      	mov	r3, r8
 8006cea:	4698      	mov	r8, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006cf2:	2a39      	cmp	r2, #57	; 0x39
 8006cf4:	d051      	beq.n	8006d9a <_dtoa_r+0xa72>
 8006cf6:	3201      	adds	r2, #1
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e745      	b.n	8006b88 <_dtoa_r+0x860>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	dd03      	ble.n	8006d08 <_dtoa_r+0x9e0>
 8006d00:	2b39      	cmp	r3, #57	; 0x39
 8006d02:	d0ee      	beq.n	8006ce2 <_dtoa_r+0x9ba>
 8006d04:	3301      	adds	r3, #1
 8006d06:	e7c7      	b.n	8006c98 <_dtoa_r+0x970>
 8006d08:	9a04      	ldr	r2, [sp, #16]
 8006d0a:	9908      	ldr	r1, [sp, #32]
 8006d0c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d10:	428a      	cmp	r2, r1
 8006d12:	d02b      	beq.n	8006d6c <_dtoa_r+0xa44>
 8006d14:	4629      	mov	r1, r5
 8006d16:	2300      	movs	r3, #0
 8006d18:	220a      	movs	r2, #10
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f000 f8e0 	bl	8006ee0 <__multadd>
 8006d20:	45b9      	cmp	r9, r7
 8006d22:	4605      	mov	r5, r0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	f04f 020a 	mov.w	r2, #10
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4630      	mov	r0, r6
 8006d30:	d107      	bne.n	8006d42 <_dtoa_r+0xa1a>
 8006d32:	f000 f8d5 	bl	8006ee0 <__multadd>
 8006d36:	4681      	mov	r9, r0
 8006d38:	4607      	mov	r7, r0
 8006d3a:	9b04      	ldr	r3, [sp, #16]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	9304      	str	r3, [sp, #16]
 8006d40:	e774      	b.n	8006c2c <_dtoa_r+0x904>
 8006d42:	f000 f8cd 	bl	8006ee0 <__multadd>
 8006d46:	4639      	mov	r1, r7
 8006d48:	4681      	mov	r9, r0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	220a      	movs	r2, #10
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f000 f8c6 	bl	8006ee0 <__multadd>
 8006d54:	4607      	mov	r7, r0
 8006d56:	e7f0      	b.n	8006d3a <_dtoa_r+0xa12>
 8006d58:	f1ba 0f00 	cmp.w	sl, #0
 8006d5c:	9a01      	ldr	r2, [sp, #4]
 8006d5e:	bfcc      	ite	gt
 8006d60:	46d0      	movgt	r8, sl
 8006d62:	f04f 0801 	movle.w	r8, #1
 8006d66:	4490      	add	r8, r2
 8006d68:	f04f 0900 	mov.w	r9, #0
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	2201      	movs	r2, #1
 8006d70:	4630      	mov	r0, r6
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	f000 fa64 	bl	8007240 <__lshift>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	f000 fad0 	bl	8007320 <__mcmp>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	dcb1      	bgt.n	8006ce8 <_dtoa_r+0x9c0>
 8006d84:	d102      	bne.n	8006d8c <_dtoa_r+0xa64>
 8006d86:	9b02      	ldr	r3, [sp, #8]
 8006d88:	07db      	lsls	r3, r3, #31
 8006d8a:	d4ad      	bmi.n	8006ce8 <_dtoa_r+0x9c0>
 8006d8c:	4643      	mov	r3, r8
 8006d8e:	4698      	mov	r8, r3
 8006d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d94:	2a30      	cmp	r2, #48	; 0x30
 8006d96:	d0fa      	beq.n	8006d8e <_dtoa_r+0xa66>
 8006d98:	e6f6      	b.n	8006b88 <_dtoa_r+0x860>
 8006d9a:	9a01      	ldr	r2, [sp, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d1a4      	bne.n	8006cea <_dtoa_r+0x9c2>
 8006da0:	f10b 0b01 	add.w	fp, fp, #1
 8006da4:	2331      	movs	r3, #49	; 0x31
 8006da6:	e778      	b.n	8006c9a <_dtoa_r+0x972>
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <_dtoa_r+0xad4>)
 8006daa:	f7ff bb27 	b.w	80063fc <_dtoa_r+0xd4>
 8006dae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f ab03 	bne.w	80063bc <_dtoa_r+0x94>
 8006db6:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <_dtoa_r+0xad8>)
 8006db8:	f7ff bb20 	b.w	80063fc <_dtoa_r+0xd4>
 8006dbc:	f1ba 0f00 	cmp.w	sl, #0
 8006dc0:	dc03      	bgt.n	8006dca <_dtoa_r+0xaa2>
 8006dc2:	9b06      	ldr	r3, [sp, #24]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	f73f aec7 	bgt.w	8006b58 <_dtoa_r+0x830>
 8006dca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f7ff fa1b 	bl	800620c <quorem>
 8006dd6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006dda:	f808 3b01 	strb.w	r3, [r8], #1
 8006dde:	9a01      	ldr	r2, [sp, #4]
 8006de0:	eba8 0202 	sub.w	r2, r8, r2
 8006de4:	4592      	cmp	sl, r2
 8006de6:	ddb7      	ble.n	8006d58 <_dtoa_r+0xa30>
 8006de8:	4629      	mov	r1, r5
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f876 	bl	8006ee0 <__multadd>
 8006df4:	4605      	mov	r5, r0
 8006df6:	e7ea      	b.n	8006dce <_dtoa_r+0xaa6>
 8006df8:	08008343 	.word	0x08008343
 8006dfc:	080082a0 	.word	0x080082a0
 8006e00:	080082c4 	.word	0x080082c4

08006e04 <_localeconv_r>:
 8006e04:	4800      	ldr	r0, [pc, #0]	; (8006e08 <_localeconv_r+0x4>)
 8006e06:	4770      	bx	lr
 8006e08:	20000160 	.word	0x20000160

08006e0c <malloc>:
 8006e0c:	4b02      	ldr	r3, [pc, #8]	; (8006e18 <malloc+0xc>)
 8006e0e:	4601      	mov	r1, r0
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f000 bc09 	b.w	8007628 <_malloc_r>
 8006e16:	bf00      	nop
 8006e18:	2000000c 	.word	0x2000000c

08006e1c <_Balloc>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	b976      	cbnz	r6, 8006e44 <_Balloc+0x28>
 8006e26:	2010      	movs	r0, #16
 8006e28:	f7ff fff0 	bl	8006e0c <malloc>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e30:	b920      	cbnz	r0, 8006e3c <_Balloc+0x20>
 8006e32:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <_Balloc+0x78>)
 8006e34:	4818      	ldr	r0, [pc, #96]	; (8006e98 <_Balloc+0x7c>)
 8006e36:	2166      	movs	r1, #102	; 0x66
 8006e38:	f000 fc7a 	bl	8007730 <__assert_func>
 8006e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e40:	6006      	str	r6, [r0, #0]
 8006e42:	60c6      	str	r6, [r0, #12]
 8006e44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e46:	68f3      	ldr	r3, [r6, #12]
 8006e48:	b183      	cbz	r3, 8006e6c <_Balloc+0x50>
 8006e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e52:	b9b8      	cbnz	r0, 8006e84 <_Balloc+0x68>
 8006e54:	2101      	movs	r1, #1
 8006e56:	fa01 f605 	lsl.w	r6, r1, r5
 8006e5a:	1d72      	adds	r2, r6, #5
 8006e5c:	0092      	lsls	r2, r2, #2
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 fb60 	bl	8007524 <_calloc_r>
 8006e64:	b160      	cbz	r0, 8006e80 <_Balloc+0x64>
 8006e66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e6a:	e00e      	b.n	8006e8a <_Balloc+0x6e>
 8006e6c:	2221      	movs	r2, #33	; 0x21
 8006e6e:	2104      	movs	r1, #4
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fb57 	bl	8007524 <_calloc_r>
 8006e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e78:	60f0      	str	r0, [r6, #12]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e4      	bne.n	8006e4a <_Balloc+0x2e>
 8006e80:	2000      	movs	r0, #0
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	6802      	ldr	r2, [r0, #0]
 8006e86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e90:	e7f7      	b.n	8006e82 <_Balloc+0x66>
 8006e92:	bf00      	nop
 8006e94:	080082d1 	.word	0x080082d1
 8006e98:	08008354 	.word	0x08008354

08006e9c <_Bfree>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ea0:	4605      	mov	r5, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	b976      	cbnz	r6, 8006ec4 <_Bfree+0x28>
 8006ea6:	2010      	movs	r0, #16
 8006ea8:	f7ff ffb0 	bl	8006e0c <malloc>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6268      	str	r0, [r5, #36]	; 0x24
 8006eb0:	b920      	cbnz	r0, 8006ebc <_Bfree+0x20>
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <_Bfree+0x3c>)
 8006eb4:	4809      	ldr	r0, [pc, #36]	; (8006edc <_Bfree+0x40>)
 8006eb6:	218a      	movs	r1, #138	; 0x8a
 8006eb8:	f000 fc3a 	bl	8007730 <__assert_func>
 8006ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ec0:	6006      	str	r6, [r0, #0]
 8006ec2:	60c6      	str	r6, [r0, #12]
 8006ec4:	b13c      	cbz	r4, 8006ed6 <_Bfree+0x3a>
 8006ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ec8:	6862      	ldr	r2, [r4, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ed0:	6021      	str	r1, [r4, #0]
 8006ed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	080082d1 	.word	0x080082d1
 8006edc:	08008354 	.word	0x08008354

08006ee0 <__multadd>:
 8006ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee4:	690d      	ldr	r5, [r1, #16]
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	461e      	mov	r6, r3
 8006eec:	f101 0c14 	add.w	ip, r1, #20
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f8dc 3000 	ldr.w	r3, [ip]
 8006ef6:	b299      	uxth	r1, r3
 8006ef8:	fb02 6101 	mla	r1, r2, r1, r6
 8006efc:	0c1e      	lsrs	r6, r3, #16
 8006efe:	0c0b      	lsrs	r3, r1, #16
 8006f00:	fb02 3306 	mla	r3, r2, r6, r3
 8006f04:	b289      	uxth	r1, r1
 8006f06:	3001      	adds	r0, #1
 8006f08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f0c:	4285      	cmp	r5, r0
 8006f0e:	f84c 1b04 	str.w	r1, [ip], #4
 8006f12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f16:	dcec      	bgt.n	8006ef2 <__multadd+0x12>
 8006f18:	b30e      	cbz	r6, 8006f5e <__multadd+0x7e>
 8006f1a:	68a3      	ldr	r3, [r4, #8]
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dc19      	bgt.n	8006f54 <__multadd+0x74>
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4638      	mov	r0, r7
 8006f24:	3101      	adds	r1, #1
 8006f26:	f7ff ff79 	bl	8006e1c <_Balloc>
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	b928      	cbnz	r0, 8006f3a <__multadd+0x5a>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <__multadd+0x84>)
 8006f32:	480d      	ldr	r0, [pc, #52]	; (8006f68 <__multadd+0x88>)
 8006f34:	21b5      	movs	r1, #181	; 0xb5
 8006f36:	f000 fbfb 	bl	8007730 <__assert_func>
 8006f3a:	6922      	ldr	r2, [r4, #16]
 8006f3c:	3202      	adds	r2, #2
 8006f3e:	f104 010c 	add.w	r1, r4, #12
 8006f42:	0092      	lsls	r2, r2, #2
 8006f44:	300c      	adds	r0, #12
 8006f46:	f7fe fd09 	bl	800595c <memcpy>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	f7ff ffa5 	bl	8006e9c <_Bfree>
 8006f52:	4644      	mov	r4, r8
 8006f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f58:	3501      	adds	r5, #1
 8006f5a:	615e      	str	r6, [r3, #20]
 8006f5c:	6125      	str	r5, [r4, #16]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f64:	08008343 	.word	0x08008343
 8006f68:	08008354 	.word	0x08008354

08006f6c <__hi0bits>:
 8006f6c:	0c03      	lsrs	r3, r0, #16
 8006f6e:	041b      	lsls	r3, r3, #16
 8006f70:	b9d3      	cbnz	r3, 8006fa8 <__hi0bits+0x3c>
 8006f72:	0400      	lsls	r0, r0, #16
 8006f74:	2310      	movs	r3, #16
 8006f76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f7a:	bf04      	itt	eq
 8006f7c:	0200      	lsleq	r0, r0, #8
 8006f7e:	3308      	addeq	r3, #8
 8006f80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f84:	bf04      	itt	eq
 8006f86:	0100      	lsleq	r0, r0, #4
 8006f88:	3304      	addeq	r3, #4
 8006f8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f8e:	bf04      	itt	eq
 8006f90:	0080      	lsleq	r0, r0, #2
 8006f92:	3302      	addeq	r3, #2
 8006f94:	2800      	cmp	r0, #0
 8006f96:	db05      	blt.n	8006fa4 <__hi0bits+0x38>
 8006f98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f9c:	f103 0301 	add.w	r3, r3, #1
 8006fa0:	bf08      	it	eq
 8006fa2:	2320      	moveq	r3, #32
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	4770      	bx	lr
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e7e4      	b.n	8006f76 <__hi0bits+0xa>

08006fac <__lo0bits>:
 8006fac:	6803      	ldr	r3, [r0, #0]
 8006fae:	f013 0207 	ands.w	r2, r3, #7
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	d00b      	beq.n	8006fce <__lo0bits+0x22>
 8006fb6:	07da      	lsls	r2, r3, #31
 8006fb8:	d423      	bmi.n	8007002 <__lo0bits+0x56>
 8006fba:	0798      	lsls	r0, r3, #30
 8006fbc:	bf49      	itett	mi
 8006fbe:	085b      	lsrmi	r3, r3, #1
 8006fc0:	089b      	lsrpl	r3, r3, #2
 8006fc2:	2001      	movmi	r0, #1
 8006fc4:	600b      	strmi	r3, [r1, #0]
 8006fc6:	bf5c      	itt	pl
 8006fc8:	600b      	strpl	r3, [r1, #0]
 8006fca:	2002      	movpl	r0, #2
 8006fcc:	4770      	bx	lr
 8006fce:	b298      	uxth	r0, r3
 8006fd0:	b9a8      	cbnz	r0, 8006ffe <__lo0bits+0x52>
 8006fd2:	0c1b      	lsrs	r3, r3, #16
 8006fd4:	2010      	movs	r0, #16
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	b90a      	cbnz	r2, 8006fde <__lo0bits+0x32>
 8006fda:	3008      	adds	r0, #8
 8006fdc:	0a1b      	lsrs	r3, r3, #8
 8006fde:	071a      	lsls	r2, r3, #28
 8006fe0:	bf04      	itt	eq
 8006fe2:	091b      	lsreq	r3, r3, #4
 8006fe4:	3004      	addeq	r0, #4
 8006fe6:	079a      	lsls	r2, r3, #30
 8006fe8:	bf04      	itt	eq
 8006fea:	089b      	lsreq	r3, r3, #2
 8006fec:	3002      	addeq	r0, #2
 8006fee:	07da      	lsls	r2, r3, #31
 8006ff0:	d403      	bmi.n	8006ffa <__lo0bits+0x4e>
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	f100 0001 	add.w	r0, r0, #1
 8006ff8:	d005      	beq.n	8007006 <__lo0bits+0x5a>
 8006ffa:	600b      	str	r3, [r1, #0]
 8006ffc:	4770      	bx	lr
 8006ffe:	4610      	mov	r0, r2
 8007000:	e7e9      	b.n	8006fd6 <__lo0bits+0x2a>
 8007002:	2000      	movs	r0, #0
 8007004:	4770      	bx	lr
 8007006:	2020      	movs	r0, #32
 8007008:	4770      	bx	lr
	...

0800700c <__i2b>:
 800700c:	b510      	push	{r4, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	2101      	movs	r1, #1
 8007012:	f7ff ff03 	bl	8006e1c <_Balloc>
 8007016:	4602      	mov	r2, r0
 8007018:	b928      	cbnz	r0, 8007026 <__i2b+0x1a>
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <__i2b+0x24>)
 800701c:	4805      	ldr	r0, [pc, #20]	; (8007034 <__i2b+0x28>)
 800701e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007022:	f000 fb85 	bl	8007730 <__assert_func>
 8007026:	2301      	movs	r3, #1
 8007028:	6144      	str	r4, [r0, #20]
 800702a:	6103      	str	r3, [r0, #16]
 800702c:	bd10      	pop	{r4, pc}
 800702e:	bf00      	nop
 8007030:	08008343 	.word	0x08008343
 8007034:	08008354 	.word	0x08008354

08007038 <__multiply>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4691      	mov	r9, r2
 800703e:	690a      	ldr	r2, [r1, #16]
 8007040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007044:	429a      	cmp	r2, r3
 8007046:	bfb8      	it	lt
 8007048:	460b      	movlt	r3, r1
 800704a:	460c      	mov	r4, r1
 800704c:	bfbc      	itt	lt
 800704e:	464c      	movlt	r4, r9
 8007050:	4699      	movlt	r9, r3
 8007052:	6927      	ldr	r7, [r4, #16]
 8007054:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007058:	68a3      	ldr	r3, [r4, #8]
 800705a:	6861      	ldr	r1, [r4, #4]
 800705c:	eb07 060a 	add.w	r6, r7, sl
 8007060:	42b3      	cmp	r3, r6
 8007062:	b085      	sub	sp, #20
 8007064:	bfb8      	it	lt
 8007066:	3101      	addlt	r1, #1
 8007068:	f7ff fed8 	bl	8006e1c <_Balloc>
 800706c:	b930      	cbnz	r0, 800707c <__multiply+0x44>
 800706e:	4602      	mov	r2, r0
 8007070:	4b44      	ldr	r3, [pc, #272]	; (8007184 <__multiply+0x14c>)
 8007072:	4845      	ldr	r0, [pc, #276]	; (8007188 <__multiply+0x150>)
 8007074:	f240 115d 	movw	r1, #349	; 0x15d
 8007078:	f000 fb5a 	bl	8007730 <__assert_func>
 800707c:	f100 0514 	add.w	r5, r0, #20
 8007080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007084:	462b      	mov	r3, r5
 8007086:	2200      	movs	r2, #0
 8007088:	4543      	cmp	r3, r8
 800708a:	d321      	bcc.n	80070d0 <__multiply+0x98>
 800708c:	f104 0314 	add.w	r3, r4, #20
 8007090:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007094:	f109 0314 	add.w	r3, r9, #20
 8007098:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800709c:	9202      	str	r2, [sp, #8]
 800709e:	1b3a      	subs	r2, r7, r4
 80070a0:	3a15      	subs	r2, #21
 80070a2:	f022 0203 	bic.w	r2, r2, #3
 80070a6:	3204      	adds	r2, #4
 80070a8:	f104 0115 	add.w	r1, r4, #21
 80070ac:	428f      	cmp	r7, r1
 80070ae:	bf38      	it	cc
 80070b0:	2204      	movcc	r2, #4
 80070b2:	9201      	str	r2, [sp, #4]
 80070b4:	9a02      	ldr	r2, [sp, #8]
 80070b6:	9303      	str	r3, [sp, #12]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d80c      	bhi.n	80070d6 <__multiply+0x9e>
 80070bc:	2e00      	cmp	r6, #0
 80070be:	dd03      	ble.n	80070c8 <__multiply+0x90>
 80070c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d05a      	beq.n	800717e <__multiply+0x146>
 80070c8:	6106      	str	r6, [r0, #16]
 80070ca:	b005      	add	sp, #20
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	f843 2b04 	str.w	r2, [r3], #4
 80070d4:	e7d8      	b.n	8007088 <__multiply+0x50>
 80070d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80070da:	f1ba 0f00 	cmp.w	sl, #0
 80070de:	d024      	beq.n	800712a <__multiply+0xf2>
 80070e0:	f104 0e14 	add.w	lr, r4, #20
 80070e4:	46a9      	mov	r9, r5
 80070e6:	f04f 0c00 	mov.w	ip, #0
 80070ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070ee:	f8d9 1000 	ldr.w	r1, [r9]
 80070f2:	fa1f fb82 	uxth.w	fp, r2
 80070f6:	b289      	uxth	r1, r1
 80070f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80070fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007100:	f8d9 2000 	ldr.w	r2, [r9]
 8007104:	4461      	add	r1, ip
 8007106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800710a:	fb0a c20b 	mla	r2, sl, fp, ip
 800710e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007112:	b289      	uxth	r1, r1
 8007114:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007118:	4577      	cmp	r7, lr
 800711a:	f849 1b04 	str.w	r1, [r9], #4
 800711e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007122:	d8e2      	bhi.n	80070ea <__multiply+0xb2>
 8007124:	9a01      	ldr	r2, [sp, #4]
 8007126:	f845 c002 	str.w	ip, [r5, r2]
 800712a:	9a03      	ldr	r2, [sp, #12]
 800712c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007130:	3304      	adds	r3, #4
 8007132:	f1b9 0f00 	cmp.w	r9, #0
 8007136:	d020      	beq.n	800717a <__multiply+0x142>
 8007138:	6829      	ldr	r1, [r5, #0]
 800713a:	f104 0c14 	add.w	ip, r4, #20
 800713e:	46ae      	mov	lr, r5
 8007140:	f04f 0a00 	mov.w	sl, #0
 8007144:	f8bc b000 	ldrh.w	fp, [ip]
 8007148:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800714c:	fb09 220b 	mla	r2, r9, fp, r2
 8007150:	4492      	add	sl, r2
 8007152:	b289      	uxth	r1, r1
 8007154:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007158:	f84e 1b04 	str.w	r1, [lr], #4
 800715c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007160:	f8be 1000 	ldrh.w	r1, [lr]
 8007164:	0c12      	lsrs	r2, r2, #16
 8007166:	fb09 1102 	mla	r1, r9, r2, r1
 800716a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800716e:	4567      	cmp	r7, ip
 8007170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007174:	d8e6      	bhi.n	8007144 <__multiply+0x10c>
 8007176:	9a01      	ldr	r2, [sp, #4]
 8007178:	50a9      	str	r1, [r5, r2]
 800717a:	3504      	adds	r5, #4
 800717c:	e79a      	b.n	80070b4 <__multiply+0x7c>
 800717e:	3e01      	subs	r6, #1
 8007180:	e79c      	b.n	80070bc <__multiply+0x84>
 8007182:	bf00      	nop
 8007184:	08008343 	.word	0x08008343
 8007188:	08008354 	.word	0x08008354

0800718c <__pow5mult>:
 800718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007190:	4615      	mov	r5, r2
 8007192:	f012 0203 	ands.w	r2, r2, #3
 8007196:	4606      	mov	r6, r0
 8007198:	460f      	mov	r7, r1
 800719a:	d007      	beq.n	80071ac <__pow5mult+0x20>
 800719c:	4c25      	ldr	r4, [pc, #148]	; (8007234 <__pow5mult+0xa8>)
 800719e:	3a01      	subs	r2, #1
 80071a0:	2300      	movs	r3, #0
 80071a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071a6:	f7ff fe9b 	bl	8006ee0 <__multadd>
 80071aa:	4607      	mov	r7, r0
 80071ac:	10ad      	asrs	r5, r5, #2
 80071ae:	d03d      	beq.n	800722c <__pow5mult+0xa0>
 80071b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071b2:	b97c      	cbnz	r4, 80071d4 <__pow5mult+0x48>
 80071b4:	2010      	movs	r0, #16
 80071b6:	f7ff fe29 	bl	8006e0c <malloc>
 80071ba:	4602      	mov	r2, r0
 80071bc:	6270      	str	r0, [r6, #36]	; 0x24
 80071be:	b928      	cbnz	r0, 80071cc <__pow5mult+0x40>
 80071c0:	4b1d      	ldr	r3, [pc, #116]	; (8007238 <__pow5mult+0xac>)
 80071c2:	481e      	ldr	r0, [pc, #120]	; (800723c <__pow5mult+0xb0>)
 80071c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80071c8:	f000 fab2 	bl	8007730 <__assert_func>
 80071cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071d0:	6004      	str	r4, [r0, #0]
 80071d2:	60c4      	str	r4, [r0, #12]
 80071d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071dc:	b94c      	cbnz	r4, 80071f2 <__pow5mult+0x66>
 80071de:	f240 2171 	movw	r1, #625	; 0x271
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7ff ff12 	bl	800700c <__i2b>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80071ee:	4604      	mov	r4, r0
 80071f0:	6003      	str	r3, [r0, #0]
 80071f2:	f04f 0900 	mov.w	r9, #0
 80071f6:	07eb      	lsls	r3, r5, #31
 80071f8:	d50a      	bpl.n	8007210 <__pow5mult+0x84>
 80071fa:	4639      	mov	r1, r7
 80071fc:	4622      	mov	r2, r4
 80071fe:	4630      	mov	r0, r6
 8007200:	f7ff ff1a 	bl	8007038 <__multiply>
 8007204:	4639      	mov	r1, r7
 8007206:	4680      	mov	r8, r0
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff fe47 	bl	8006e9c <_Bfree>
 800720e:	4647      	mov	r7, r8
 8007210:	106d      	asrs	r5, r5, #1
 8007212:	d00b      	beq.n	800722c <__pow5mult+0xa0>
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	b938      	cbnz	r0, 8007228 <__pow5mult+0x9c>
 8007218:	4622      	mov	r2, r4
 800721a:	4621      	mov	r1, r4
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff ff0b 	bl	8007038 <__multiply>
 8007222:	6020      	str	r0, [r4, #0]
 8007224:	f8c0 9000 	str.w	r9, [r0]
 8007228:	4604      	mov	r4, r0
 800722a:	e7e4      	b.n	80071f6 <__pow5mult+0x6a>
 800722c:	4638      	mov	r0, r7
 800722e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007232:	bf00      	nop
 8007234:	080084a0 	.word	0x080084a0
 8007238:	080082d1 	.word	0x080082d1
 800723c:	08008354 	.word	0x08008354

08007240 <__lshift>:
 8007240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007244:	460c      	mov	r4, r1
 8007246:	6849      	ldr	r1, [r1, #4]
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	4607      	mov	r7, r0
 8007252:	4691      	mov	r9, r2
 8007254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007258:	f108 0601 	add.w	r6, r8, #1
 800725c:	42b3      	cmp	r3, r6
 800725e:	db0b      	blt.n	8007278 <__lshift+0x38>
 8007260:	4638      	mov	r0, r7
 8007262:	f7ff fddb 	bl	8006e1c <_Balloc>
 8007266:	4605      	mov	r5, r0
 8007268:	b948      	cbnz	r0, 800727e <__lshift+0x3e>
 800726a:	4602      	mov	r2, r0
 800726c:	4b2a      	ldr	r3, [pc, #168]	; (8007318 <__lshift+0xd8>)
 800726e:	482b      	ldr	r0, [pc, #172]	; (800731c <__lshift+0xdc>)
 8007270:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007274:	f000 fa5c 	bl	8007730 <__assert_func>
 8007278:	3101      	adds	r1, #1
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	e7ee      	b.n	800725c <__lshift+0x1c>
 800727e:	2300      	movs	r3, #0
 8007280:	f100 0114 	add.w	r1, r0, #20
 8007284:	f100 0210 	add.w	r2, r0, #16
 8007288:	4618      	mov	r0, r3
 800728a:	4553      	cmp	r3, sl
 800728c:	db37      	blt.n	80072fe <__lshift+0xbe>
 800728e:	6920      	ldr	r0, [r4, #16]
 8007290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007294:	f104 0314 	add.w	r3, r4, #20
 8007298:	f019 091f 	ands.w	r9, r9, #31
 800729c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072a4:	d02f      	beq.n	8007306 <__lshift+0xc6>
 80072a6:	f1c9 0e20 	rsb	lr, r9, #32
 80072aa:	468a      	mov	sl, r1
 80072ac:	f04f 0c00 	mov.w	ip, #0
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	fa02 f209 	lsl.w	r2, r2, r9
 80072b6:	ea42 020c 	orr.w	r2, r2, ip
 80072ba:	f84a 2b04 	str.w	r2, [sl], #4
 80072be:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c2:	4298      	cmp	r0, r3
 80072c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80072c8:	d8f2      	bhi.n	80072b0 <__lshift+0x70>
 80072ca:	1b03      	subs	r3, r0, r4
 80072cc:	3b15      	subs	r3, #21
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	3304      	adds	r3, #4
 80072d4:	f104 0215 	add.w	r2, r4, #21
 80072d8:	4290      	cmp	r0, r2
 80072da:	bf38      	it	cc
 80072dc:	2304      	movcc	r3, #4
 80072de:	f841 c003 	str.w	ip, [r1, r3]
 80072e2:	f1bc 0f00 	cmp.w	ip, #0
 80072e6:	d001      	beq.n	80072ec <__lshift+0xac>
 80072e8:	f108 0602 	add.w	r6, r8, #2
 80072ec:	3e01      	subs	r6, #1
 80072ee:	4638      	mov	r0, r7
 80072f0:	612e      	str	r6, [r5, #16]
 80072f2:	4621      	mov	r1, r4
 80072f4:	f7ff fdd2 	bl	8006e9c <_Bfree>
 80072f8:	4628      	mov	r0, r5
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007302:	3301      	adds	r3, #1
 8007304:	e7c1      	b.n	800728a <__lshift+0x4a>
 8007306:	3904      	subs	r1, #4
 8007308:	f853 2b04 	ldr.w	r2, [r3], #4
 800730c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007310:	4298      	cmp	r0, r3
 8007312:	d8f9      	bhi.n	8007308 <__lshift+0xc8>
 8007314:	e7ea      	b.n	80072ec <__lshift+0xac>
 8007316:	bf00      	nop
 8007318:	08008343 	.word	0x08008343
 800731c:	08008354 	.word	0x08008354

08007320 <__mcmp>:
 8007320:	b530      	push	{r4, r5, lr}
 8007322:	6902      	ldr	r2, [r0, #16]
 8007324:	690c      	ldr	r4, [r1, #16]
 8007326:	1b12      	subs	r2, r2, r4
 8007328:	d10e      	bne.n	8007348 <__mcmp+0x28>
 800732a:	f100 0314 	add.w	r3, r0, #20
 800732e:	3114      	adds	r1, #20
 8007330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800733c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007340:	42a5      	cmp	r5, r4
 8007342:	d003      	beq.n	800734c <__mcmp+0x2c>
 8007344:	d305      	bcc.n	8007352 <__mcmp+0x32>
 8007346:	2201      	movs	r2, #1
 8007348:	4610      	mov	r0, r2
 800734a:	bd30      	pop	{r4, r5, pc}
 800734c:	4283      	cmp	r3, r0
 800734e:	d3f3      	bcc.n	8007338 <__mcmp+0x18>
 8007350:	e7fa      	b.n	8007348 <__mcmp+0x28>
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	e7f7      	b.n	8007348 <__mcmp+0x28>

08007358 <__mdiff>:
 8007358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	460c      	mov	r4, r1
 800735e:	4606      	mov	r6, r0
 8007360:	4611      	mov	r1, r2
 8007362:	4620      	mov	r0, r4
 8007364:	4690      	mov	r8, r2
 8007366:	f7ff ffdb 	bl	8007320 <__mcmp>
 800736a:	1e05      	subs	r5, r0, #0
 800736c:	d110      	bne.n	8007390 <__mdiff+0x38>
 800736e:	4629      	mov	r1, r5
 8007370:	4630      	mov	r0, r6
 8007372:	f7ff fd53 	bl	8006e1c <_Balloc>
 8007376:	b930      	cbnz	r0, 8007386 <__mdiff+0x2e>
 8007378:	4b3a      	ldr	r3, [pc, #232]	; (8007464 <__mdiff+0x10c>)
 800737a:	4602      	mov	r2, r0
 800737c:	f240 2132 	movw	r1, #562	; 0x232
 8007380:	4839      	ldr	r0, [pc, #228]	; (8007468 <__mdiff+0x110>)
 8007382:	f000 f9d5 	bl	8007730 <__assert_func>
 8007386:	2301      	movs	r3, #1
 8007388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800738c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007390:	bfa4      	itt	ge
 8007392:	4643      	movge	r3, r8
 8007394:	46a0      	movge	r8, r4
 8007396:	4630      	mov	r0, r6
 8007398:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800739c:	bfa6      	itte	ge
 800739e:	461c      	movge	r4, r3
 80073a0:	2500      	movge	r5, #0
 80073a2:	2501      	movlt	r5, #1
 80073a4:	f7ff fd3a 	bl	8006e1c <_Balloc>
 80073a8:	b920      	cbnz	r0, 80073b4 <__mdiff+0x5c>
 80073aa:	4b2e      	ldr	r3, [pc, #184]	; (8007464 <__mdiff+0x10c>)
 80073ac:	4602      	mov	r2, r0
 80073ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80073b2:	e7e5      	b.n	8007380 <__mdiff+0x28>
 80073b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073b8:	6926      	ldr	r6, [r4, #16]
 80073ba:	60c5      	str	r5, [r0, #12]
 80073bc:	f104 0914 	add.w	r9, r4, #20
 80073c0:	f108 0514 	add.w	r5, r8, #20
 80073c4:	f100 0e14 	add.w	lr, r0, #20
 80073c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80073cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80073d0:	f108 0210 	add.w	r2, r8, #16
 80073d4:	46f2      	mov	sl, lr
 80073d6:	2100      	movs	r1, #0
 80073d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073e0:	fa1f f883 	uxth.w	r8, r3
 80073e4:	fa11 f18b 	uxtah	r1, r1, fp
 80073e8:	0c1b      	lsrs	r3, r3, #16
 80073ea:	eba1 0808 	sub.w	r8, r1, r8
 80073ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073f6:	fa1f f888 	uxth.w	r8, r8
 80073fa:	1419      	asrs	r1, r3, #16
 80073fc:	454e      	cmp	r6, r9
 80073fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007402:	f84a 3b04 	str.w	r3, [sl], #4
 8007406:	d8e7      	bhi.n	80073d8 <__mdiff+0x80>
 8007408:	1b33      	subs	r3, r6, r4
 800740a:	3b15      	subs	r3, #21
 800740c:	f023 0303 	bic.w	r3, r3, #3
 8007410:	3304      	adds	r3, #4
 8007412:	3415      	adds	r4, #21
 8007414:	42a6      	cmp	r6, r4
 8007416:	bf38      	it	cc
 8007418:	2304      	movcc	r3, #4
 800741a:	441d      	add	r5, r3
 800741c:	4473      	add	r3, lr
 800741e:	469e      	mov	lr, r3
 8007420:	462e      	mov	r6, r5
 8007422:	4566      	cmp	r6, ip
 8007424:	d30e      	bcc.n	8007444 <__mdiff+0xec>
 8007426:	f10c 0203 	add.w	r2, ip, #3
 800742a:	1b52      	subs	r2, r2, r5
 800742c:	f022 0203 	bic.w	r2, r2, #3
 8007430:	3d03      	subs	r5, #3
 8007432:	45ac      	cmp	ip, r5
 8007434:	bf38      	it	cc
 8007436:	2200      	movcc	r2, #0
 8007438:	441a      	add	r2, r3
 800743a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800743e:	b17b      	cbz	r3, 8007460 <__mdiff+0x108>
 8007440:	6107      	str	r7, [r0, #16]
 8007442:	e7a3      	b.n	800738c <__mdiff+0x34>
 8007444:	f856 8b04 	ldr.w	r8, [r6], #4
 8007448:	fa11 f288 	uxtah	r2, r1, r8
 800744c:	1414      	asrs	r4, r2, #16
 800744e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007452:	b292      	uxth	r2, r2
 8007454:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007458:	f84e 2b04 	str.w	r2, [lr], #4
 800745c:	1421      	asrs	r1, r4, #16
 800745e:	e7e0      	b.n	8007422 <__mdiff+0xca>
 8007460:	3f01      	subs	r7, #1
 8007462:	e7ea      	b.n	800743a <__mdiff+0xe2>
 8007464:	08008343 	.word	0x08008343
 8007468:	08008354 	.word	0x08008354

0800746c <__d2b>:
 800746c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4689      	mov	r9, r1
 8007472:	2101      	movs	r1, #1
 8007474:	ec57 6b10 	vmov	r6, r7, d0
 8007478:	4690      	mov	r8, r2
 800747a:	f7ff fccf 	bl	8006e1c <_Balloc>
 800747e:	4604      	mov	r4, r0
 8007480:	b930      	cbnz	r0, 8007490 <__d2b+0x24>
 8007482:	4602      	mov	r2, r0
 8007484:	4b25      	ldr	r3, [pc, #148]	; (800751c <__d2b+0xb0>)
 8007486:	4826      	ldr	r0, [pc, #152]	; (8007520 <__d2b+0xb4>)
 8007488:	f240 310a 	movw	r1, #778	; 0x30a
 800748c:	f000 f950 	bl	8007730 <__assert_func>
 8007490:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007498:	bb35      	cbnz	r5, 80074e8 <__d2b+0x7c>
 800749a:	2e00      	cmp	r6, #0
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	d028      	beq.n	80074f2 <__d2b+0x86>
 80074a0:	4668      	mov	r0, sp
 80074a2:	9600      	str	r6, [sp, #0]
 80074a4:	f7ff fd82 	bl	8006fac <__lo0bits>
 80074a8:	9900      	ldr	r1, [sp, #0]
 80074aa:	b300      	cbz	r0, 80074ee <__d2b+0x82>
 80074ac:	9a01      	ldr	r2, [sp, #4]
 80074ae:	f1c0 0320 	rsb	r3, r0, #32
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	430b      	orrs	r3, r1
 80074b8:	40c2      	lsrs	r2, r0
 80074ba:	6163      	str	r3, [r4, #20]
 80074bc:	9201      	str	r2, [sp, #4]
 80074be:	9b01      	ldr	r3, [sp, #4]
 80074c0:	61a3      	str	r3, [r4, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	bf14      	ite	ne
 80074c6:	2202      	movne	r2, #2
 80074c8:	2201      	moveq	r2, #1
 80074ca:	6122      	str	r2, [r4, #16]
 80074cc:	b1d5      	cbz	r5, 8007504 <__d2b+0x98>
 80074ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80074d2:	4405      	add	r5, r0
 80074d4:	f8c9 5000 	str.w	r5, [r9]
 80074d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074dc:	f8c8 0000 	str.w	r0, [r8]
 80074e0:	4620      	mov	r0, r4
 80074e2:	b003      	add	sp, #12
 80074e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ec:	e7d5      	b.n	800749a <__d2b+0x2e>
 80074ee:	6161      	str	r1, [r4, #20]
 80074f0:	e7e5      	b.n	80074be <__d2b+0x52>
 80074f2:	a801      	add	r0, sp, #4
 80074f4:	f7ff fd5a 	bl	8006fac <__lo0bits>
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	6163      	str	r3, [r4, #20]
 80074fc:	2201      	movs	r2, #1
 80074fe:	6122      	str	r2, [r4, #16]
 8007500:	3020      	adds	r0, #32
 8007502:	e7e3      	b.n	80074cc <__d2b+0x60>
 8007504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800750c:	f8c9 0000 	str.w	r0, [r9]
 8007510:	6918      	ldr	r0, [r3, #16]
 8007512:	f7ff fd2b 	bl	8006f6c <__hi0bits>
 8007516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800751a:	e7df      	b.n	80074dc <__d2b+0x70>
 800751c:	08008343 	.word	0x08008343
 8007520:	08008354 	.word	0x08008354

08007524 <_calloc_r>:
 8007524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007526:	fba1 2402 	umull	r2, r4, r1, r2
 800752a:	b94c      	cbnz	r4, 8007540 <_calloc_r+0x1c>
 800752c:	4611      	mov	r1, r2
 800752e:	9201      	str	r2, [sp, #4]
 8007530:	f000 f87a 	bl	8007628 <_malloc_r>
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	4605      	mov	r5, r0
 8007538:	b930      	cbnz	r0, 8007548 <_calloc_r+0x24>
 800753a:	4628      	mov	r0, r5
 800753c:	b003      	add	sp, #12
 800753e:	bd30      	pop	{r4, r5, pc}
 8007540:	220c      	movs	r2, #12
 8007542:	6002      	str	r2, [r0, #0]
 8007544:	2500      	movs	r5, #0
 8007546:	e7f8      	b.n	800753a <_calloc_r+0x16>
 8007548:	4621      	mov	r1, r4
 800754a:	f7fe fa15 	bl	8005978 <memset>
 800754e:	e7f4      	b.n	800753a <_calloc_r+0x16>

08007550 <_free_r>:
 8007550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007552:	2900      	cmp	r1, #0
 8007554:	d044      	beq.n	80075e0 <_free_r+0x90>
 8007556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800755a:	9001      	str	r0, [sp, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f1a1 0404 	sub.w	r4, r1, #4
 8007562:	bfb8      	it	lt
 8007564:	18e4      	addlt	r4, r4, r3
 8007566:	f000 f925 	bl	80077b4 <__malloc_lock>
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <_free_r+0x94>)
 800756c:	9801      	ldr	r0, [sp, #4]
 800756e:	6813      	ldr	r3, [r2, #0]
 8007570:	b933      	cbnz	r3, 8007580 <_free_r+0x30>
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	6014      	str	r4, [r2, #0]
 8007576:	b003      	add	sp, #12
 8007578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800757c:	f000 b920 	b.w	80077c0 <__malloc_unlock>
 8007580:	42a3      	cmp	r3, r4
 8007582:	d908      	bls.n	8007596 <_free_r+0x46>
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	1961      	adds	r1, r4, r5
 8007588:	428b      	cmp	r3, r1
 800758a:	bf01      	itttt	eq
 800758c:	6819      	ldreq	r1, [r3, #0]
 800758e:	685b      	ldreq	r3, [r3, #4]
 8007590:	1949      	addeq	r1, r1, r5
 8007592:	6021      	streq	r1, [r4, #0]
 8007594:	e7ed      	b.n	8007572 <_free_r+0x22>
 8007596:	461a      	mov	r2, r3
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	b10b      	cbz	r3, 80075a0 <_free_r+0x50>
 800759c:	42a3      	cmp	r3, r4
 800759e:	d9fa      	bls.n	8007596 <_free_r+0x46>
 80075a0:	6811      	ldr	r1, [r2, #0]
 80075a2:	1855      	adds	r5, r2, r1
 80075a4:	42a5      	cmp	r5, r4
 80075a6:	d10b      	bne.n	80075c0 <_free_r+0x70>
 80075a8:	6824      	ldr	r4, [r4, #0]
 80075aa:	4421      	add	r1, r4
 80075ac:	1854      	adds	r4, r2, r1
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	6011      	str	r1, [r2, #0]
 80075b2:	d1e0      	bne.n	8007576 <_free_r+0x26>
 80075b4:	681c      	ldr	r4, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	6053      	str	r3, [r2, #4]
 80075ba:	4421      	add	r1, r4
 80075bc:	6011      	str	r1, [r2, #0]
 80075be:	e7da      	b.n	8007576 <_free_r+0x26>
 80075c0:	d902      	bls.n	80075c8 <_free_r+0x78>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	e7d6      	b.n	8007576 <_free_r+0x26>
 80075c8:	6825      	ldr	r5, [r4, #0]
 80075ca:	1961      	adds	r1, r4, r5
 80075cc:	428b      	cmp	r3, r1
 80075ce:	bf04      	itt	eq
 80075d0:	6819      	ldreq	r1, [r3, #0]
 80075d2:	685b      	ldreq	r3, [r3, #4]
 80075d4:	6063      	str	r3, [r4, #4]
 80075d6:	bf04      	itt	eq
 80075d8:	1949      	addeq	r1, r1, r5
 80075da:	6021      	streq	r1, [r4, #0]
 80075dc:	6054      	str	r4, [r2, #4]
 80075de:	e7ca      	b.n	8007576 <_free_r+0x26>
 80075e0:	b003      	add	sp, #12
 80075e2:	bd30      	pop	{r4, r5, pc}
 80075e4:	2000038c 	.word	0x2000038c

080075e8 <sbrk_aligned>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4e0e      	ldr	r6, [pc, #56]	; (8007624 <sbrk_aligned+0x3c>)
 80075ec:	460c      	mov	r4, r1
 80075ee:	6831      	ldr	r1, [r6, #0]
 80075f0:	4605      	mov	r5, r0
 80075f2:	b911      	cbnz	r1, 80075fa <sbrk_aligned+0x12>
 80075f4:	f000 f88c 	bl	8007710 <_sbrk_r>
 80075f8:	6030      	str	r0, [r6, #0]
 80075fa:	4621      	mov	r1, r4
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 f887 	bl	8007710 <_sbrk_r>
 8007602:	1c43      	adds	r3, r0, #1
 8007604:	d00a      	beq.n	800761c <sbrk_aligned+0x34>
 8007606:	1cc4      	adds	r4, r0, #3
 8007608:	f024 0403 	bic.w	r4, r4, #3
 800760c:	42a0      	cmp	r0, r4
 800760e:	d007      	beq.n	8007620 <sbrk_aligned+0x38>
 8007610:	1a21      	subs	r1, r4, r0
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f87c 	bl	8007710 <_sbrk_r>
 8007618:	3001      	adds	r0, #1
 800761a:	d101      	bne.n	8007620 <sbrk_aligned+0x38>
 800761c:	f04f 34ff 	mov.w	r4, #4294967295
 8007620:	4620      	mov	r0, r4
 8007622:	bd70      	pop	{r4, r5, r6, pc}
 8007624:	20000390 	.word	0x20000390

08007628 <_malloc_r>:
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	1ccd      	adds	r5, r1, #3
 800762e:	f025 0503 	bic.w	r5, r5, #3
 8007632:	3508      	adds	r5, #8
 8007634:	2d0c      	cmp	r5, #12
 8007636:	bf38      	it	cc
 8007638:	250c      	movcc	r5, #12
 800763a:	2d00      	cmp	r5, #0
 800763c:	4607      	mov	r7, r0
 800763e:	db01      	blt.n	8007644 <_malloc_r+0x1c>
 8007640:	42a9      	cmp	r1, r5
 8007642:	d905      	bls.n	8007650 <_malloc_r+0x28>
 8007644:	230c      	movs	r3, #12
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	2600      	movs	r6, #0
 800764a:	4630      	mov	r0, r6
 800764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007650:	4e2e      	ldr	r6, [pc, #184]	; (800770c <_malloc_r+0xe4>)
 8007652:	f000 f8af 	bl	80077b4 <__malloc_lock>
 8007656:	6833      	ldr	r3, [r6, #0]
 8007658:	461c      	mov	r4, r3
 800765a:	bb34      	cbnz	r4, 80076aa <_malloc_r+0x82>
 800765c:	4629      	mov	r1, r5
 800765e:	4638      	mov	r0, r7
 8007660:	f7ff ffc2 	bl	80075e8 <sbrk_aligned>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	4604      	mov	r4, r0
 8007668:	d14d      	bne.n	8007706 <_malloc_r+0xde>
 800766a:	6834      	ldr	r4, [r6, #0]
 800766c:	4626      	mov	r6, r4
 800766e:	2e00      	cmp	r6, #0
 8007670:	d140      	bne.n	80076f4 <_malloc_r+0xcc>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	4631      	mov	r1, r6
 8007676:	4638      	mov	r0, r7
 8007678:	eb04 0803 	add.w	r8, r4, r3
 800767c:	f000 f848 	bl	8007710 <_sbrk_r>
 8007680:	4580      	cmp	r8, r0
 8007682:	d13a      	bne.n	80076fa <_malloc_r+0xd2>
 8007684:	6821      	ldr	r1, [r4, #0]
 8007686:	3503      	adds	r5, #3
 8007688:	1a6d      	subs	r5, r5, r1
 800768a:	f025 0503 	bic.w	r5, r5, #3
 800768e:	3508      	adds	r5, #8
 8007690:	2d0c      	cmp	r5, #12
 8007692:	bf38      	it	cc
 8007694:	250c      	movcc	r5, #12
 8007696:	4629      	mov	r1, r5
 8007698:	4638      	mov	r0, r7
 800769a:	f7ff ffa5 	bl	80075e8 <sbrk_aligned>
 800769e:	3001      	adds	r0, #1
 80076a0:	d02b      	beq.n	80076fa <_malloc_r+0xd2>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	442b      	add	r3, r5
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	e00e      	b.n	80076c8 <_malloc_r+0xa0>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	1b52      	subs	r2, r2, r5
 80076ae:	d41e      	bmi.n	80076ee <_malloc_r+0xc6>
 80076b0:	2a0b      	cmp	r2, #11
 80076b2:	d916      	bls.n	80076e2 <_malloc_r+0xba>
 80076b4:	1961      	adds	r1, r4, r5
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	6025      	str	r5, [r4, #0]
 80076ba:	bf18      	it	ne
 80076bc:	6059      	strne	r1, [r3, #4]
 80076be:	6863      	ldr	r3, [r4, #4]
 80076c0:	bf08      	it	eq
 80076c2:	6031      	streq	r1, [r6, #0]
 80076c4:	5162      	str	r2, [r4, r5]
 80076c6:	604b      	str	r3, [r1, #4]
 80076c8:	4638      	mov	r0, r7
 80076ca:	f104 060b 	add.w	r6, r4, #11
 80076ce:	f000 f877 	bl	80077c0 <__malloc_unlock>
 80076d2:	f026 0607 	bic.w	r6, r6, #7
 80076d6:	1d23      	adds	r3, r4, #4
 80076d8:	1af2      	subs	r2, r6, r3
 80076da:	d0b6      	beq.n	800764a <_malloc_r+0x22>
 80076dc:	1b9b      	subs	r3, r3, r6
 80076de:	50a3      	str	r3, [r4, r2]
 80076e0:	e7b3      	b.n	800764a <_malloc_r+0x22>
 80076e2:	6862      	ldr	r2, [r4, #4]
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	bf0c      	ite	eq
 80076e8:	6032      	streq	r2, [r6, #0]
 80076ea:	605a      	strne	r2, [r3, #4]
 80076ec:	e7ec      	b.n	80076c8 <_malloc_r+0xa0>
 80076ee:	4623      	mov	r3, r4
 80076f0:	6864      	ldr	r4, [r4, #4]
 80076f2:	e7b2      	b.n	800765a <_malloc_r+0x32>
 80076f4:	4634      	mov	r4, r6
 80076f6:	6876      	ldr	r6, [r6, #4]
 80076f8:	e7b9      	b.n	800766e <_malloc_r+0x46>
 80076fa:	230c      	movs	r3, #12
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	4638      	mov	r0, r7
 8007700:	f000 f85e 	bl	80077c0 <__malloc_unlock>
 8007704:	e7a1      	b.n	800764a <_malloc_r+0x22>
 8007706:	6025      	str	r5, [r4, #0]
 8007708:	e7de      	b.n	80076c8 <_malloc_r+0xa0>
 800770a:	bf00      	nop
 800770c:	2000038c 	.word	0x2000038c

08007710 <_sbrk_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4d06      	ldr	r5, [pc, #24]	; (800772c <_sbrk_r+0x1c>)
 8007714:	2300      	movs	r3, #0
 8007716:	4604      	mov	r4, r0
 8007718:	4608      	mov	r0, r1
 800771a:	602b      	str	r3, [r5, #0]
 800771c:	f7f9 fe8c 	bl	8001438 <_sbrk>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_sbrk_r+0x1a>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_sbrk_r+0x1a>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	20000394 	.word	0x20000394

08007730 <__assert_func>:
 8007730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007732:	4614      	mov	r4, r2
 8007734:	461a      	mov	r2, r3
 8007736:	4b09      	ldr	r3, [pc, #36]	; (800775c <__assert_func+0x2c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4605      	mov	r5, r0
 800773c:	68d8      	ldr	r0, [r3, #12]
 800773e:	b14c      	cbz	r4, 8007754 <__assert_func+0x24>
 8007740:	4b07      	ldr	r3, [pc, #28]	; (8007760 <__assert_func+0x30>)
 8007742:	9100      	str	r1, [sp, #0]
 8007744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007748:	4906      	ldr	r1, [pc, #24]	; (8007764 <__assert_func+0x34>)
 800774a:	462b      	mov	r3, r5
 800774c:	f000 f80e 	bl	800776c <fiprintf>
 8007750:	f000 fa64 	bl	8007c1c <abort>
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <__assert_func+0x38>)
 8007756:	461c      	mov	r4, r3
 8007758:	e7f3      	b.n	8007742 <__assert_func+0x12>
 800775a:	bf00      	nop
 800775c:	2000000c 	.word	0x2000000c
 8007760:	080084ac 	.word	0x080084ac
 8007764:	080084b9 	.word	0x080084b9
 8007768:	080084e7 	.word	0x080084e7

0800776c <fiprintf>:
 800776c:	b40e      	push	{r1, r2, r3}
 800776e:	b503      	push	{r0, r1, lr}
 8007770:	4601      	mov	r1, r0
 8007772:	ab03      	add	r3, sp, #12
 8007774:	4805      	ldr	r0, [pc, #20]	; (800778c <fiprintf+0x20>)
 8007776:	f853 2b04 	ldr.w	r2, [r3], #4
 800777a:	6800      	ldr	r0, [r0, #0]
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	f000 f84f 	bl	8007820 <_vfiprintf_r>
 8007782:	b002      	add	sp, #8
 8007784:	f85d eb04 	ldr.w	lr, [sp], #4
 8007788:	b003      	add	sp, #12
 800778a:	4770      	bx	lr
 800778c:	2000000c 	.word	0x2000000c

08007790 <__ascii_mbtowc>:
 8007790:	b082      	sub	sp, #8
 8007792:	b901      	cbnz	r1, 8007796 <__ascii_mbtowc+0x6>
 8007794:	a901      	add	r1, sp, #4
 8007796:	b142      	cbz	r2, 80077aa <__ascii_mbtowc+0x1a>
 8007798:	b14b      	cbz	r3, 80077ae <__ascii_mbtowc+0x1e>
 800779a:	7813      	ldrb	r3, [r2, #0]
 800779c:	600b      	str	r3, [r1, #0]
 800779e:	7812      	ldrb	r2, [r2, #0]
 80077a0:	1e10      	subs	r0, r2, #0
 80077a2:	bf18      	it	ne
 80077a4:	2001      	movne	r0, #1
 80077a6:	b002      	add	sp, #8
 80077a8:	4770      	bx	lr
 80077aa:	4610      	mov	r0, r2
 80077ac:	e7fb      	b.n	80077a6 <__ascii_mbtowc+0x16>
 80077ae:	f06f 0001 	mvn.w	r0, #1
 80077b2:	e7f8      	b.n	80077a6 <__ascii_mbtowc+0x16>

080077b4 <__malloc_lock>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__malloc_lock+0x8>)
 80077b6:	f000 bbf1 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 80077ba:	bf00      	nop
 80077bc:	20000398 	.word	0x20000398

080077c0 <__malloc_unlock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	; (80077c8 <__malloc_unlock+0x8>)
 80077c2:	f000 bbec 	b.w	8007f9e <__retarget_lock_release_recursive>
 80077c6:	bf00      	nop
 80077c8:	20000398 	.word	0x20000398

080077cc <__sfputc_r>:
 80077cc:	6893      	ldr	r3, [r2, #8]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	b410      	push	{r4}
 80077d4:	6093      	str	r3, [r2, #8]
 80077d6:	da08      	bge.n	80077ea <__sfputc_r+0x1e>
 80077d8:	6994      	ldr	r4, [r2, #24]
 80077da:	42a3      	cmp	r3, r4
 80077dc:	db01      	blt.n	80077e2 <__sfputc_r+0x16>
 80077de:	290a      	cmp	r1, #10
 80077e0:	d103      	bne.n	80077ea <__sfputc_r+0x1e>
 80077e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e6:	f000 b94b 	b.w	8007a80 <__swbuf_r>
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	1c58      	adds	r0, r3, #1
 80077ee:	6010      	str	r0, [r2, #0]
 80077f0:	7019      	strb	r1, [r3, #0]
 80077f2:	4608      	mov	r0, r1
 80077f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <__sfputs_r>:
 80077fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	4614      	mov	r4, r2
 8007802:	18d5      	adds	r5, r2, r3
 8007804:	42ac      	cmp	r4, r5
 8007806:	d101      	bne.n	800780c <__sfputs_r+0x12>
 8007808:	2000      	movs	r0, #0
 800780a:	e007      	b.n	800781c <__sfputs_r+0x22>
 800780c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007810:	463a      	mov	r2, r7
 8007812:	4630      	mov	r0, r6
 8007814:	f7ff ffda 	bl	80077cc <__sfputc_r>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d1f3      	bne.n	8007804 <__sfputs_r+0xa>
 800781c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007820 <_vfiprintf_r>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	460d      	mov	r5, r1
 8007826:	b09d      	sub	sp, #116	; 0x74
 8007828:	4614      	mov	r4, r2
 800782a:	4698      	mov	r8, r3
 800782c:	4606      	mov	r6, r0
 800782e:	b118      	cbz	r0, 8007838 <_vfiprintf_r+0x18>
 8007830:	6983      	ldr	r3, [r0, #24]
 8007832:	b90b      	cbnz	r3, 8007838 <_vfiprintf_r+0x18>
 8007834:	f000 fb14 	bl	8007e60 <__sinit>
 8007838:	4b89      	ldr	r3, [pc, #548]	; (8007a60 <_vfiprintf_r+0x240>)
 800783a:	429d      	cmp	r5, r3
 800783c:	d11b      	bne.n	8007876 <_vfiprintf_r+0x56>
 800783e:	6875      	ldr	r5, [r6, #4]
 8007840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007842:	07d9      	lsls	r1, r3, #31
 8007844:	d405      	bmi.n	8007852 <_vfiprintf_r+0x32>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	059a      	lsls	r2, r3, #22
 800784a:	d402      	bmi.n	8007852 <_vfiprintf_r+0x32>
 800784c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800784e:	f000 fba5 	bl	8007f9c <__retarget_lock_acquire_recursive>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	071b      	lsls	r3, r3, #28
 8007856:	d501      	bpl.n	800785c <_vfiprintf_r+0x3c>
 8007858:	692b      	ldr	r3, [r5, #16]
 800785a:	b9eb      	cbnz	r3, 8007898 <_vfiprintf_r+0x78>
 800785c:	4629      	mov	r1, r5
 800785e:	4630      	mov	r0, r6
 8007860:	f000 f96e 	bl	8007b40 <__swsetup_r>
 8007864:	b1c0      	cbz	r0, 8007898 <_vfiprintf_r+0x78>
 8007866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007868:	07dc      	lsls	r4, r3, #31
 800786a:	d50e      	bpl.n	800788a <_vfiprintf_r+0x6a>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b01d      	add	sp, #116	; 0x74
 8007872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007876:	4b7b      	ldr	r3, [pc, #492]	; (8007a64 <_vfiprintf_r+0x244>)
 8007878:	429d      	cmp	r5, r3
 800787a:	d101      	bne.n	8007880 <_vfiprintf_r+0x60>
 800787c:	68b5      	ldr	r5, [r6, #8]
 800787e:	e7df      	b.n	8007840 <_vfiprintf_r+0x20>
 8007880:	4b79      	ldr	r3, [pc, #484]	; (8007a68 <_vfiprintf_r+0x248>)
 8007882:	429d      	cmp	r5, r3
 8007884:	bf08      	it	eq
 8007886:	68f5      	ldreq	r5, [r6, #12]
 8007888:	e7da      	b.n	8007840 <_vfiprintf_r+0x20>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	0598      	lsls	r0, r3, #22
 800788e:	d4ed      	bmi.n	800786c <_vfiprintf_r+0x4c>
 8007890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007892:	f000 fb84 	bl	8007f9e <__retarget_lock_release_recursive>
 8007896:	e7e9      	b.n	800786c <_vfiprintf_r+0x4c>
 8007898:	2300      	movs	r3, #0
 800789a:	9309      	str	r3, [sp, #36]	; 0x24
 800789c:	2320      	movs	r3, #32
 800789e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a6:	2330      	movs	r3, #48	; 0x30
 80078a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a6c <_vfiprintf_r+0x24c>
 80078ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078b0:	f04f 0901 	mov.w	r9, #1
 80078b4:	4623      	mov	r3, r4
 80078b6:	469a      	mov	sl, r3
 80078b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078bc:	b10a      	cbz	r2, 80078c2 <_vfiprintf_r+0xa2>
 80078be:	2a25      	cmp	r2, #37	; 0x25
 80078c0:	d1f9      	bne.n	80078b6 <_vfiprintf_r+0x96>
 80078c2:	ebba 0b04 	subs.w	fp, sl, r4
 80078c6:	d00b      	beq.n	80078e0 <_vfiprintf_r+0xc0>
 80078c8:	465b      	mov	r3, fp
 80078ca:	4622      	mov	r2, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ff93 	bl	80077fa <__sfputs_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	f000 80aa 	beq.w	8007a2e <_vfiprintf_r+0x20e>
 80078da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078dc:	445a      	add	r2, fp
 80078de:	9209      	str	r2, [sp, #36]	; 0x24
 80078e0:	f89a 3000 	ldrb.w	r3, [sl]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80a2 	beq.w	8007a2e <_vfiprintf_r+0x20e>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f04f 32ff 	mov.w	r2, #4294967295
 80078f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f4:	f10a 0a01 	add.w	sl, sl, #1
 80078f8:	9304      	str	r3, [sp, #16]
 80078fa:	9307      	str	r3, [sp, #28]
 80078fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007900:	931a      	str	r3, [sp, #104]	; 0x68
 8007902:	4654      	mov	r4, sl
 8007904:	2205      	movs	r2, #5
 8007906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790a:	4858      	ldr	r0, [pc, #352]	; (8007a6c <_vfiprintf_r+0x24c>)
 800790c:	f7f8 fca0 	bl	8000250 <memchr>
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	b9d8      	cbnz	r0, 800794c <_vfiprintf_r+0x12c>
 8007914:	06d1      	lsls	r1, r2, #27
 8007916:	bf44      	itt	mi
 8007918:	2320      	movmi	r3, #32
 800791a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791e:	0713      	lsls	r3, r2, #28
 8007920:	bf44      	itt	mi
 8007922:	232b      	movmi	r3, #43	; 0x2b
 8007924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007928:	f89a 3000 	ldrb.w	r3, [sl]
 800792c:	2b2a      	cmp	r3, #42	; 0x2a
 800792e:	d015      	beq.n	800795c <_vfiprintf_r+0x13c>
 8007930:	9a07      	ldr	r2, [sp, #28]
 8007932:	4654      	mov	r4, sl
 8007934:	2000      	movs	r0, #0
 8007936:	f04f 0c0a 	mov.w	ip, #10
 800793a:	4621      	mov	r1, r4
 800793c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007940:	3b30      	subs	r3, #48	; 0x30
 8007942:	2b09      	cmp	r3, #9
 8007944:	d94e      	bls.n	80079e4 <_vfiprintf_r+0x1c4>
 8007946:	b1b0      	cbz	r0, 8007976 <_vfiprintf_r+0x156>
 8007948:	9207      	str	r2, [sp, #28]
 800794a:	e014      	b.n	8007976 <_vfiprintf_r+0x156>
 800794c:	eba0 0308 	sub.w	r3, r0, r8
 8007950:	fa09 f303 	lsl.w	r3, r9, r3
 8007954:	4313      	orrs	r3, r2
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	46a2      	mov	sl, r4
 800795a:	e7d2      	b.n	8007902 <_vfiprintf_r+0xe2>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1d19      	adds	r1, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfbb      	ittet	lt
 8007968:	425b      	neglt	r3, r3
 800796a:	f042 0202 	orrlt.w	r2, r2, #2
 800796e:	9307      	strge	r3, [sp, #28]
 8007970:	9307      	strlt	r3, [sp, #28]
 8007972:	bfb8      	it	lt
 8007974:	9204      	strlt	r2, [sp, #16]
 8007976:	7823      	ldrb	r3, [r4, #0]
 8007978:	2b2e      	cmp	r3, #46	; 0x2e
 800797a:	d10c      	bne.n	8007996 <_vfiprintf_r+0x176>
 800797c:	7863      	ldrb	r3, [r4, #1]
 800797e:	2b2a      	cmp	r3, #42	; 0x2a
 8007980:	d135      	bne.n	80079ee <_vfiprintf_r+0x1ce>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9203      	str	r2, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	bfb8      	it	lt
 800798e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007992:	3402      	adds	r4, #2
 8007994:	9305      	str	r3, [sp, #20]
 8007996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a7c <_vfiprintf_r+0x25c>
 800799a:	7821      	ldrb	r1, [r4, #0]
 800799c:	2203      	movs	r2, #3
 800799e:	4650      	mov	r0, sl
 80079a0:	f7f8 fc56 	bl	8000250 <memchr>
 80079a4:	b140      	cbz	r0, 80079b8 <_vfiprintf_r+0x198>
 80079a6:	2340      	movs	r3, #64	; 0x40
 80079a8:	eba0 000a 	sub.w	r0, r0, sl
 80079ac:	fa03 f000 	lsl.w	r0, r3, r0
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	4303      	orrs	r3, r0
 80079b4:	3401      	adds	r4, #1
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079bc:	482c      	ldr	r0, [pc, #176]	; (8007a70 <_vfiprintf_r+0x250>)
 80079be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079c2:	2206      	movs	r2, #6
 80079c4:	f7f8 fc44 	bl	8000250 <memchr>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d03f      	beq.n	8007a4c <_vfiprintf_r+0x22c>
 80079cc:	4b29      	ldr	r3, [pc, #164]	; (8007a74 <_vfiprintf_r+0x254>)
 80079ce:	bb1b      	cbnz	r3, 8007a18 <_vfiprintf_r+0x1f8>
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	3307      	adds	r3, #7
 80079d4:	f023 0307 	bic.w	r3, r3, #7
 80079d8:	3308      	adds	r3, #8
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079de:	443b      	add	r3, r7
 80079e0:	9309      	str	r3, [sp, #36]	; 0x24
 80079e2:	e767      	b.n	80078b4 <_vfiprintf_r+0x94>
 80079e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e8:	460c      	mov	r4, r1
 80079ea:	2001      	movs	r0, #1
 80079ec:	e7a5      	b.n	800793a <_vfiprintf_r+0x11a>
 80079ee:	2300      	movs	r3, #0
 80079f0:	3401      	adds	r4, #1
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	4619      	mov	r1, r3
 80079f6:	f04f 0c0a 	mov.w	ip, #10
 80079fa:	4620      	mov	r0, r4
 80079fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a00:	3a30      	subs	r2, #48	; 0x30
 8007a02:	2a09      	cmp	r2, #9
 8007a04:	d903      	bls.n	8007a0e <_vfiprintf_r+0x1ee>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0c5      	beq.n	8007996 <_vfiprintf_r+0x176>
 8007a0a:	9105      	str	r1, [sp, #20]
 8007a0c:	e7c3      	b.n	8007996 <_vfiprintf_r+0x176>
 8007a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a12:	4604      	mov	r4, r0
 8007a14:	2301      	movs	r3, #1
 8007a16:	e7f0      	b.n	80079fa <_vfiprintf_r+0x1da>
 8007a18:	ab03      	add	r3, sp, #12
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <_vfiprintf_r+0x258>)
 8007a20:	a904      	add	r1, sp, #16
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7fe f840 	bl	8005aa8 <_printf_float>
 8007a28:	4607      	mov	r7, r0
 8007a2a:	1c78      	adds	r0, r7, #1
 8007a2c:	d1d6      	bne.n	80079dc <_vfiprintf_r+0x1bc>
 8007a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a30:	07d9      	lsls	r1, r3, #31
 8007a32:	d405      	bmi.n	8007a40 <_vfiprintf_r+0x220>
 8007a34:	89ab      	ldrh	r3, [r5, #12]
 8007a36:	059a      	lsls	r2, r3, #22
 8007a38:	d402      	bmi.n	8007a40 <_vfiprintf_r+0x220>
 8007a3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3c:	f000 faaf 	bl	8007f9e <__retarget_lock_release_recursive>
 8007a40:	89ab      	ldrh	r3, [r5, #12]
 8007a42:	065b      	lsls	r3, r3, #25
 8007a44:	f53f af12 	bmi.w	800786c <_vfiprintf_r+0x4c>
 8007a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a4a:	e711      	b.n	8007870 <_vfiprintf_r+0x50>
 8007a4c:	ab03      	add	r3, sp, #12
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	462a      	mov	r2, r5
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <_vfiprintf_r+0x258>)
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7fe fab2 	bl	8005fc0 <_printf_i>
 8007a5c:	e7e4      	b.n	8007a28 <_vfiprintf_r+0x208>
 8007a5e:	bf00      	nop
 8007a60:	08008624 	.word	0x08008624
 8007a64:	08008644 	.word	0x08008644
 8007a68:	08008604 	.word	0x08008604
 8007a6c:	080084f2 	.word	0x080084f2
 8007a70:	080084fc 	.word	0x080084fc
 8007a74:	08005aa9 	.word	0x08005aa9
 8007a78:	080077fb 	.word	0x080077fb
 8007a7c:	080084f8 	.word	0x080084f8

08007a80 <__swbuf_r>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	460e      	mov	r6, r1
 8007a84:	4614      	mov	r4, r2
 8007a86:	4605      	mov	r5, r0
 8007a88:	b118      	cbz	r0, 8007a92 <__swbuf_r+0x12>
 8007a8a:	6983      	ldr	r3, [r0, #24]
 8007a8c:	b90b      	cbnz	r3, 8007a92 <__swbuf_r+0x12>
 8007a8e:	f000 f9e7 	bl	8007e60 <__sinit>
 8007a92:	4b21      	ldr	r3, [pc, #132]	; (8007b18 <__swbuf_r+0x98>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d12b      	bne.n	8007af0 <__swbuf_r+0x70>
 8007a98:	686c      	ldr	r4, [r5, #4]
 8007a9a:	69a3      	ldr	r3, [r4, #24]
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	071a      	lsls	r2, r3, #28
 8007aa2:	d52f      	bpl.n	8007b04 <__swbuf_r+0x84>
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	b36b      	cbz	r3, 8007b04 <__swbuf_r+0x84>
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	6820      	ldr	r0, [r4, #0]
 8007aac:	1ac0      	subs	r0, r0, r3
 8007aae:	6963      	ldr	r3, [r4, #20]
 8007ab0:	b2f6      	uxtb	r6, r6
 8007ab2:	4283      	cmp	r3, r0
 8007ab4:	4637      	mov	r7, r6
 8007ab6:	dc04      	bgt.n	8007ac2 <__swbuf_r+0x42>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f93c 	bl	8007d38 <_fflush_r>
 8007ac0:	bb30      	cbnz	r0, 8007b10 <__swbuf_r+0x90>
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	60a3      	str	r3, [r4, #8]
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	6022      	str	r2, [r4, #0]
 8007ace:	701e      	strb	r6, [r3, #0]
 8007ad0:	6963      	ldr	r3, [r4, #20]
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	4283      	cmp	r3, r0
 8007ad6:	d004      	beq.n	8007ae2 <__swbuf_r+0x62>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	07db      	lsls	r3, r3, #31
 8007adc:	d506      	bpl.n	8007aec <__swbuf_r+0x6c>
 8007ade:	2e0a      	cmp	r6, #10
 8007ae0:	d104      	bne.n	8007aec <__swbuf_r+0x6c>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 f927 	bl	8007d38 <_fflush_r>
 8007aea:	b988      	cbnz	r0, 8007b10 <__swbuf_r+0x90>
 8007aec:	4638      	mov	r0, r7
 8007aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <__swbuf_r+0x9c>)
 8007af2:	429c      	cmp	r4, r3
 8007af4:	d101      	bne.n	8007afa <__swbuf_r+0x7a>
 8007af6:	68ac      	ldr	r4, [r5, #8]
 8007af8:	e7cf      	b.n	8007a9a <__swbuf_r+0x1a>
 8007afa:	4b09      	ldr	r3, [pc, #36]	; (8007b20 <__swbuf_r+0xa0>)
 8007afc:	429c      	cmp	r4, r3
 8007afe:	bf08      	it	eq
 8007b00:	68ec      	ldreq	r4, [r5, #12]
 8007b02:	e7ca      	b.n	8007a9a <__swbuf_r+0x1a>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 f81a 	bl	8007b40 <__swsetup_r>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d0cb      	beq.n	8007aa8 <__swbuf_r+0x28>
 8007b10:	f04f 37ff 	mov.w	r7, #4294967295
 8007b14:	e7ea      	b.n	8007aec <__swbuf_r+0x6c>
 8007b16:	bf00      	nop
 8007b18:	08008624 	.word	0x08008624
 8007b1c:	08008644 	.word	0x08008644
 8007b20:	08008604 	.word	0x08008604

08007b24 <__ascii_wctomb>:
 8007b24:	b149      	cbz	r1, 8007b3a <__ascii_wctomb+0x16>
 8007b26:	2aff      	cmp	r2, #255	; 0xff
 8007b28:	bf85      	ittet	hi
 8007b2a:	238a      	movhi	r3, #138	; 0x8a
 8007b2c:	6003      	strhi	r3, [r0, #0]
 8007b2e:	700a      	strbls	r2, [r1, #0]
 8007b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b34:	bf98      	it	ls
 8007b36:	2001      	movls	r0, #1
 8007b38:	4770      	bx	lr
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4770      	bx	lr
	...

08007b40 <__swsetup_r>:
 8007b40:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <__swsetup_r+0xcc>)
 8007b42:	b570      	push	{r4, r5, r6, lr}
 8007b44:	681d      	ldr	r5, [r3, #0]
 8007b46:	4606      	mov	r6, r0
 8007b48:	460c      	mov	r4, r1
 8007b4a:	b125      	cbz	r5, 8007b56 <__swsetup_r+0x16>
 8007b4c:	69ab      	ldr	r3, [r5, #24]
 8007b4e:	b913      	cbnz	r3, 8007b56 <__swsetup_r+0x16>
 8007b50:	4628      	mov	r0, r5
 8007b52:	f000 f985 	bl	8007e60 <__sinit>
 8007b56:	4b2e      	ldr	r3, [pc, #184]	; (8007c10 <__swsetup_r+0xd0>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d10f      	bne.n	8007b7c <__swsetup_r+0x3c>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b64:	0719      	lsls	r1, r3, #28
 8007b66:	d42c      	bmi.n	8007bc2 <__swsetup_r+0x82>
 8007b68:	06dd      	lsls	r5, r3, #27
 8007b6a:	d411      	bmi.n	8007b90 <__swsetup_r+0x50>
 8007b6c:	2309      	movs	r3, #9
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	e03e      	b.n	8007bfa <__swsetup_r+0xba>
 8007b7c:	4b25      	ldr	r3, [pc, #148]	; (8007c14 <__swsetup_r+0xd4>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d101      	bne.n	8007b86 <__swsetup_r+0x46>
 8007b82:	68ac      	ldr	r4, [r5, #8]
 8007b84:	e7eb      	b.n	8007b5e <__swsetup_r+0x1e>
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <__swsetup_r+0xd8>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	bf08      	it	eq
 8007b8c:	68ec      	ldreq	r4, [r5, #12]
 8007b8e:	e7e6      	b.n	8007b5e <__swsetup_r+0x1e>
 8007b90:	0758      	lsls	r0, r3, #29
 8007b92:	d512      	bpl.n	8007bba <__swsetup_r+0x7a>
 8007b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b96:	b141      	cbz	r1, 8007baa <__swsetup_r+0x6a>
 8007b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d002      	beq.n	8007ba6 <__swsetup_r+0x66>
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff fcd5 	bl	8007550 <_free_r>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb0:	81a3      	strh	r3, [r4, #12]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f043 0308 	orr.w	r3, r3, #8
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	b94b      	cbnz	r3, 8007bda <__swsetup_r+0x9a>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd0:	d003      	beq.n	8007bda <__swsetup_r+0x9a>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 fa09 	bl	8007fec <__smakebuf_r>
 8007bda:	89a0      	ldrh	r0, [r4, #12]
 8007bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be0:	f010 0301 	ands.w	r3, r0, #1
 8007be4:	d00a      	beq.n	8007bfc <__swsetup_r+0xbc>
 8007be6:	2300      	movs	r3, #0
 8007be8:	60a3      	str	r3, [r4, #8]
 8007bea:	6963      	ldr	r3, [r4, #20]
 8007bec:	425b      	negs	r3, r3
 8007bee:	61a3      	str	r3, [r4, #24]
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	b943      	cbnz	r3, 8007c06 <__swsetup_r+0xc6>
 8007bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bf8:	d1ba      	bne.n	8007b70 <__swsetup_r+0x30>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	0781      	lsls	r1, r0, #30
 8007bfe:	bf58      	it	pl
 8007c00:	6963      	ldrpl	r3, [r4, #20]
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	e7f4      	b.n	8007bf0 <__swsetup_r+0xb0>
 8007c06:	2000      	movs	r0, #0
 8007c08:	e7f7      	b.n	8007bfa <__swsetup_r+0xba>
 8007c0a:	bf00      	nop
 8007c0c:	2000000c 	.word	0x2000000c
 8007c10:	08008624 	.word	0x08008624
 8007c14:	08008644 	.word	0x08008644
 8007c18:	08008604 	.word	0x08008604

08007c1c <abort>:
 8007c1c:	b508      	push	{r3, lr}
 8007c1e:	2006      	movs	r0, #6
 8007c20:	f000 fa4c 	bl	80080bc <raise>
 8007c24:	2001      	movs	r0, #1
 8007c26:	f7f9 fb8f 	bl	8001348 <_exit>
	...

08007c2c <__sflush_r>:
 8007c2c:	898a      	ldrh	r2, [r1, #12]
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	4605      	mov	r5, r0
 8007c34:	0710      	lsls	r0, r2, #28
 8007c36:	460c      	mov	r4, r1
 8007c38:	d458      	bmi.n	8007cec <__sflush_r+0xc0>
 8007c3a:	684b      	ldr	r3, [r1, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc05      	bgt.n	8007c4c <__sflush_r+0x20>
 8007c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc02      	bgt.n	8007c4c <__sflush_r+0x20>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d0f9      	beq.n	8007c46 <__sflush_r+0x1a>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c58:	682f      	ldr	r7, [r5, #0]
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	d032      	beq.n	8007cc4 <__sflush_r+0x98>
 8007c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	075a      	lsls	r2, r3, #29
 8007c64:	d505      	bpl.n	8007c72 <__sflush_r+0x46>
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	1ac0      	subs	r0, r0, r3
 8007c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c6c:	b10b      	cbz	r3, 8007c72 <__sflush_r+0x46>
 8007c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	4602      	mov	r2, r0
 8007c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c78:	6a21      	ldr	r1, [r4, #32]
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	d106      	bne.n	8007c92 <__sflush_r+0x66>
 8007c84:	6829      	ldr	r1, [r5, #0]
 8007c86:	291d      	cmp	r1, #29
 8007c88:	d82c      	bhi.n	8007ce4 <__sflush_r+0xb8>
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <__sflush_r+0x108>)
 8007c8c:	40ca      	lsrs	r2, r1
 8007c8e:	07d6      	lsls	r6, r2, #31
 8007c90:	d528      	bpl.n	8007ce4 <__sflush_r+0xb8>
 8007c92:	2200      	movs	r2, #0
 8007c94:	6062      	str	r2, [r4, #4]
 8007c96:	04d9      	lsls	r1, r3, #19
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	d504      	bpl.n	8007ca8 <__sflush_r+0x7c>
 8007c9e:	1c42      	adds	r2, r0, #1
 8007ca0:	d101      	bne.n	8007ca6 <__sflush_r+0x7a>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	b903      	cbnz	r3, 8007ca8 <__sflush_r+0x7c>
 8007ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d0ca      	beq.n	8007c46 <__sflush_r+0x1a>
 8007cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <__sflush_r+0x92>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f7ff fc49 	bl	8007550 <_free_r>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cc2:	e7c1      	b.n	8007c48 <__sflush_r+0x1c>
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b0      	blx	r6
 8007ccc:	1c41      	adds	r1, r0, #1
 8007cce:	d1c7      	bne.n	8007c60 <__sflush_r+0x34>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c4      	beq.n	8007c60 <__sflush_r+0x34>
 8007cd6:	2b1d      	cmp	r3, #29
 8007cd8:	d001      	beq.n	8007cde <__sflush_r+0xb2>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	d101      	bne.n	8007ce2 <__sflush_r+0xb6>
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	e7b1      	b.n	8007c46 <__sflush_r+0x1a>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7ad      	b.n	8007c48 <__sflush_r+0x1c>
 8007cec:	690f      	ldr	r7, [r1, #16]
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d0a9      	beq.n	8007c46 <__sflush_r+0x1a>
 8007cf2:	0793      	lsls	r3, r2, #30
 8007cf4:	680e      	ldr	r6, [r1, #0]
 8007cf6:	bf08      	it	eq
 8007cf8:	694b      	ldreq	r3, [r1, #20]
 8007cfa:	600f      	str	r7, [r1, #0]
 8007cfc:	bf18      	it	ne
 8007cfe:	2300      	movne	r3, #0
 8007d00:	eba6 0807 	sub.w	r8, r6, r7
 8007d04:	608b      	str	r3, [r1, #8]
 8007d06:	f1b8 0f00 	cmp.w	r8, #0
 8007d0a:	dd9c      	ble.n	8007c46 <__sflush_r+0x1a>
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d10:	4643      	mov	r3, r8
 8007d12:	463a      	mov	r2, r7
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b0      	blx	r6
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	dc06      	bgt.n	8007d2a <__sflush_r+0xfe>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e78e      	b.n	8007c48 <__sflush_r+0x1c>
 8007d2a:	4407      	add	r7, r0
 8007d2c:	eba8 0800 	sub.w	r8, r8, r0
 8007d30:	e7e9      	b.n	8007d06 <__sflush_r+0xda>
 8007d32:	bf00      	nop
 8007d34:	20400001 	.word	0x20400001

08007d38 <_fflush_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	690b      	ldr	r3, [r1, #16]
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b913      	cbnz	r3, 8007d48 <_fflush_r+0x10>
 8007d42:	2500      	movs	r5, #0
 8007d44:	4628      	mov	r0, r5
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	b118      	cbz	r0, 8007d52 <_fflush_r+0x1a>
 8007d4a:	6983      	ldr	r3, [r0, #24]
 8007d4c:	b90b      	cbnz	r3, 8007d52 <_fflush_r+0x1a>
 8007d4e:	f000 f887 	bl	8007e60 <__sinit>
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <_fflush_r+0x6c>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d11b      	bne.n	8007d90 <_fflush_r+0x58>
 8007d58:	686c      	ldr	r4, [r5, #4]
 8007d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0ef      	beq.n	8007d42 <_fflush_r+0xa>
 8007d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d64:	07d0      	lsls	r0, r2, #31
 8007d66:	d404      	bmi.n	8007d72 <_fflush_r+0x3a>
 8007d68:	0599      	lsls	r1, r3, #22
 8007d6a:	d402      	bmi.n	8007d72 <_fflush_r+0x3a>
 8007d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6e:	f000 f915 	bl	8007f9c <__retarget_lock_acquire_recursive>
 8007d72:	4628      	mov	r0, r5
 8007d74:	4621      	mov	r1, r4
 8007d76:	f7ff ff59 	bl	8007c2c <__sflush_r>
 8007d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d7c:	07da      	lsls	r2, r3, #31
 8007d7e:	4605      	mov	r5, r0
 8007d80:	d4e0      	bmi.n	8007d44 <_fflush_r+0xc>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	059b      	lsls	r3, r3, #22
 8007d86:	d4dd      	bmi.n	8007d44 <_fflush_r+0xc>
 8007d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d8a:	f000 f908 	bl	8007f9e <__retarget_lock_release_recursive>
 8007d8e:	e7d9      	b.n	8007d44 <_fflush_r+0xc>
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <_fflush_r+0x70>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <_fflush_r+0x62>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7df      	b.n	8007d5a <_fflush_r+0x22>
 8007d9a:	4b04      	ldr	r3, [pc, #16]	; (8007dac <_fflush_r+0x74>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7da      	b.n	8007d5a <_fflush_r+0x22>
 8007da4:	08008624 	.word	0x08008624
 8007da8:	08008644 	.word	0x08008644
 8007dac:	08008604 	.word	0x08008604

08007db0 <std>:
 8007db0:	2300      	movs	r3, #0
 8007db2:	b510      	push	{r4, lr}
 8007db4:	4604      	mov	r4, r0
 8007db6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dbe:	6083      	str	r3, [r0, #8]
 8007dc0:	8181      	strh	r1, [r0, #12]
 8007dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc4:	81c2      	strh	r2, [r0, #14]
 8007dc6:	6183      	str	r3, [r0, #24]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	2208      	movs	r2, #8
 8007dcc:	305c      	adds	r0, #92	; 0x5c
 8007dce:	f7fd fdd3 	bl	8005978 <memset>
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x38>)
 8007dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x3c>)
 8007dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x40>)
 8007ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <std+0x44>)
 8007de0:	6224      	str	r4, [r4, #32]
 8007de2:	6323      	str	r3, [r4, #48]	; 0x30
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	080080f5 	.word	0x080080f5
 8007dec:	08008117 	.word	0x08008117
 8007df0:	0800814f 	.word	0x0800814f
 8007df4:	08008173 	.word	0x08008173

08007df8 <_cleanup_r>:
 8007df8:	4901      	ldr	r1, [pc, #4]	; (8007e00 <_cleanup_r+0x8>)
 8007dfa:	f000 b8af 	b.w	8007f5c <_fwalk_reent>
 8007dfe:	bf00      	nop
 8007e00:	08007d39 	.word	0x08007d39

08007e04 <__sfmoreglue>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	2268      	movs	r2, #104	; 0x68
 8007e08:	1e4d      	subs	r5, r1, #1
 8007e0a:	4355      	muls	r5, r2
 8007e0c:	460e      	mov	r6, r1
 8007e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e12:	f7ff fc09 	bl	8007628 <_malloc_r>
 8007e16:	4604      	mov	r4, r0
 8007e18:	b140      	cbz	r0, 8007e2c <__sfmoreglue+0x28>
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e20:	300c      	adds	r0, #12
 8007e22:	60a0      	str	r0, [r4, #8]
 8007e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e28:	f7fd fda6 	bl	8005978 <memset>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}

08007e30 <__sfp_lock_acquire>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sfp_lock_acquire+0x8>)
 8007e32:	f000 b8b3 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 8007e36:	bf00      	nop
 8007e38:	20000399 	.word	0x20000399

08007e3c <__sfp_lock_release>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__sfp_lock_release+0x8>)
 8007e3e:	f000 b8ae 	b.w	8007f9e <__retarget_lock_release_recursive>
 8007e42:	bf00      	nop
 8007e44:	20000399 	.word	0x20000399

08007e48 <__sinit_lock_acquire>:
 8007e48:	4801      	ldr	r0, [pc, #4]	; (8007e50 <__sinit_lock_acquire+0x8>)
 8007e4a:	f000 b8a7 	b.w	8007f9c <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	2000039a 	.word	0x2000039a

08007e54 <__sinit_lock_release>:
 8007e54:	4801      	ldr	r0, [pc, #4]	; (8007e5c <__sinit_lock_release+0x8>)
 8007e56:	f000 b8a2 	b.w	8007f9e <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	2000039a 	.word	0x2000039a

08007e60 <__sinit>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	f7ff fff0 	bl	8007e48 <__sinit_lock_acquire>
 8007e68:	69a3      	ldr	r3, [r4, #24]
 8007e6a:	b11b      	cbz	r3, 8007e74 <__sinit+0x14>
 8007e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e70:	f7ff bff0 	b.w	8007e54 <__sinit_lock_release>
 8007e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e78:	6523      	str	r3, [r4, #80]	; 0x50
 8007e7a:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <__sinit+0x68>)
 8007e7c:	4a13      	ldr	r2, [pc, #76]	; (8007ecc <__sinit+0x6c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e82:	42a3      	cmp	r3, r4
 8007e84:	bf04      	itt	eq
 8007e86:	2301      	moveq	r3, #1
 8007e88:	61a3      	streq	r3, [r4, #24]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f820 	bl	8007ed0 <__sfp>
 8007e90:	6060      	str	r0, [r4, #4]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f81c 	bl	8007ed0 <__sfp>
 8007e98:	60a0      	str	r0, [r4, #8]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f818 	bl	8007ed0 <__sfp>
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	60e0      	str	r0, [r4, #12]
 8007ea4:	2104      	movs	r1, #4
 8007ea6:	6860      	ldr	r0, [r4, #4]
 8007ea8:	f7ff ff82 	bl	8007db0 <std>
 8007eac:	68a0      	ldr	r0, [r4, #8]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	2109      	movs	r1, #9
 8007eb2:	f7ff ff7d 	bl	8007db0 <std>
 8007eb6:	68e0      	ldr	r0, [r4, #12]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	2112      	movs	r1, #18
 8007ebc:	f7ff ff78 	bl	8007db0 <std>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	61a3      	str	r3, [r4, #24]
 8007ec4:	e7d2      	b.n	8007e6c <__sinit+0xc>
 8007ec6:	bf00      	nop
 8007ec8:	0800828c 	.word	0x0800828c
 8007ecc:	08007df9 	.word	0x08007df9

08007ed0 <__sfp>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	f7ff ffac 	bl	8007e30 <__sfp_lock_acquire>
 8007ed8:	4b1e      	ldr	r3, [pc, #120]	; (8007f54 <__sfp+0x84>)
 8007eda:	681e      	ldr	r6, [r3, #0]
 8007edc:	69b3      	ldr	r3, [r6, #24]
 8007ede:	b913      	cbnz	r3, 8007ee6 <__sfp+0x16>
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff ffbd 	bl	8007e60 <__sinit>
 8007ee6:	3648      	adds	r6, #72	; 0x48
 8007ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	d503      	bpl.n	8007ef8 <__sfp+0x28>
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	b30b      	cbz	r3, 8007f38 <__sfp+0x68>
 8007ef4:	6836      	ldr	r6, [r6, #0]
 8007ef6:	e7f7      	b.n	8007ee8 <__sfp+0x18>
 8007ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007efc:	b9d5      	cbnz	r5, 8007f34 <__sfp+0x64>
 8007efe:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <__sfp+0x88>)
 8007f00:	60e3      	str	r3, [r4, #12]
 8007f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f06:	6665      	str	r5, [r4, #100]	; 0x64
 8007f08:	f000 f847 	bl	8007f9a <__retarget_lock_init_recursive>
 8007f0c:	f7ff ff96 	bl	8007e3c <__sfp_lock_release>
 8007f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f18:	6025      	str	r5, [r4, #0]
 8007f1a:	61a5      	str	r5, [r4, #24]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f24:	f7fd fd28 	bl	8005978 <memset>
 8007f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f30:	4620      	mov	r0, r4
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f34:	3468      	adds	r4, #104	; 0x68
 8007f36:	e7d9      	b.n	8007eec <__sfp+0x1c>
 8007f38:	2104      	movs	r1, #4
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f7ff ff62 	bl	8007e04 <__sfmoreglue>
 8007f40:	4604      	mov	r4, r0
 8007f42:	6030      	str	r0, [r6, #0]
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1d5      	bne.n	8007ef4 <__sfp+0x24>
 8007f48:	f7ff ff78 	bl	8007e3c <__sfp_lock_release>
 8007f4c:	230c      	movs	r3, #12
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	e7ee      	b.n	8007f30 <__sfp+0x60>
 8007f52:	bf00      	nop
 8007f54:	0800828c 	.word	0x0800828c
 8007f58:	ffff0001 	.word	0xffff0001

08007f5c <_fwalk_reent>:
 8007f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f60:	4606      	mov	r6, r0
 8007f62:	4688      	mov	r8, r1
 8007f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f68:	2700      	movs	r7, #0
 8007f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8007f72:	d505      	bpl.n	8007f80 <_fwalk_reent+0x24>
 8007f74:	6824      	ldr	r4, [r4, #0]
 8007f76:	2c00      	cmp	r4, #0
 8007f78:	d1f7      	bne.n	8007f6a <_fwalk_reent+0xe>
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f80:	89ab      	ldrh	r3, [r5, #12]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d907      	bls.n	8007f96 <_fwalk_reent+0x3a>
 8007f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	d003      	beq.n	8007f96 <_fwalk_reent+0x3a>
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4630      	mov	r0, r6
 8007f92:	47c0      	blx	r8
 8007f94:	4307      	orrs	r7, r0
 8007f96:	3568      	adds	r5, #104	; 0x68
 8007f98:	e7e9      	b.n	8007f6e <_fwalk_reent+0x12>

08007f9a <__retarget_lock_init_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <__retarget_lock_acquire_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_release_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <__swhatbuf_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460e      	mov	r6, r1
 8007fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa8:	2900      	cmp	r1, #0
 8007faa:	b096      	sub	sp, #88	; 0x58
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	da08      	bge.n	8007fc4 <__swhatbuf_r+0x24>
 8007fb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	602a      	str	r2, [r5, #0]
 8007fba:	061a      	lsls	r2, r3, #24
 8007fbc:	d410      	bmi.n	8007fe0 <__swhatbuf_r+0x40>
 8007fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc2:	e00e      	b.n	8007fe2 <__swhatbuf_r+0x42>
 8007fc4:	466a      	mov	r2, sp
 8007fc6:	f000 f8fb 	bl	80081c0 <_fstat_r>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	dbf1      	blt.n	8007fb2 <__swhatbuf_r+0x12>
 8007fce:	9a01      	ldr	r2, [sp, #4]
 8007fd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fd8:	425a      	negs	r2, r3
 8007fda:	415a      	adcs	r2, r3
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	e7ee      	b.n	8007fbe <__swhatbuf_r+0x1e>
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	b016      	add	sp, #88	; 0x58
 8007fe8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fec <__smakebuf_r>:
 8007fec:	898b      	ldrh	r3, [r1, #12]
 8007fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff0:	079d      	lsls	r5, r3, #30
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d507      	bpl.n	8008008 <__smakebuf_r+0x1c>
 8007ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	2301      	movs	r3, #1
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	b002      	add	sp, #8
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	ab01      	add	r3, sp, #4
 800800a:	466a      	mov	r2, sp
 800800c:	f7ff ffc8 	bl	8007fa0 <__swhatbuf_r>
 8008010:	9900      	ldr	r1, [sp, #0]
 8008012:	4605      	mov	r5, r0
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff fb07 	bl	8007628 <_malloc_r>
 800801a:	b948      	cbnz	r0, 8008030 <__smakebuf_r+0x44>
 800801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d4ef      	bmi.n	8008004 <__smakebuf_r+0x18>
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	e7e3      	b.n	8007ff8 <__smakebuf_r+0xc>
 8008030:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <__smakebuf_r+0x7c>)
 8008032:	62b3      	str	r3, [r6, #40]	; 0x28
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	6163      	str	r3, [r4, #20]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	6120      	str	r0, [r4, #16]
 8008046:	b15b      	cbz	r3, 8008060 <__smakebuf_r+0x74>
 8008048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 f8c9 	bl	80081e4 <_isatty_r>
 8008052:	b128      	cbz	r0, 8008060 <__smakebuf_r+0x74>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	f043 0301 	orr.w	r3, r3, #1
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	89a0      	ldrh	r0, [r4, #12]
 8008062:	4305      	orrs	r5, r0
 8008064:	81a5      	strh	r5, [r4, #12]
 8008066:	e7cd      	b.n	8008004 <__smakebuf_r+0x18>
 8008068:	08007df9 	.word	0x08007df9

0800806c <_raise_r>:
 800806c:	291f      	cmp	r1, #31
 800806e:	b538      	push	{r3, r4, r5, lr}
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	d904      	bls.n	8008080 <_raise_r+0x14>
 8008076:	2316      	movs	r3, #22
 8008078:	6003      	str	r3, [r0, #0]
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008082:	b112      	cbz	r2, 800808a <_raise_r+0x1e>
 8008084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008088:	b94b      	cbnz	r3, 800809e <_raise_r+0x32>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f830 	bl	80080f0 <_getpid_r>
 8008090:	462a      	mov	r2, r5
 8008092:	4601      	mov	r1, r0
 8008094:	4620      	mov	r0, r4
 8008096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800809a:	f000 b817 	b.w	80080cc <_kill_r>
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d00a      	beq.n	80080b8 <_raise_r+0x4c>
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	d103      	bne.n	80080ae <_raise_r+0x42>
 80080a6:	2316      	movs	r3, #22
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7e7      	b.n	800807e <_raise_r+0x12>
 80080ae:	2400      	movs	r4, #0
 80080b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080b4:	4628      	mov	r0, r5
 80080b6:	4798      	blx	r3
 80080b8:	2000      	movs	r0, #0
 80080ba:	e7e0      	b.n	800807e <_raise_r+0x12>

080080bc <raise>:
 80080bc:	4b02      	ldr	r3, [pc, #8]	; (80080c8 <raise+0xc>)
 80080be:	4601      	mov	r1, r0
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f7ff bfd3 	b.w	800806c <_raise_r>
 80080c6:	bf00      	nop
 80080c8:	2000000c 	.word	0x2000000c

080080cc <_kill_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_kill_r+0x20>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	4611      	mov	r1, r2
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	f7f9 f925 	bl	8001328 <_kill>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	d102      	bne.n	80080e8 <_kill_r+0x1c>
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	b103      	cbz	r3, 80080e8 <_kill_r+0x1c>
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	20000394 	.word	0x20000394

080080f0 <_getpid_r>:
 80080f0:	f7f9 b912 	b.w	8001318 <_getpid>

080080f4 <__sread>:
 80080f4:	b510      	push	{r4, lr}
 80080f6:	460c      	mov	r4, r1
 80080f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fc:	f000 f894 	bl	8008228 <_read_r>
 8008100:	2800      	cmp	r0, #0
 8008102:	bfab      	itete	ge
 8008104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008106:	89a3      	ldrhlt	r3, [r4, #12]
 8008108:	181b      	addge	r3, r3, r0
 800810a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800810e:	bfac      	ite	ge
 8008110:	6563      	strge	r3, [r4, #84]	; 0x54
 8008112:	81a3      	strhlt	r3, [r4, #12]
 8008114:	bd10      	pop	{r4, pc}

08008116 <__swrite>:
 8008116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	461f      	mov	r7, r3
 800811c:	898b      	ldrh	r3, [r1, #12]
 800811e:	05db      	lsls	r3, r3, #23
 8008120:	4605      	mov	r5, r0
 8008122:	460c      	mov	r4, r1
 8008124:	4616      	mov	r6, r2
 8008126:	d505      	bpl.n	8008134 <__swrite+0x1e>
 8008128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812c:	2302      	movs	r3, #2
 800812e:	2200      	movs	r2, #0
 8008130:	f000 f868 	bl	8008204 <_lseek_r>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	4632      	mov	r2, r6
 8008142:	463b      	mov	r3, r7
 8008144:	4628      	mov	r0, r5
 8008146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814a:	f000 b817 	b.w	800817c <_write_r>

0800814e <__sseek>:
 800814e:	b510      	push	{r4, lr}
 8008150:	460c      	mov	r4, r1
 8008152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008156:	f000 f855 	bl	8008204 <_lseek_r>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	bf15      	itete	ne
 8008160:	6560      	strne	r0, [r4, #84]	; 0x54
 8008162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800816a:	81a3      	strheq	r3, [r4, #12]
 800816c:	bf18      	it	ne
 800816e:	81a3      	strhne	r3, [r4, #12]
 8008170:	bd10      	pop	{r4, pc}

08008172 <__sclose>:
 8008172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008176:	f000 b813 	b.w	80081a0 <_close_r>
	...

0800817c <_write_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d07      	ldr	r5, [pc, #28]	; (800819c <_write_r+0x20>)
 8008180:	4604      	mov	r4, r0
 8008182:	4608      	mov	r0, r1
 8008184:	4611      	mov	r1, r2
 8008186:	2200      	movs	r2, #0
 8008188:	602a      	str	r2, [r5, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	f7f9 f903 	bl	8001396 <_write>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_write_r+0x1e>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_write_r+0x1e>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	20000394 	.word	0x20000394

080081a0 <_close_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d06      	ldr	r5, [pc, #24]	; (80081bc <_close_r+0x1c>)
 80081a4:	2300      	movs	r3, #0
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	602b      	str	r3, [r5, #0]
 80081ac:	f7f9 f90f 	bl	80013ce <_close>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_close_r+0x1a>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_close_r+0x1a>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000394 	.word	0x20000394

080081c0 <_fstat_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d07      	ldr	r5, [pc, #28]	; (80081e0 <_fstat_r+0x20>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	602b      	str	r3, [r5, #0]
 80081ce:	f7f9 f90a 	bl	80013e6 <_fstat>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	d102      	bne.n	80081dc <_fstat_r+0x1c>
 80081d6:	682b      	ldr	r3, [r5, #0]
 80081d8:	b103      	cbz	r3, 80081dc <_fstat_r+0x1c>
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	bd38      	pop	{r3, r4, r5, pc}
 80081de:	bf00      	nop
 80081e0:	20000394 	.word	0x20000394

080081e4 <_isatty_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4d06      	ldr	r5, [pc, #24]	; (8008200 <_isatty_r+0x1c>)
 80081e8:	2300      	movs	r3, #0
 80081ea:	4604      	mov	r4, r0
 80081ec:	4608      	mov	r0, r1
 80081ee:	602b      	str	r3, [r5, #0]
 80081f0:	f7f9 f909 	bl	8001406 <_isatty>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_isatty_r+0x1a>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_isatty_r+0x1a>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	20000394 	.word	0x20000394

08008204 <_lseek_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	; (8008224 <_lseek_r+0x20>)
 8008208:	4604      	mov	r4, r0
 800820a:	4608      	mov	r0, r1
 800820c:	4611      	mov	r1, r2
 800820e:	2200      	movs	r2, #0
 8008210:	602a      	str	r2, [r5, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	f7f9 f902 	bl	800141c <_lseek>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_lseek_r+0x1e>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_lseek_r+0x1e>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20000394 	.word	0x20000394

08008228 <_read_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d07      	ldr	r5, [pc, #28]	; (8008248 <_read_r+0x20>)
 800822c:	4604      	mov	r4, r0
 800822e:	4608      	mov	r0, r1
 8008230:	4611      	mov	r1, r2
 8008232:	2200      	movs	r2, #0
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f7f9 f890 	bl	800135c <_read>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_read_r+0x1e>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_read_r+0x1e>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	20000394 	.word	0x20000394

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr
